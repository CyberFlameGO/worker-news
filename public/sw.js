(() => {
  var __create = Object.create;
  var __freeze = Object.freeze;
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __require = /* @__PURE__ */ ((x4) => typeof require !== "undefined" ? require : typeof Proxy !== "undefined" ? new Proxy(x4, {
    get: (a, b) => (typeof require !== "undefined" ? require : a)[b]
  }) : x4)(function(x4) {
    if (typeof require !== "undefined")
      return require.apply(this, arguments);
    throw new Error('Dynamic require of "' + x4 + '" is not supported');
  });
  var __esm = (fn, res) => function __init() {
    return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
  };
  var __commonJS = (cb, mod) => function __require2() {
    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __export = (target2, all) => {
    for (var name in all)
      __defProp(target2, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from2, except, desc) => {
    if (from2 && typeof from2 === "object" || typeof from2 === "function") {
      for (let key2 of __getOwnPropNames(from2))
        if (!__hasOwnProp.call(to, key2) && key2 !== except)
          __defProp(to, key2, { get: () => from2[key2], enumerable: !(desc = __getOwnPropDesc(from2, key2)) || desc.enumerable });
    }
    return to;
  };
  var __toESM = (mod, isNodeMode, target2) => (target2 = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target2, "default", { value: mod, enumerable: true }) : target2, mod));
  var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
  var __template = (cooked, raw) => __freeze(__defProp(cooked, "raw", { value: __freeze(raw || cooked.slice()) }));

  // env.js
  var init_env = __esm({
    "env.js"() {
      self.DENO_STORAGE_AREA__DEFAULT_URL = "sqlite://database.sqlite";
    }
  });

  // node_modules/.pnpm/@stardazed+zlib@1.0.1/node_modules/@stardazed/zlib/dist/sd-zlib.esm.js
  function u8ArrayFromBufferSource(source) {
    if (source instanceof ArrayBuffer) {
      return new Uint8Array(source);
    }
    if (!ArrayBuffer.isView(source)) {
      return void 0;
    }
    if (!(source instanceof Uint8Array)) {
      return new Uint8Array(source.buffer, source.byteOffset, source.byteLength);
    }
    return source;
  }
  function adler32(source, seed = 1) {
    const view = u8ArrayFromBufferSource(source);
    if (!view) {
      throw new TypeError("source must be a BufferSource");
    }
    return computeAdler32(view, seed);
  }
  function computeAdler32(buf, adler = 1) {
    let sum2 = adler >>> 16 & 65535;
    adler &= 65535;
    let len = buf.length;
    let offset = 0;
    while (len >= NMAX) {
      len -= NMAX;
      let n = NMAX / 16;
      do {
        adler += buf[offset++];
        sum2 += adler;
        adler += buf[offset++];
        sum2 += adler;
        adler += buf[offset++];
        sum2 += adler;
        adler += buf[offset++];
        sum2 += adler;
        adler += buf[offset++];
        sum2 += adler;
        adler += buf[offset++];
        sum2 += adler;
        adler += buf[offset++];
        sum2 += adler;
        adler += buf[offset++];
        sum2 += adler;
        adler += buf[offset++];
        sum2 += adler;
        adler += buf[offset++];
        sum2 += adler;
        adler += buf[offset++];
        sum2 += adler;
        adler += buf[offset++];
        sum2 += adler;
        adler += buf[offset++];
        sum2 += adler;
        adler += buf[offset++];
        sum2 += adler;
        adler += buf[offset++];
        sum2 += adler;
        adler += buf[offset++];
        sum2 += adler;
      } while (--n);
      adler %= BASE;
      sum2 += BASE;
    }
    if (len) {
      while (len >= 16) {
        len -= 16;
        adler += buf[offset++];
        sum2 += adler;
        adler += buf[offset++];
        sum2 += adler;
        adler += buf[offset++];
        sum2 += adler;
        adler += buf[offset++];
        sum2 += adler;
        adler += buf[offset++];
        sum2 += adler;
        adler += buf[offset++];
        sum2 += adler;
        adler += buf[offset++];
        sum2 += adler;
        adler += buf[offset++];
        sum2 += adler;
        adler += buf[offset++];
        sum2 += adler;
        adler += buf[offset++];
        sum2 += adler;
        adler += buf[offset++];
        sum2 += adler;
        adler += buf[offset++];
        sum2 += adler;
        adler += buf[offset++];
        sum2 += adler;
        adler += buf[offset++];
        sum2 += adler;
        adler += buf[offset++];
        sum2 += adler;
        adler += buf[offset++];
        sum2 += adler;
      }
      while (len--) {
        adler += buf[offset++];
        sum2 += adler;
      }
      adler %= BASE;
      sum2 %= BASE;
    }
    return adler | sum2 << 16;
  }
  function crc32(source, seed = 0) {
    const view = u8ArrayFromBufferSource(source);
    if (!view) {
      throw new TypeError("source must be a BufferSource");
    }
    return computeCRC32(view, seed);
  }
  function computeCRC32Little(buf, crc = 0) {
    let c2 = ~crc;
    let offset = buf.byteOffset;
    let position3 = 0;
    let len = buf.byteLength;
    const table0 = crcTables[0];
    const table1 = crcTables[1];
    const table2 = crcTables[2];
    const table3 = crcTables[3];
    while (len && offset & 3) {
      c2 = table0[(c2 ^ buf[position3++]) & 255] ^ c2 >>> 8;
      len--;
      offset++;
    }
    const buf4 = new Uint32Array(buf.buffer, offset, len >>> 2);
    let pos4 = 0;
    while (len >= 32) {
      c2 ^= buf4[pos4++];
      c2 = table3[c2 & 255] ^ table2[c2 >>> 8 & 255] ^ table1[c2 >>> 16 & 255] ^ table0[c2 >>> 24];
      c2 ^= buf4[pos4++];
      c2 = table3[c2 & 255] ^ table2[c2 >>> 8 & 255] ^ table1[c2 >>> 16 & 255] ^ table0[c2 >>> 24];
      c2 ^= buf4[pos4++];
      c2 = table3[c2 & 255] ^ table2[c2 >>> 8 & 255] ^ table1[c2 >>> 16 & 255] ^ table0[c2 >>> 24];
      c2 ^= buf4[pos4++];
      c2 = table3[c2 & 255] ^ table2[c2 >>> 8 & 255] ^ table1[c2 >>> 16 & 255] ^ table0[c2 >>> 24];
      c2 ^= buf4[pos4++];
      c2 = table3[c2 & 255] ^ table2[c2 >>> 8 & 255] ^ table1[c2 >>> 16 & 255] ^ table0[c2 >>> 24];
      c2 ^= buf4[pos4++];
      c2 = table3[c2 & 255] ^ table2[c2 >>> 8 & 255] ^ table1[c2 >>> 16 & 255] ^ table0[c2 >>> 24];
      c2 ^= buf4[pos4++];
      c2 = table3[c2 & 255] ^ table2[c2 >>> 8 & 255] ^ table1[c2 >>> 16 & 255] ^ table0[c2 >>> 24];
      c2 ^= buf4[pos4++];
      c2 = table3[c2 & 255] ^ table2[c2 >>> 8 & 255] ^ table1[c2 >>> 16 & 255] ^ table0[c2 >>> 24];
      len -= 32;
    }
    while (len >= 4) {
      c2 ^= buf4[pos4++];
      c2 = table3[c2 & 255] ^ table2[c2 >>> 8 & 255] ^ table1[c2 >>> 16 & 255] ^ table0[c2 >>> 24];
      len -= 4;
    }
    if (len) {
      position3 += pos4 * 4;
      do {
        c2 = table0[(c2 ^ buf[position3++]) & 255] ^ c2 >>> 8;
      } while (--len);
    }
    c2 = ~c2;
    return c2;
  }
  function computeCRC32Big(buf, crc = 0) {
    let c2 = ~swap32(crc);
    let offset = buf.byteOffset;
    let position3 = 0;
    let len = buf.byteLength;
    const table4 = crcTables[4];
    const table5 = crcTables[5];
    const table6 = crcTables[6];
    const table7 = crcTables[7];
    while (len && offset & 3) {
      c2 = table4[c2 >>> 24 ^ buf[position3++]] ^ c2 << 8;
      len--;
      offset++;
    }
    const buf4 = new Uint32Array(buf.buffer, offset, len >>> 2);
    let pos4 = 0;
    while (len >= 32) {
      c2 ^= buf4[pos4++];
      c2 = table4[c2 & 255] ^ table5[c2 >>> 8 & 255] ^ table6[c2 >>> 16 & 255] ^ table7[c2 >>> 24];
      c2 ^= buf4[pos4++];
      c2 = table4[c2 & 255] ^ table5[c2 >>> 8 & 255] ^ table6[c2 >>> 16 & 255] ^ table7[c2 >>> 24];
      c2 ^= buf4[pos4++];
      c2 = table4[c2 & 255] ^ table5[c2 >>> 8 & 255] ^ table6[c2 >>> 16 & 255] ^ table7[c2 >>> 24];
      c2 ^= buf4[pos4++];
      c2 = table4[c2 & 255] ^ table5[c2 >>> 8 & 255] ^ table6[c2 >>> 16 & 255] ^ table7[c2 >>> 24];
      c2 ^= buf4[pos4++];
      c2 = table4[c2 & 255] ^ table5[c2 >>> 8 & 255] ^ table6[c2 >>> 16 & 255] ^ table7[c2 >>> 24];
      c2 ^= buf4[pos4++];
      c2 = table4[c2 & 255] ^ table5[c2 >>> 8 & 255] ^ table6[c2 >>> 16 & 255] ^ table7[c2 >>> 24];
      c2 ^= buf4[pos4++];
      c2 = table4[c2 & 255] ^ table5[c2 >>> 8 & 255] ^ table6[c2 >>> 16 & 255] ^ table7[c2 >>> 24];
      c2 ^= buf4[pos4++];
      c2 = table4[c2 & 255] ^ table5[c2 >>> 8 & 255] ^ table6[c2 >>> 16 & 255] ^ table7[c2 >>> 24];
      len -= 32;
    }
    while (len >= 4) {
      c2 ^= buf4[pos4++];
      c2 = table4[c2 & 255] ^ table5[c2 >>> 8 & 255] ^ table6[c2 >>> 16 & 255] ^ table7[c2 >>> 24];
      len -= 4;
    }
    if (len) {
      position3 += pos4 * 4;
      do {
        c2 = table4[c2 >>> 24 ^ buf[position3++]] ^ c2 << 8;
      } while (--len);
    }
    c2 = ~c2;
    return swap32(c2);
  }
  function makeCRCTables() {
    const buf = new ArrayBuffer(256 * 4 * 8);
    const tables = [
      new Uint32Array(buf, 256 * 4 * 0, 256),
      new Uint32Array(buf, 256 * 4 * 1, 256),
      new Uint32Array(buf, 256 * 4 * 2, 256),
      new Uint32Array(buf, 256 * 4 * 3, 256),
      new Uint32Array(buf, 256 * 4 * 4, 256),
      new Uint32Array(buf, 256 * 4 * 5, 256),
      new Uint32Array(buf, 256 * 4 * 6, 256),
      new Uint32Array(buf, 256 * 4 * 7, 256)
    ];
    for (let n = 0; n < 256; n++) {
      let c2 = n;
      for (let k = 0; k < 8; k++) {
        c2 = c2 & 1 ? 3988292384 ^ c2 >>> 1 : c2 >>> 1;
      }
      tables[0][n] = c2;
      tables[4][n] = swap32(c2);
    }
    for (let n = 0; n < 256; n++) {
      let c2 = tables[0][n];
      for (let k = 1; k < 4; k++) {
        c2 = tables[0][c2 & 255] ^ c2 >>> 8;
        tables[k][n] = c2;
        tables[k + 4][n] = swap32(c2);
      }
    }
    return tables;
  }
  function InfCodes() {
    let mode;
    let len = 0;
    let tree;
    let tree_index = 0;
    let need = 0;
    let lit = 0;
    let get = 0;
    let dist = 0;
    let lbits = 0;
    let dbits = 0;
    let ltree;
    let ltree_index = 0;
    let dtree;
    let dtree_index = 0;
    function inflate_fast(bl, bd, tl, tl_index, td, td_index, s, z) {
      let t;
      let tp;
      let tp_index;
      let e;
      let b;
      let k;
      let p;
      let n;
      let q;
      let m;
      let ml;
      let md;
      let c2;
      let d;
      let r2;
      let tp_index_t_3;
      p = z.next_in_index;
      n = z.avail_in;
      b = s.bitb;
      k = s.bitk;
      q = s.write;
      m = q < s.read ? s.read - q - 1 : s.end - q;
      ml = inflate_mask[bl];
      md = inflate_mask[bd];
      do {
        while (k < 20) {
          n--;
          b |= (z.next_in[p++] & 255) << k;
          k += 8;
        }
        t = b & ml;
        tp = tl;
        tp_index = tl_index;
        tp_index_t_3 = (tp_index + t) * 3;
        e = tp[tp_index_t_3];
        if (e === 0) {
          b >>= tp[tp_index_t_3 + 1];
          k -= tp[tp_index_t_3 + 1];
          s.window[q++] = tp[tp_index_t_3 + 2];
          m--;
          continue;
        }
        do {
          b >>= tp[tp_index_t_3 + 1];
          k -= tp[tp_index_t_3 + 1];
          if ((e & 16) !== 0) {
            e &= 15;
            c2 = tp[tp_index_t_3 + 2] + (b & inflate_mask[e]);
            b >>= e;
            k -= e;
            while (k < 15) {
              n--;
              b |= (z.next_in[p++] & 255) << k;
              k += 8;
            }
            t = b & md;
            tp = td;
            tp_index = td_index;
            tp_index_t_3 = (tp_index + t) * 3;
            e = tp[tp_index_t_3];
            do {
              b >>= tp[tp_index_t_3 + 1];
              k -= tp[tp_index_t_3 + 1];
              if ((e & 16) !== 0) {
                e &= 15;
                while (k < e) {
                  n--;
                  b |= (z.next_in[p++] & 255) << k;
                  k += 8;
                }
                d = tp[tp_index_t_3 + 2] + (b & inflate_mask[e]);
                b >>= e;
                k -= e;
                m -= c2;
                if (q >= d) {
                  r2 = q - d;
                  s.window[q++] = s.window[r2++];
                  s.window[q++] = s.window[r2++];
                  c2 -= 2;
                } else {
                  r2 = q - d;
                  do {
                    r2 += s.end;
                  } while (r2 < 0);
                  e = s.end - r2;
                  if (c2 > e) {
                    c2 -= e;
                    do {
                      s.window[q++] = s.window[r2++];
                    } while (--e !== 0);
                    r2 = 0;
                  }
                }
                do {
                  s.window[q++] = s.window[r2++];
                } while (--c2 !== 0);
                break;
              } else if ((e & 64) === 0) {
                t += tp[tp_index_t_3 + 2];
                t += b & inflate_mask[e];
                tp_index_t_3 = (tp_index + t) * 3;
                e = tp[tp_index_t_3];
              } else {
                z.msg = "invalid distance code";
                c2 = z.avail_in - n;
                c2 = k >> 3 < c2 ? k >> 3 : c2;
                n += c2;
                p -= c2;
                k -= c2 << 3;
                s.bitb = b;
                s.bitk = k;
                z.avail_in = n;
                z.total_in += p - z.next_in_index;
                z.next_in_index = p;
                s.write = q;
                return -3;
              }
            } while (true);
            break;
          }
          if ((e & 64) === 0) {
            t += tp[tp_index_t_3 + 2];
            t += b & inflate_mask[e];
            tp_index_t_3 = (tp_index + t) * 3;
            e = tp[tp_index_t_3];
            if (e === 0) {
              b >>= tp[tp_index_t_3 + 1];
              k -= tp[tp_index_t_3 + 1];
              s.window[q++] = tp[tp_index_t_3 + 2];
              m--;
              break;
            }
          } else if ((e & 32) !== 0) {
            c2 = z.avail_in - n;
            c2 = k >> 3 < c2 ? k >> 3 : c2;
            n += c2;
            p -= c2;
            k -= c2 << 3;
            s.bitb = b;
            s.bitk = k;
            z.avail_in = n;
            z.total_in += p - z.next_in_index;
            z.next_in_index = p;
            s.write = q;
            return 1;
          } else {
            z.msg = "invalid literal/length code";
            c2 = z.avail_in - n;
            c2 = k >> 3 < c2 ? k >> 3 : c2;
            n += c2;
            p -= c2;
            k -= c2 << 3;
            s.bitb = b;
            s.bitk = k;
            z.avail_in = n;
            z.total_in += p - z.next_in_index;
            z.next_in_index = p;
            s.write = q;
            return -3;
          }
        } while (true);
      } while (m >= 258 && n >= 10);
      c2 = z.avail_in - n;
      c2 = k >> 3 < c2 ? k >> 3 : c2;
      n += c2;
      p -= c2;
      k -= c2 << 3;
      s.bitb = b;
      s.bitk = k;
      z.avail_in = n;
      z.total_in += p - z.next_in_index;
      z.next_in_index = p;
      s.write = q;
      return 0;
    }
    function init2(bl, bd, tl, tl_index, td, td_index) {
      mode = 0;
      lbits = bl;
      dbits = bd;
      ltree = tl;
      ltree_index = tl_index;
      dtree = td;
      dtree_index = td_index;
    }
    function proc(s, z, r2) {
      let j;
      let tindex;
      let e;
      let b = 0;
      let k = 0;
      let p = 0;
      let n;
      let q;
      let m;
      let f;
      p = z.next_in_index;
      n = z.avail_in;
      b = s.bitb;
      k = s.bitk;
      q = s.write;
      m = q < s.read ? s.read - q - 1 : s.end - q;
      while (true) {
        switch (mode) {
          case 0:
            if (m >= 258 && n >= 10) {
              s.bitb = b;
              s.bitk = k;
              z.avail_in = n;
              z.total_in += p - z.next_in_index;
              z.next_in_index = p;
              s.write = q;
              r2 = inflate_fast(lbits, dbits, ltree, ltree_index, dtree, dtree_index, s, z);
              p = z.next_in_index;
              n = z.avail_in;
              b = s.bitb;
              k = s.bitk;
              q = s.write;
              m = q < s.read ? s.read - q - 1 : s.end - q;
              if (r2 !== 0) {
                mode = r2 === 1 ? 7 : 9;
                break;
              }
            }
            need = lbits;
            tree = ltree;
            tree_index = ltree_index;
            mode = 1;
          case 1:
            j = need;
            while (k < j) {
              if (n !== 0) {
                r2 = 0;
              } else {
                s.bitb = b;
                s.bitk = k;
                z.avail_in = n;
                z.total_in += p - z.next_in_index;
                z.next_in_index = p;
                s.write = q;
                return s.inflate_flush(z, r2);
              }
              n--;
              b |= (z.next_in[p++] & 255) << k;
              k += 8;
            }
            tindex = (tree_index + (b & inflate_mask[j])) * 3;
            b >>>= tree[tindex + 1];
            k -= tree[tindex + 1];
            e = tree[tindex];
            if (e === 0) {
              lit = tree[tindex + 2];
              mode = 6;
              break;
            }
            if ((e & 16) !== 0) {
              get = e & 15;
              len = tree[tindex + 2];
              mode = 2;
              break;
            }
            if ((e & 64) === 0) {
              need = e;
              tree_index = tindex / 3 + tree[tindex + 2];
              break;
            }
            if ((e & 32) !== 0) {
              mode = 7;
              break;
            }
            mode = 9;
            z.msg = "invalid literal/length code";
            r2 = -3;
            s.bitb = b;
            s.bitk = k;
            z.avail_in = n;
            z.total_in += p - z.next_in_index;
            z.next_in_index = p;
            s.write = q;
            return s.inflate_flush(z, r2);
          case 2:
            j = get;
            while (k < j) {
              if (n !== 0) {
                r2 = 0;
              } else {
                s.bitb = b;
                s.bitk = k;
                z.avail_in = n;
                z.total_in += p - z.next_in_index;
                z.next_in_index = p;
                s.write = q;
                return s.inflate_flush(z, r2);
              }
              n--;
              b |= (z.next_in[p++] & 255) << k;
              k += 8;
            }
            len += b & inflate_mask[j];
            b >>= j;
            k -= j;
            need = dbits;
            tree = dtree;
            tree_index = dtree_index;
            mode = 3;
          case 3:
            j = need;
            while (k < j) {
              if (n !== 0) {
                r2 = 0;
              } else {
                s.bitb = b;
                s.bitk = k;
                z.avail_in = n;
                z.total_in += p - z.next_in_index;
                z.next_in_index = p;
                s.write = q;
                return s.inflate_flush(z, r2);
              }
              n--;
              b |= (z.next_in[p++] & 255) << k;
              k += 8;
            }
            tindex = (tree_index + (b & inflate_mask[j])) * 3;
            b >>= tree[tindex + 1];
            k -= tree[tindex + 1];
            e = tree[tindex];
            if ((e & 16) !== 0) {
              get = e & 15;
              dist = tree[tindex + 2];
              mode = 4;
              break;
            }
            if ((e & 64) === 0) {
              need = e;
              tree_index = tindex / 3 + tree[tindex + 2];
              break;
            }
            mode = 9;
            z.msg = "invalid distance code";
            r2 = -3;
            s.bitb = b;
            s.bitk = k;
            z.avail_in = n;
            z.total_in += p - z.next_in_index;
            z.next_in_index = p;
            s.write = q;
            return s.inflate_flush(z, r2);
          case 4:
            j = get;
            while (k < j) {
              if (n !== 0) {
                r2 = 0;
              } else {
                s.bitb = b;
                s.bitk = k;
                z.avail_in = n;
                z.total_in += p - z.next_in_index;
                z.next_in_index = p;
                s.write = q;
                return s.inflate_flush(z, r2);
              }
              n--;
              b |= (z.next_in[p++] & 255) << k;
              k += 8;
            }
            dist += b & inflate_mask[j];
            b >>= j;
            k -= j;
            mode = 5;
          case 5:
            f = q - dist;
            while (f < 0) {
              f += s.end;
            }
            while (len !== 0) {
              if (m === 0) {
                if (q === s.end && s.read !== 0) {
                  q = 0;
                  m = q < s.read ? s.read - q - 1 : s.end - q;
                }
                if (m === 0) {
                  s.write = q;
                  r2 = s.inflate_flush(z, r2);
                  q = s.write;
                  m = q < s.read ? s.read - q - 1 : s.end - q;
                  if (q === s.end && s.read !== 0) {
                    q = 0;
                    m = q < s.read ? s.read - q - 1 : s.end - q;
                  }
                  if (m === 0) {
                    s.bitb = b;
                    s.bitk = k;
                    z.avail_in = n;
                    z.total_in += p - z.next_in_index;
                    z.next_in_index = p;
                    s.write = q;
                    return s.inflate_flush(z, r2);
                  }
                }
              }
              s.window[q++] = s.window[f++];
              m--;
              if (f === s.end) {
                f = 0;
              }
              len--;
            }
            mode = 0;
            break;
          case 6:
            if (m === 0) {
              if (q === s.end && s.read !== 0) {
                q = 0;
                m = q < s.read ? s.read - q - 1 : s.end - q;
              }
              if (m === 0) {
                s.write = q;
                r2 = s.inflate_flush(z, r2);
                q = s.write;
                m = q < s.read ? s.read - q - 1 : s.end - q;
                if (q === s.end && s.read !== 0) {
                  q = 0;
                  m = q < s.read ? s.read - q - 1 : s.end - q;
                }
                if (m === 0) {
                  s.bitb = b;
                  s.bitk = k;
                  z.avail_in = n;
                  z.total_in += p - z.next_in_index;
                  z.next_in_index = p;
                  s.write = q;
                  return s.inflate_flush(z, r2);
                }
              }
            }
            r2 = 0;
            s.window[q++] = lit;
            m--;
            mode = 0;
            break;
          case 7:
            if (k > 7) {
              k -= 8;
              n++;
              p--;
            }
            s.write = q;
            r2 = s.inflate_flush(z, r2);
            q = s.write;
            m = q < s.read ? s.read - q - 1 : s.end - q;
            if (s.read !== s.write) {
              s.bitb = b;
              s.bitk = k;
              z.avail_in = n;
              z.total_in += p - z.next_in_index;
              z.next_in_index = p;
              s.write = q;
              return s.inflate_flush(z, r2);
            }
            mode = 8;
          case 8:
            r2 = 1;
            s.bitb = b;
            s.bitk = k;
            z.avail_in = n;
            z.total_in += p - z.next_in_index;
            z.next_in_index = p;
            s.write = q;
            return s.inflate_flush(z, r2);
          case 9:
            r2 = -3;
            s.bitb = b;
            s.bitk = k;
            z.avail_in = n;
            z.total_in += p - z.next_in_index;
            z.next_in_index = p;
            s.write = q;
            return s.inflate_flush(z, r2);
          default:
            r2 = -2;
            s.bitb = b;
            s.bitk = k;
            z.avail_in = n;
            z.total_in += p - z.next_in_index;
            z.next_in_index = p;
            s.write = q;
            return s.inflate_flush(z, r2);
        }
      }
    }
    return {
      init: init2,
      proc
    };
  }
  function huft_build(b, bindex, n, s, d, e, t, m, hp, hn2, v2) {
    let a;
    let f;
    let g;
    let h;
    let i;
    let j;
    let k;
    let l;
    let mask;
    let p;
    let q;
    let w;
    let xp;
    let y;
    let z;
    p = 0;
    i = n;
    do {
      c[b[bindex + p]]++;
      p++;
      i--;
    } while (i !== 0);
    if (c[0] === n) {
      t[0] = -1;
      m[0] = 0;
      return 0;
    }
    l = m[0];
    for (j = 1; j <= BMAX; j++) {
      if (c[j] !== 0) {
        break;
      }
    }
    k = j;
    if (l < j) {
      l = j;
    }
    for (i = BMAX; i !== 0; i--) {
      if (c[i] !== 0) {
        break;
      }
    }
    g = i;
    if (l > i) {
      l = i;
    }
    m[0] = l;
    for (y = 1 << j; j < i; j++, y <<= 1) {
      y -= c[j];
      if (y < 0) {
        return -3;
      }
    }
    y -= c[i];
    if (y < 0) {
      return -3;
    }
    c[i] += y;
    x[1] = j = 0;
    p = 1;
    xp = 2;
    while (--i !== 0) {
      x[xp] = j += c[p];
      xp++;
      p++;
    }
    i = 0;
    p = 0;
    do {
      j = b[bindex + p];
      if (j !== 0) {
        v2[x[j]++] = i;
      }
      p++;
    } while (++i < n);
    n = x[g];
    x[0] = i = 0;
    p = 0;
    h = -1;
    w = -l;
    u[0] = 0;
    q = 0;
    z = 0;
    for (; k <= g; k++) {
      a = c[k];
      while (a-- !== 0) {
        while (k > w + l) {
          h++;
          w += l;
          z = g - w;
          z = z > l ? l : z;
          f = 1 << (j = k - w);
          if (f > a + 1) {
            f -= a + 1;
            xp = k;
            if (j < z) {
              while (++j < z) {
                f <<= 1;
                if (f <= c[++xp]) {
                  break;
                }
                f -= c[xp];
              }
            }
          }
          z = 1 << j;
          if (hn2[0] + z > 1400) {
            return -3;
          }
          u[h] = q = hn2[0];
          hn2[0] += z;
          if (h !== 0) {
            x[h] = i;
            r[0] = j;
            r[1] = l;
            j = i >>> w - l;
            r[2] = q - u[h - 1] - j;
            hp.set(r, (u[h - 1] + j) * 3);
          } else {
            t[0] = q;
          }
        }
        r[1] = k - w;
        if (p >= n) {
          r[0] = 128 + 64;
        } else if (v2[p] < s) {
          r[0] = v2[p] < 256 ? 0 : 32 + 64;
          r[2] = v2[p++];
        } else {
          r[0] = e[v2[p] - s] + 16 + 64;
          r[2] = d[v2[p++] - s];
        }
        f = 1 << k - w;
        for (j = i >>> w; j < z; j += f) {
          hp.set(r, (q + j) * 3);
        }
        for (j = 1 << k - 1; (i & j) !== 0; j >>>= 1) {
          i ^= j;
        }
        i ^= j;
        mask = (1 << w) - 1;
        while ((i & mask) !== x[h]) {
          h--;
          w -= l;
          mask = (1 << w) - 1;
        }
      }
    }
    return y !== 0 && g !== 1 ? -5 : 0;
  }
  function initWorkArea(vsize) {
    v = new Int32Array(vsize);
    for (let i = 0; i < BMAX + 1; i++) {
      c[i] = 0;
      u[i] = 0;
      x[i] = 0;
    }
    for (let i = 0; i < 3; i++) {
      r[i] = 0;
    }
  }
  function inflate_trees_bits(c2, bb, tb, hp, z) {
    initWorkArea(19);
    hn[0] = 0;
    let result = huft_build(c2, 0, 19, 19, null, null, tb, bb, hp, hn, v);
    if (result === -3) {
      z.msg = "oversubscribed dynamic bit lengths tree";
    } else if (result === -5 || bb[0] === 0) {
      z.msg = "incomplete dynamic bit lengths tree";
      result = -3;
    }
    return result;
  }
  function inflate_trees_dynamic(nl, nd, c2, bl, bd, tl, td, hp, z) {
    initWorkArea(288);
    hn[0] = 0;
    let result = huft_build(c2, 0, nl, 257, cplens, cplext, tl, bl, hp, hn, v);
    if (result !== 0 || bl[0] === 0) {
      if (result === -3) {
        z.msg = "oversubscribed literal/length tree";
      } else {
        z.msg = "incomplete literal/length tree";
        result = -3;
      }
      return result;
    }
    initWorkArea(288);
    result = huft_build(c2, nl, nd, 0, cpdist, cpdext, td, bd, hp, hn, v);
    if (result !== 0 || bd[0] === 0 && nl > 257) {
      if (result === -3) {
        z.msg = "oversubscribed distance tree";
      } else if (result === -5) {
        z.msg = "incomplete distance tree";
        result = -3;
      } else {
        z.msg = "empty distance tree with lengths";
        result = -3;
      }
      return result;
    }
    return 0;
  }
  function inflate_trees_fixed(bl, bd, tl, td) {
    bl[0] = fixed_bl;
    bd[0] = fixed_bd;
    tl[0] = fixed_tl;
    td[0] = fixed_td;
    return 0;
  }
  function smaller(tree, n, m, depth) {
    const tn2 = tree[n * 2];
    const tm2 = tree[m * 2];
    return tn2 < tm2 || tn2 == tm2 && depth[n] <= depth[m];
  }
  var PRESET_DICT, Z_DEFLATED, GZIP_ID1, GZIP_ID2, inflate_mask, swap32, BASE, NMAX, endian, endianCheck, computeCRC32, crcTables, OUTPUT_BUFSIZE, ZStream, fixed_bl, fixed_bd, fixed_tl, fixed_td, cplens, cplext, cpdist, cpdext, BMAX, v, hn, c, r, u, x, border, InfBlocks, Inflate, Inflater, D_CODES, BL_CODES, LENGTH_CODES, LITERALS, L_CODES, HEAP_SIZE, MAX_BL_BITS, _dist_code, Tree, StaticTree, makeConfig, config_table, END_BLOCK, REP_3_6, REPZ_3_10, REPZ_11_138, STORED_BLOCK, STATIC_TREES, DYN_TREES, MIN_MATCH, MAX_MATCH, MIN_LOOKAHEAD, hash_bits, hash_size, hash_mask, hash_shift, lit_bufsize, pending_buf_size, d_buf, l_buf, window_size, Deflate, Deflater;
  var init_sd_zlib_esm = __esm({
    "node_modules/.pnpm/@stardazed+zlib@1.0.1/node_modules/@stardazed/zlib/dist/sd-zlib.esm.js"() {
      init_env();
      PRESET_DICT = 32;
      Z_DEFLATED = 8;
      GZIP_ID1 = 31;
      GZIP_ID2 = 139;
      inflate_mask = [
        0,
        1,
        3,
        7,
        15,
        31,
        63,
        127,
        255,
        511,
        1023,
        2047,
        4095,
        8191,
        16383,
        32767,
        65535
      ];
      swap32 = (q) => (q >>> 24 & 255 | q >>> 8 & 65280 | (q & 65280) << 8 | (q & 255) << 24) >>> 0;
      BASE = 65521;
      NMAX = 5552;
      endian = new Uint32Array([1]);
      endianCheck = new Uint8Array(endian.buffer, 0, 1)[0];
      computeCRC32 = endianCheck === 1 ? computeCRC32Little : computeCRC32Big;
      crcTables = makeCRCTables();
      OUTPUT_BUFSIZE = 16384;
      ZStream = class {
        constructor() {
          this.avail_in = 0;
          this.next_in_index = 0;
          this.next_out = new Uint8Array(OUTPUT_BUFSIZE);
          this.avail_out = this.next_out.byteLength;
          this.next_out_index = 0;
          this.total_in = this.total_out = 0;
          this.msg = "";
        }
        append(data) {
          this.next_in = data;
          this.avail_in = data.length;
          this.next_in_index = 0;
        }
        read_buf(start, size) {
          return this.next_in.subarray(start, start + size);
        }
        read_into_buf(buf, start, size) {
          let len = this.avail_in;
          if (len > size)
            len = size;
          if (len === 0)
            return 0;
          buf.set(this.next_in.subarray(this.next_in_index, this.next_in_index + len), start);
          this.avail_in -= len;
          this.next_in_index += len;
          this.total_in += len;
          return len;
        }
        flush_pending(dstate) {
          var len = dstate.pending;
          if (len > this.avail_out)
            len = this.avail_out;
          if (len === 0)
            return;
          this.next_out.set(dstate.pending_buf.subarray(dstate.pending_out, dstate.pending_out + len), this.next_out_index);
          this.next_out_index += len;
          dstate.pending_out += len;
          this.total_out += len;
          this.avail_out -= len;
          dstate.pending -= len;
          if (dstate.pending === 0) {
            dstate.pending_out = 0;
          }
        }
      };
      fixed_bl = 9;
      fixed_bd = 5;
      fixed_tl = [
        96,
        7,
        256,
        0,
        8,
        80,
        0,
        8,
        16,
        84,
        8,
        115,
        82,
        7,
        31,
        0,
        8,
        112,
        0,
        8,
        48,
        0,
        9,
        192,
        80,
        7,
        10,
        0,
        8,
        96,
        0,
        8,
        32,
        0,
        9,
        160,
        0,
        8,
        0,
        0,
        8,
        128,
        0,
        8,
        64,
        0,
        9,
        224,
        80,
        7,
        6,
        0,
        8,
        88,
        0,
        8,
        24,
        0,
        9,
        144,
        83,
        7,
        59,
        0,
        8,
        120,
        0,
        8,
        56,
        0,
        9,
        208,
        81,
        7,
        17,
        0,
        8,
        104,
        0,
        8,
        40,
        0,
        9,
        176,
        0,
        8,
        8,
        0,
        8,
        136,
        0,
        8,
        72,
        0,
        9,
        240,
        80,
        7,
        4,
        0,
        8,
        84,
        0,
        8,
        20,
        85,
        8,
        227,
        83,
        7,
        43,
        0,
        8,
        116,
        0,
        8,
        52,
        0,
        9,
        200,
        81,
        7,
        13,
        0,
        8,
        100,
        0,
        8,
        36,
        0,
        9,
        168,
        0,
        8,
        4,
        0,
        8,
        132,
        0,
        8,
        68,
        0,
        9,
        232,
        80,
        7,
        8,
        0,
        8,
        92,
        0,
        8,
        28,
        0,
        9,
        152,
        84,
        7,
        83,
        0,
        8,
        124,
        0,
        8,
        60,
        0,
        9,
        216,
        82,
        7,
        23,
        0,
        8,
        108,
        0,
        8,
        44,
        0,
        9,
        184,
        0,
        8,
        12,
        0,
        8,
        140,
        0,
        8,
        76,
        0,
        9,
        248,
        80,
        7,
        3,
        0,
        8,
        82,
        0,
        8,
        18,
        85,
        8,
        163,
        83,
        7,
        35,
        0,
        8,
        114,
        0,
        8,
        50,
        0,
        9,
        196,
        81,
        7,
        11,
        0,
        8,
        98,
        0,
        8,
        34,
        0,
        9,
        164,
        0,
        8,
        2,
        0,
        8,
        130,
        0,
        8,
        66,
        0,
        9,
        228,
        80,
        7,
        7,
        0,
        8,
        90,
        0,
        8,
        26,
        0,
        9,
        148,
        84,
        7,
        67,
        0,
        8,
        122,
        0,
        8,
        58,
        0,
        9,
        212,
        82,
        7,
        19,
        0,
        8,
        106,
        0,
        8,
        42,
        0,
        9,
        180,
        0,
        8,
        10,
        0,
        8,
        138,
        0,
        8,
        74,
        0,
        9,
        244,
        80,
        7,
        5,
        0,
        8,
        86,
        0,
        8,
        22,
        192,
        8,
        0,
        83,
        7,
        51,
        0,
        8,
        118,
        0,
        8,
        54,
        0,
        9,
        204,
        81,
        7,
        15,
        0,
        8,
        102,
        0,
        8,
        38,
        0,
        9,
        172,
        0,
        8,
        6,
        0,
        8,
        134,
        0,
        8,
        70,
        0,
        9,
        236,
        80,
        7,
        9,
        0,
        8,
        94,
        0,
        8,
        30,
        0,
        9,
        156,
        84,
        7,
        99,
        0,
        8,
        126,
        0,
        8,
        62,
        0,
        9,
        220,
        82,
        7,
        27,
        0,
        8,
        110,
        0,
        8,
        46,
        0,
        9,
        188,
        0,
        8,
        14,
        0,
        8,
        142,
        0,
        8,
        78,
        0,
        9,
        252,
        96,
        7,
        256,
        0,
        8,
        81,
        0,
        8,
        17,
        85,
        8,
        131,
        82,
        7,
        31,
        0,
        8,
        113,
        0,
        8,
        49,
        0,
        9,
        194,
        80,
        7,
        10,
        0,
        8,
        97,
        0,
        8,
        33,
        0,
        9,
        162,
        0,
        8,
        1,
        0,
        8,
        129,
        0,
        8,
        65,
        0,
        9,
        226,
        80,
        7,
        6,
        0,
        8,
        89,
        0,
        8,
        25,
        0,
        9,
        146,
        83,
        7,
        59,
        0,
        8,
        121,
        0,
        8,
        57,
        0,
        9,
        210,
        81,
        7,
        17,
        0,
        8,
        105,
        0,
        8,
        41,
        0,
        9,
        178,
        0,
        8,
        9,
        0,
        8,
        137,
        0,
        8,
        73,
        0,
        9,
        242,
        80,
        7,
        4,
        0,
        8,
        85,
        0,
        8,
        21,
        80,
        8,
        258,
        83,
        7,
        43,
        0,
        8,
        117,
        0,
        8,
        53,
        0,
        9,
        202,
        81,
        7,
        13,
        0,
        8,
        101,
        0,
        8,
        37,
        0,
        9,
        170,
        0,
        8,
        5,
        0,
        8,
        133,
        0,
        8,
        69,
        0,
        9,
        234,
        80,
        7,
        8,
        0,
        8,
        93,
        0,
        8,
        29,
        0,
        9,
        154,
        84,
        7,
        83,
        0,
        8,
        125,
        0,
        8,
        61,
        0,
        9,
        218,
        82,
        7,
        23,
        0,
        8,
        109,
        0,
        8,
        45,
        0,
        9,
        186,
        0,
        8,
        13,
        0,
        8,
        141,
        0,
        8,
        77,
        0,
        9,
        250,
        80,
        7,
        3,
        0,
        8,
        83,
        0,
        8,
        19,
        85,
        8,
        195,
        83,
        7,
        35,
        0,
        8,
        115,
        0,
        8,
        51,
        0,
        9,
        198,
        81,
        7,
        11,
        0,
        8,
        99,
        0,
        8,
        35,
        0,
        9,
        166,
        0,
        8,
        3,
        0,
        8,
        131,
        0,
        8,
        67,
        0,
        9,
        230,
        80,
        7,
        7,
        0,
        8,
        91,
        0,
        8,
        27,
        0,
        9,
        150,
        84,
        7,
        67,
        0,
        8,
        123,
        0,
        8,
        59,
        0,
        9,
        214,
        82,
        7,
        19,
        0,
        8,
        107,
        0,
        8,
        43,
        0,
        9,
        182,
        0,
        8,
        11,
        0,
        8,
        139,
        0,
        8,
        75,
        0,
        9,
        246,
        80,
        7,
        5,
        0,
        8,
        87,
        0,
        8,
        23,
        192,
        8,
        0,
        83,
        7,
        51,
        0,
        8,
        119,
        0,
        8,
        55,
        0,
        9,
        206,
        81,
        7,
        15,
        0,
        8,
        103,
        0,
        8,
        39,
        0,
        9,
        174,
        0,
        8,
        7,
        0,
        8,
        135,
        0,
        8,
        71,
        0,
        9,
        238,
        80,
        7,
        9,
        0,
        8,
        95,
        0,
        8,
        31,
        0,
        9,
        158,
        84,
        7,
        99,
        0,
        8,
        127,
        0,
        8,
        63,
        0,
        9,
        222,
        82,
        7,
        27,
        0,
        8,
        111,
        0,
        8,
        47,
        0,
        9,
        190,
        0,
        8,
        15,
        0,
        8,
        143,
        0,
        8,
        79,
        0,
        9,
        254,
        96,
        7,
        256,
        0,
        8,
        80,
        0,
        8,
        16,
        84,
        8,
        115,
        82,
        7,
        31,
        0,
        8,
        112,
        0,
        8,
        48,
        0,
        9,
        193,
        80,
        7,
        10,
        0,
        8,
        96,
        0,
        8,
        32,
        0,
        9,
        161,
        0,
        8,
        0,
        0,
        8,
        128,
        0,
        8,
        64,
        0,
        9,
        225,
        80,
        7,
        6,
        0,
        8,
        88,
        0,
        8,
        24,
        0,
        9,
        145,
        83,
        7,
        59,
        0,
        8,
        120,
        0,
        8,
        56,
        0,
        9,
        209,
        81,
        7,
        17,
        0,
        8,
        104,
        0,
        8,
        40,
        0,
        9,
        177,
        0,
        8,
        8,
        0,
        8,
        136,
        0,
        8,
        72,
        0,
        9,
        241,
        80,
        7,
        4,
        0,
        8,
        84,
        0,
        8,
        20,
        85,
        8,
        227,
        83,
        7,
        43,
        0,
        8,
        116,
        0,
        8,
        52,
        0,
        9,
        201,
        81,
        7,
        13,
        0,
        8,
        100,
        0,
        8,
        36,
        0,
        9,
        169,
        0,
        8,
        4,
        0,
        8,
        132,
        0,
        8,
        68,
        0,
        9,
        233,
        80,
        7,
        8,
        0,
        8,
        92,
        0,
        8,
        28,
        0,
        9,
        153,
        84,
        7,
        83,
        0,
        8,
        124,
        0,
        8,
        60,
        0,
        9,
        217,
        82,
        7,
        23,
        0,
        8,
        108,
        0,
        8,
        44,
        0,
        9,
        185,
        0,
        8,
        12,
        0,
        8,
        140,
        0,
        8,
        76,
        0,
        9,
        249,
        80,
        7,
        3,
        0,
        8,
        82,
        0,
        8,
        18,
        85,
        8,
        163,
        83,
        7,
        35,
        0,
        8,
        114,
        0,
        8,
        50,
        0,
        9,
        197,
        81,
        7,
        11,
        0,
        8,
        98,
        0,
        8,
        34,
        0,
        9,
        165,
        0,
        8,
        2,
        0,
        8,
        130,
        0,
        8,
        66,
        0,
        9,
        229,
        80,
        7,
        7,
        0,
        8,
        90,
        0,
        8,
        26,
        0,
        9,
        149,
        84,
        7,
        67,
        0,
        8,
        122,
        0,
        8,
        58,
        0,
        9,
        213,
        82,
        7,
        19,
        0,
        8,
        106,
        0,
        8,
        42,
        0,
        9,
        181,
        0,
        8,
        10,
        0,
        8,
        138,
        0,
        8,
        74,
        0,
        9,
        245,
        80,
        7,
        5,
        0,
        8,
        86,
        0,
        8,
        22,
        192,
        8,
        0,
        83,
        7,
        51,
        0,
        8,
        118,
        0,
        8,
        54,
        0,
        9,
        205,
        81,
        7,
        15,
        0,
        8,
        102,
        0,
        8,
        38,
        0,
        9,
        173,
        0,
        8,
        6,
        0,
        8,
        134,
        0,
        8,
        70,
        0,
        9,
        237,
        80,
        7,
        9,
        0,
        8,
        94,
        0,
        8,
        30,
        0,
        9,
        157,
        84,
        7,
        99,
        0,
        8,
        126,
        0,
        8,
        62,
        0,
        9,
        221,
        82,
        7,
        27,
        0,
        8,
        110,
        0,
        8,
        46,
        0,
        9,
        189,
        0,
        8,
        14,
        0,
        8,
        142,
        0,
        8,
        78,
        0,
        9,
        253,
        96,
        7,
        256,
        0,
        8,
        81,
        0,
        8,
        17,
        85,
        8,
        131,
        82,
        7,
        31,
        0,
        8,
        113,
        0,
        8,
        49,
        0,
        9,
        195,
        80,
        7,
        10,
        0,
        8,
        97,
        0,
        8,
        33,
        0,
        9,
        163,
        0,
        8,
        1,
        0,
        8,
        129,
        0,
        8,
        65,
        0,
        9,
        227,
        80,
        7,
        6,
        0,
        8,
        89,
        0,
        8,
        25,
        0,
        9,
        147,
        83,
        7,
        59,
        0,
        8,
        121,
        0,
        8,
        57,
        0,
        9,
        211,
        81,
        7,
        17,
        0,
        8,
        105,
        0,
        8,
        41,
        0,
        9,
        179,
        0,
        8,
        9,
        0,
        8,
        137,
        0,
        8,
        73,
        0,
        9,
        243,
        80,
        7,
        4,
        0,
        8,
        85,
        0,
        8,
        21,
        80,
        8,
        258,
        83,
        7,
        43,
        0,
        8,
        117,
        0,
        8,
        53,
        0,
        9,
        203,
        81,
        7,
        13,
        0,
        8,
        101,
        0,
        8,
        37,
        0,
        9,
        171,
        0,
        8,
        5,
        0,
        8,
        133,
        0,
        8,
        69,
        0,
        9,
        235,
        80,
        7,
        8,
        0,
        8,
        93,
        0,
        8,
        29,
        0,
        9,
        155,
        84,
        7,
        83,
        0,
        8,
        125,
        0,
        8,
        61,
        0,
        9,
        219,
        82,
        7,
        23,
        0,
        8,
        109,
        0,
        8,
        45,
        0,
        9,
        187,
        0,
        8,
        13,
        0,
        8,
        141,
        0,
        8,
        77,
        0,
        9,
        251,
        80,
        7,
        3,
        0,
        8,
        83,
        0,
        8,
        19,
        85,
        8,
        195,
        83,
        7,
        35,
        0,
        8,
        115,
        0,
        8,
        51,
        0,
        9,
        199,
        81,
        7,
        11,
        0,
        8,
        99,
        0,
        8,
        35,
        0,
        9,
        167,
        0,
        8,
        3,
        0,
        8,
        131,
        0,
        8,
        67,
        0,
        9,
        231,
        80,
        7,
        7,
        0,
        8,
        91,
        0,
        8,
        27,
        0,
        9,
        151,
        84,
        7,
        67,
        0,
        8,
        123,
        0,
        8,
        59,
        0,
        9,
        215,
        82,
        7,
        19,
        0,
        8,
        107,
        0,
        8,
        43,
        0,
        9,
        183,
        0,
        8,
        11,
        0,
        8,
        139,
        0,
        8,
        75,
        0,
        9,
        247,
        80,
        7,
        5,
        0,
        8,
        87,
        0,
        8,
        23,
        192,
        8,
        0,
        83,
        7,
        51,
        0,
        8,
        119,
        0,
        8,
        55,
        0,
        9,
        207,
        81,
        7,
        15,
        0,
        8,
        103,
        0,
        8,
        39,
        0,
        9,
        175,
        0,
        8,
        7,
        0,
        8,
        135,
        0,
        8,
        71,
        0,
        9,
        239,
        80,
        7,
        9,
        0,
        8,
        95,
        0,
        8,
        31,
        0,
        9,
        159,
        84,
        7,
        99,
        0,
        8,
        127,
        0,
        8,
        63,
        0,
        9,
        223,
        82,
        7,
        27,
        0,
        8,
        111,
        0,
        8,
        47,
        0,
        9,
        191,
        0,
        8,
        15,
        0,
        8,
        143,
        0,
        8,
        79,
        0,
        9,
        255
      ];
      fixed_td = [
        80,
        5,
        1,
        87,
        5,
        257,
        83,
        5,
        17,
        91,
        5,
        4097,
        81,
        5,
        5,
        89,
        5,
        1025,
        85,
        5,
        65,
        93,
        5,
        16385,
        80,
        5,
        3,
        88,
        5,
        513,
        84,
        5,
        33,
        92,
        5,
        8193,
        82,
        5,
        9,
        90,
        5,
        2049,
        86,
        5,
        129,
        192,
        5,
        24577,
        80,
        5,
        2,
        87,
        5,
        385,
        83,
        5,
        25,
        91,
        5,
        6145,
        81,
        5,
        7,
        89,
        5,
        1537,
        85,
        5,
        97,
        93,
        5,
        24577,
        80,
        5,
        4,
        88,
        5,
        769,
        84,
        5,
        49,
        92,
        5,
        12289,
        82,
        5,
        13,
        90,
        5,
        3073,
        86,
        5,
        193,
        192,
        5,
        24577
      ];
      cplens = [
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        13,
        15,
        17,
        19,
        23,
        27,
        31,
        35,
        43,
        51,
        59,
        67,
        83,
        99,
        115,
        131,
        163,
        195,
        227,
        258,
        0,
        0
      ];
      cplext = [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        1,
        1,
        1,
        2,
        2,
        2,
        2,
        3,
        3,
        3,
        3,
        4,
        4,
        4,
        4,
        5,
        5,
        5,
        5,
        0,
        112,
        112
      ];
      cpdist = [
        1,
        2,
        3,
        4,
        5,
        7,
        9,
        13,
        17,
        25,
        33,
        49,
        65,
        97,
        129,
        193,
        257,
        385,
        513,
        769,
        1025,
        1537,
        2049,
        3073,
        4097,
        6145,
        8193,
        12289,
        16385,
        24577
      ];
      cpdext = [
        0,
        0,
        0,
        0,
        1,
        1,
        2,
        2,
        3,
        3,
        4,
        4,
        5,
        5,
        6,
        6,
        7,
        7,
        8,
        8,
        9,
        9,
        10,
        10,
        11,
        11,
        12,
        12,
        13,
        13
      ];
      BMAX = 15;
      hn = [0];
      c = new Int32Array(BMAX + 1);
      r = new Int32Array(3);
      u = new Int32Array(BMAX);
      x = new Int32Array(BMAX + 1);
      border = [
        16,
        17,
        18,
        0,
        8,
        7,
        9,
        6,
        10,
        5,
        11,
        4,
        12,
        3,
        13,
        2,
        14,
        1,
        15
      ];
      InfBlocks = class {
        constructor(windowSize) {
          this.codes = InfCodes();
          this.hufts = new Int32Array(1400 * 3);
          this.mode = 0;
          this.bitk = 0;
          this.bitb = 0;
          this.read = 0;
          this.write = 0;
          this.last = 0;
          this.end = windowSize;
          this.window = new Uint8Array(windowSize);
        }
        reset() {
          this.bitk = 0;
          this.bitb = 0;
          this.read = 0;
          this.write = 0;
          this.last = 0;
        }
        inflate_flush(z, r2) {
          let n;
          let p;
          let q;
          p = z.next_out_index;
          q = this.read;
          n = (q <= this.write ? this.write : this.end) - q;
          if (n > z.avail_out) {
            n = z.avail_out;
          }
          if (n !== 0 && r2 === -5) {
            r2 = 0;
          }
          z.avail_out -= n;
          z.total_out += n;
          z.next_out.set(this.window.subarray(q, q + n), p);
          p += n;
          q += n;
          if (q === this.end) {
            q = 0;
            if (this.write === this.end) {
              this.write = 0;
            }
            n = this.write - q;
            if (n > z.avail_out) {
              n = z.avail_out;
            }
            if (n !== 0 && r2 === -5) {
              r2 = 0;
            }
            z.avail_out -= n;
            z.total_out += n;
            z.next_out.set(this.window.subarray(q, q + n), p);
            p += n;
            q += n;
          }
          z.next_out_index = p;
          this.read = q;
          return r2;
        }
        proc(z, r2) {
          let t;
          let b;
          let k;
          let p;
          let n;
          let q;
          let m;
          let i;
          let left = 0;
          let table = 0;
          let index = 0;
          const blens = new Uint8Array(320);
          const bb = [0];
          const tb = [0];
          const codes = this.codes;
          const hufts = this.hufts;
          p = z.next_in_index;
          n = z.avail_in;
          b = this.bitb;
          k = this.bitk;
          q = this.write;
          m = q < this.read ? this.read - q - 1 : this.end - q;
          while (true) {
            switch (this.mode) {
              case 0:
                if (this.last) {
                  return 1;
                }
                while (k < 3) {
                  if (n !== 0) {
                    r2 = 0;
                  } else {
                    this.bitb = b;
                    this.bitk = k;
                    z.avail_in = n;
                    z.total_in += p - z.next_in_index;
                    z.next_in_index = p;
                    this.write = q;
                    return this.inflate_flush(z, r2);
                  }
                  n--;
                  b |= (z.next_in[p++] & 255) << k;
                  k += 8;
                }
                t = b & 7;
                this.last = t & 1;
                switch (t >>> 1) {
                  case 0:
                    b >>>= 3;
                    k -= 3;
                    t = k & 7;
                    b >>>= t;
                    k -= t;
                    this.mode = 1;
                    break;
                  case 1:
                    const bl = [0];
                    const bd = [0];
                    const tl = [[]];
                    const td = [[]];
                    inflate_trees_fixed(bl, bd, tl, td);
                    codes.init(bl[0], bd[0], tl[0], 0, td[0], 0);
                    b >>>= 3;
                    k -= 3;
                    this.mode = 6;
                    break;
                  case 2:
                    b >>>= 3;
                    k -= 3;
                    this.mode = 3;
                    break;
                  case 3:
                    b >>>= 3;
                    k -= 3;
                    this.mode = 9;
                    z.msg = "invalid block type";
                    r2 = -3;
                    this.bitb = b;
                    this.bitk = k;
                    z.avail_in = n;
                    z.total_in += p - z.next_in_index;
                    z.next_in_index = p;
                    this.write = q;
                    return this.inflate_flush(z, r2);
                }
                break;
              case 1:
                while (k < 32) {
                  if (n !== 0) {
                    r2 = 0;
                  } else {
                    this.bitb = b;
                    this.bitk = k;
                    z.avail_in = n;
                    z.total_in += p - z.next_in_index;
                    z.next_in_index = p;
                    this.write = q;
                    return this.inflate_flush(z, r2);
                  }
                  n--;
                  b |= (z.next_in[p++] & 255) << k;
                  k += 8;
                }
                if ((~b >>> 16 & 65535) !== (b & 65535)) {
                  this.mode = 9;
                  z.msg = "invalid stored block lengths";
                  r2 = -3;
                  this.bitb = b;
                  this.bitk = k;
                  z.avail_in = n;
                  z.total_in += p - z.next_in_index;
                  z.next_in_index = p;
                  this.write = q;
                  return this.inflate_flush(z, r2);
                }
                left = b & 65535;
                b = k = 0;
                this.mode = left !== 0 ? 2 : this.last !== 0 ? 7 : 0;
                break;
              case 2:
                if (n === 0) {
                  this.bitb = b;
                  this.bitk = k;
                  z.avail_in = n;
                  z.total_in += p - z.next_in_index;
                  z.next_in_index = p;
                  this.write = q;
                  return this.inflate_flush(z, r2);
                }
                if (m === 0) {
                  if (q === this.end && this.read !== 0) {
                    q = 0;
                    m = q < this.read ? this.read - q - 1 : this.end - q;
                  }
                  if (m === 0) {
                    this.write = q;
                    r2 = this.inflate_flush(z, r2);
                    q = this.write;
                    m = q < this.read ? this.read - q - 1 : this.end - q;
                    if (q === this.end && this.read !== 0) {
                      q = 0;
                      m = q < this.read ? this.read - q - 1 : this.end - q;
                    }
                    if (m === 0) {
                      this.bitb = b;
                      this.bitk = k;
                      z.avail_in = n;
                      z.total_in += p - z.next_in_index;
                      z.next_in_index = p;
                      this.write = q;
                      return this.inflate_flush(z, r2);
                    }
                  }
                }
                r2 = 0;
                t = left;
                if (t > n) {
                  t = n;
                }
                if (t > m) {
                  t = m;
                }
                this.window.set(z.read_buf(p, t), q);
                p += t;
                n -= t;
                q += t;
                m -= t;
                left -= t;
                if (left !== 0) {
                  break;
                }
                this.mode = this.last !== 0 ? 7 : 0;
                break;
              case 3:
                while (k < 14) {
                  if (n !== 0) {
                    r2 = 0;
                  } else {
                    this.bitb = b;
                    this.bitk = k;
                    z.avail_in = n;
                    z.total_in += p - z.next_in_index;
                    z.next_in_index = p;
                    this.write = q;
                    return this.inflate_flush(z, r2);
                  }
                  n--;
                  b |= (z.next_in[p++] & 255) << k;
                  k += 8;
                }
                table = t = b & 16383;
                if ((t & 31) > 29 || (t >> 5 & 31) > 29) {
                  this.mode = 9;
                  z.msg = "too many length or distance symbols";
                  r2 = -3;
                  this.bitb = b;
                  this.bitk = k;
                  z.avail_in = n;
                  z.total_in += p - z.next_in_index;
                  z.next_in_index = p;
                  this.write = q;
                  return this.inflate_flush(z, r2);
                }
                t = 258 + (t & 31) + (t >> 5 & 31);
                for (i = 0; i < t; i++) {
                  blens[i] = 0;
                }
                b >>>= 14;
                k -= 14;
                index = 0;
                this.mode = 4;
                while (index < 4 + (table >>> 10)) {
                  while (k < 3) {
                    if (n !== 0) {
                      r2 = 0;
                    } else {
                      this.bitb = b;
                      this.bitk = k;
                      z.avail_in = n;
                      z.total_in += p - z.next_in_index;
                      z.next_in_index = p;
                      this.write = q;
                      return this.inflate_flush(z, r2);
                    }
                    n--;
                    b |= (z.next_in[p++] & 255) << k;
                    k += 8;
                  }
                  blens[border[index++]] = b & 7;
                  b >>>= 3;
                  k -= 3;
                }
                while (index < 19) {
                  blens[border[index++]] = 0;
                }
                bb[0] = 7;
                t = inflate_trees_bits(blens, bb, tb, hufts, z);
                if (t !== 0) {
                  r2 = t;
                  if (r2 === -3) {
                    this.mode = 9;
                  }
                  this.bitb = b;
                  this.bitk = k;
                  z.avail_in = n;
                  z.total_in += p - z.next_in_index;
                  z.next_in_index = p;
                  this.write = q;
                  return this.inflate_flush(z, r2);
                }
                index = 0;
                this.mode = 5;
                while (true) {
                  t = table;
                  if (index >= 258 + (t & 31) + (t >> 5 & 31)) {
                    break;
                  }
                  let j, c2;
                  t = bb[0];
                  while (k < t) {
                    if (n !== 0) {
                      r2 = 0;
                    } else {
                      this.bitb = b;
                      this.bitk = k;
                      z.avail_in = n;
                      z.total_in += p - z.next_in_index;
                      z.next_in_index = p;
                      this.write = q;
                      return this.inflate_flush(z, r2);
                    }
                    n--;
                    b |= (z.next_in[p++] & 255) << k;
                    k += 8;
                  }
                  t = hufts[(tb[0] + (b & inflate_mask[t])) * 3 + 1];
                  c2 = hufts[(tb[0] + (b & inflate_mask[t])) * 3 + 2];
                  if (c2 < 16) {
                    b >>>= t;
                    k -= t;
                    blens[index++] = c2;
                  } else {
                    i = c2 === 18 ? 7 : c2 - 14;
                    j = c2 === 18 ? 11 : 3;
                    while (k < t + i) {
                      if (n !== 0) {
                        r2 = 0;
                      } else {
                        this.bitb = b;
                        this.bitk = k;
                        z.avail_in = n;
                        z.total_in += p - z.next_in_index;
                        z.next_in_index = p;
                        this.write = q;
                        return this.inflate_flush(z, r2);
                      }
                      n--;
                      b |= (z.next_in[p++] & 255) << k;
                      k += 8;
                    }
                    b >>>= t;
                    k -= t;
                    j += b & inflate_mask[i];
                    b >>>= i;
                    k -= i;
                    i = index;
                    t = table;
                    if (i + j > 258 + (t & 31) + (t >> 5 & 31) || c2 === 16 && i < 1) {
                      this.mode = 9;
                      z.msg = "invalid bit length repeat";
                      r2 = -3;
                      this.bitb = b;
                      this.bitk = k;
                      z.avail_in = n;
                      z.total_in += p - z.next_in_index;
                      z.next_in_index = p;
                      this.write = q;
                      return this.inflate_flush(z, r2);
                    }
                    c2 = c2 === 16 ? blens[i - 1] : 0;
                    do {
                      blens[i++] = c2;
                    } while (--j !== 0);
                    index = i;
                  }
                }
                tb[0] = -1;
                const bl_ = [9];
                const bd_ = [6];
                const tl_ = [0];
                const td_ = [0];
                t = inflate_trees_dynamic(257 + (t & 31), 1 + (t >> 5 & 31), blens, bl_, bd_, tl_, td_, hufts, z);
                if (t !== 0) {
                  if (t === -3) {
                    this.mode = 9;
                  }
                  r2 = t;
                  this.bitb = b;
                  this.bitk = k;
                  z.avail_in = n;
                  z.total_in += p - z.next_in_index;
                  z.next_in_index = p;
                  this.write = q;
                  return this.inflate_flush(z, r2);
                }
                codes.init(bl_[0], bd_[0], hufts, tl_[0], hufts, td_[0]);
                this.mode = 6;
              case 6:
                this.bitb = b;
                this.bitk = k;
                z.avail_in = n;
                z.total_in += p - z.next_in_index;
                z.next_in_index = p;
                this.write = q;
                r2 = codes.proc(this, z, r2);
                if (r2 !== 1) {
                  return this.inflate_flush(z, r2);
                }
                r2 = 0;
                p = z.next_in_index;
                n = z.avail_in;
                b = this.bitb;
                k = this.bitk;
                q = this.write;
                m = q < this.read ? this.read - q - 1 : this.end - q;
                if (this.last === 0) {
                  this.mode = 0;
                  break;
                }
                this.mode = 7;
              case 7:
                this.write = q;
                r2 = this.inflate_flush(z, r2);
                q = this.write;
                m = q < this.read ? this.read - q - 1 : this.end - q;
                if (this.read !== this.write) {
                  this.bitb = b;
                  this.bitk = k;
                  z.avail_in = n;
                  z.total_in += p - z.next_in_index;
                  z.next_in_index = p;
                  this.write = q;
                  return this.inflate_flush(z, r2);
                }
                this.mode = 8;
              case 8:
                r2 = 1;
                this.bitb = b;
                this.bitk = k;
                z.avail_in = n;
                z.total_in += p - z.next_in_index;
                z.next_in_index = p;
                this.write = q;
                return this.inflate_flush(z, r2);
              case 9:
                r2 = -3;
                this.bitb = b;
                this.bitk = k;
                z.avail_in = n;
                z.total_in += p - z.next_in_index;
                z.next_in_index = p;
                this.write = q;
                return this.inflate_flush(z, r2);
              default:
                r2 = -2;
                this.bitb = b;
                this.bitk = k;
                z.avail_in = n;
                z.total_in += p - z.next_in_index;
                z.next_in_index = p;
                this.write = q;
                return this.inflate_flush(z, r2);
            }
          }
        }
        set_dictionary(d, start, n) {
          this.window.set(d.subarray(start, start + n), 0);
          this.read = this.write = n;
        }
      };
      Inflate = class {
        constructor(blocksOnly) {
          this.isGZip = false;
          this.method = 0;
          this.gflags = 0;
          this.name = "";
          this.mtime = 0;
          this.xlen = 0;
          this.dictChecksum = 0;
          this.fullChecksum = 0;
          this.inflatedSize = 0;
          this.wbits = 0;
          this.wbits = 15;
          this.blocks = new InfBlocks(1 << this.wbits);
          this.mode = blocksOnly ? 22 : 0;
        }
        get isComplete() {
          const { blocks } = this;
          const blocksComplete = (blocks.mode === 0 || blocks.mode === 8) && blocks.bitb === 0 && blocks.bitk === 0;
          return this.mode === 31 && blocksComplete;
        }
        get fileName() {
          return this.name;
        }
        get modDate() {
          if (this.mtime === 0) {
            return void 0;
          }
          return new Date(this.mtime * 1e3);
        }
        get checksum() {
          return this.fullChecksum;
        }
        get fullSize() {
          return this.inflatedSize;
        }
        get containerFormat() {
          return this.isGZip ? 2 : this.method === 0 ? 0 : 1;
        }
        inflate(z) {
          let b;
          if (!z || !z.next_in) {
            return -2;
          }
          const f = 0;
          let r2 = -5;
          while (true) {
            switch (this.mode) {
              case 0:
                if (z.avail_in === 0) {
                  return r2;
                }
                b = z.next_in[z.next_in_index];
                if (b !== GZIP_ID1) {
                  this.mode = 2;
                  break;
                }
                this.mode = 1;
                r2 = f;
                z.avail_in--;
                z.total_in++;
                z.next_in_index++;
              case 1:
                if (z.avail_in === 0) {
                  return r2;
                }
                r2 = f;
                z.avail_in--;
                z.total_in++;
                b = z.next_in[z.next_in_index++];
                if (b !== GZIP_ID2) {
                  this.mode = 32;
                  z.msg = "invalid gzip id";
                  break;
                }
                this.isGZip = true;
                this.mode = 2;
              case 2:
                if (z.avail_in === 0) {
                  return r2;
                }
                r2 = f;
                z.avail_in--;
                z.total_in++;
                this.method = z.next_in[z.next_in_index++];
                if ((this.method & 15) !== Z_DEFLATED) {
                  this.mode = 32;
                  z.msg = "unknown compression method";
                  break;
                }
                if ((this.method >> 4) + 8 > this.wbits) {
                  this.mode = 32;
                  z.msg = "invalid window size";
                  break;
                }
                this.mode = 3;
              case 3:
                if (z.avail_in === 0) {
                  return r2;
                }
                r2 = f;
                z.avail_in--;
                z.total_in++;
                b = z.next_in[z.next_in_index++] & 255;
                if (this.isGZip) {
                  this.gflags = b;
                  this.mode = 9;
                  break;
                }
                if (((this.method << 8) + b) % 31 !== 0) {
                  this.mode = 32;
                  z.msg = "incorrect header check";
                  break;
                }
                if ((b & PRESET_DICT) === 0) {
                  this.mode = 22;
                  break;
                }
                this.mode = 4;
              case 4:
                if (z.avail_in === 0) {
                  return r2;
                }
                r2 = f;
                z.avail_in--;
                z.total_in++;
                this.dictChecksum = (z.next_in[z.next_in_index++] & 255) << 24 & 4278190080;
                this.mode = 5;
              case 5:
                if (z.avail_in === 0) {
                  return r2;
                }
                r2 = f;
                z.avail_in--;
                z.total_in++;
                this.dictChecksum |= (z.next_in[z.next_in_index++] & 255) << 16 & 16711680;
                this.mode = 6;
              case 6:
                if (z.avail_in === 0) {
                  return r2;
                }
                r2 = f;
                z.avail_in--;
                z.total_in++;
                this.dictChecksum |= (z.next_in[z.next_in_index++] & 255) << 8 & 65280;
                this.mode = 7;
              case 7:
                if (z.avail_in === 0) {
                  return r2;
                }
                r2 = f;
                z.avail_in--;
                z.total_in++;
                this.dictChecksum |= z.next_in[z.next_in_index++] & 255;
                this.mode = 8;
                return 2;
              case 8:
                this.mode = 32;
                z.msg = "need dictionary";
                return -2;
              case 9:
              case 10:
              case 11:
              case 12:
                if (z.avail_in === 0) {
                  return r2;
                }
                r2 = f;
                z.avail_in--;
                z.total_in++;
                b = z.next_in[z.next_in_index++] & 255;
                this.mtime = this.mtime >>> 8 | b << 24;
                if (this.mode !== 12) {
                  this.mode++;
                  break;
                }
                this.mode = 13;
              case 13:
              case 14:
              case 20:
              case 21:
                if (z.avail_in === 0) {
                  return r2;
                }
                r2 = f;
                z.avail_in--;
                z.total_in++;
                z.next_in_index++;
                if (this.mode === 14) {
                  if (this.gflags & 4) {
                    this.mode = 15;
                  } else if (this.gflags & 8) {
                    this.mode = 18;
                  } else if (this.gflags & 16) {
                    this.mode = 19;
                  } else if (this.gflags & 2) {
                    this.mode = 20;
                  } else {
                    this.mode = 22;
                  }
                } else {
                  this.mode++;
                }
                break;
              case 15:
              case 16:
                if (z.avail_in === 0) {
                  return r2;
                }
                r2 = f;
                z.avail_in--;
                z.total_in++;
                b = z.next_in[z.next_in_index++] & 255;
                this.xlen = this.xlen >>> 8 | b << 24;
                if (this.mode === 15) {
                  break;
                }
                this.xlen = this.xlen >>> 16;
              case 17:
                if (z.avail_in === 0) {
                  return r2;
                }
                r2 = f;
                z.avail_in--;
                z.total_in++;
                z.next_in_index++;
                this.xlen--;
                if (this.xlen === 0) {
                  if (this.gflags & 8) {
                    this.mode = 18;
                  } else if (this.gflags & 16) {
                    this.mode = 19;
                  } else if (this.gflags & 2) {
                    this.mode = 20;
                  } else {
                    this.mode = 22;
                  }
                }
                break;
              case 18:
              case 19:
                if (z.avail_in === 0) {
                  return r2;
                }
                r2 = f;
                z.avail_in--;
                z.total_in++;
                b = z.next_in[z.next_in_index++] & 255;
                if (b !== 0) {
                  if (this.mode === 18) {
                    this.name += String.fromCharCode(b);
                  }
                } else {
                  if (this.mode !== 19 && this.gflags & 16) {
                    this.mode = 19;
                  } else if (this.gflags & 2) {
                    this.mode = 20;
                  } else {
                    this.mode = 22;
                  }
                }
                break;
              case 22:
                r2 = this.blocks.proc(z, r2);
                if (r2 === -3) {
                  this.mode = 32;
                  break;
                }
                if (r2 !== 1) {
                  return r2;
                }
                r2 = f;
                this.blocks.reset();
                if (this.method === 0) {
                  this.mode = 31;
                  break;
                }
                this.mode = 23;
              case 23:
              case 24:
              case 25:
              case 26:
                if (z.avail_in === 0) {
                  return r2;
                }
                r2 = f;
                z.avail_in--;
                z.total_in++;
                b = z.next_in[z.next_in_index++] & 255;
                if (this.isGZip) {
                  this.fullChecksum = this.fullChecksum >>> 8 | b << 24;
                } else {
                  this.fullChecksum = this.fullChecksum << 8 | b;
                }
                this.mode++;
                if (this.mode === 27 && !this.isGZip) {
                  this.mode = 31;
                }
                break;
              case 27:
              case 28:
              case 29:
              case 30:
                if (z.avail_in === 0) {
                  return r2;
                }
                r2 = f;
                z.avail_in--;
                z.total_in++;
                b = z.next_in[z.next_in_index++] & 255;
                this.inflatedSize = this.inflatedSize >>> 8 | b << 24;
                this.mode++;
                break;
              case 31:
                return 1;
              case 32:
                return -3;
              default:
                return -2;
            }
          }
        }
        inflateSetDictionary(dictSource) {
          if (this.mode !== 8) {
            return -2;
          }
          const dictionary = u8ArrayFromBufferSource(dictSource);
          if (!dictionary) {
            return -3;
          }
          let index = 0;
          let length = dictionary.byteLength;
          if (length >= 1 << this.wbits) {
            length = (1 << this.wbits) - 1;
            index = dictionary.byteLength - length;
          }
          const checksum = adler32(dictionary);
          if (checksum !== this.dictChecksum) {
            return -3;
          }
          this.blocks.set_dictionary(dictionary, index, length);
          this.mode = 22;
          return 0;
        }
      };
      Inflater = class {
        constructor(options) {
          const raw = options === null || options === void 0 ? void 0 : options.raw;
          if (raw !== void 0 && raw !== true && raw !== false) {
            throw new TypeError("options.raw must be undefined or true or false");
          }
          const blocksOnly = raw === void 0 ? false : raw;
          const dictionary = options === null || options === void 0 ? void 0 : options.dictionary;
          if (dictionary !== void 0) {
            if (blocksOnly) {
              throw new RangeError("options.dictionary cannot be set when options.raw is true");
            }
            if (u8ArrayFromBufferSource(dictionary) === void 0) {
              throw new TypeError("options.dictionary must be undefined or a buffer or a buffer view");
            }
            this.customDict = dictionary;
          }
          this.inflate = new Inflate(blocksOnly);
          this.z = new ZStream();
        }
        append(data) {
          const chunk = u8ArrayFromBufferSource(data);
          if (!(chunk instanceof Uint8Array)) {
            throw new TypeError("data must be an ArrayBuffer or buffer view");
          }
          if (chunk.length === 0) {
            return [];
          }
          const { inflate, z } = this;
          const outBuffers = [];
          let nomoreinput = false;
          z.append(chunk);
          do {
            z.next_out_index = 0;
            z.avail_out = OUTPUT_BUFSIZE;
            if (z.avail_in === 0 && !nomoreinput) {
              z.next_in_index = 0;
              nomoreinput = true;
            }
            const err = inflate.inflate(z);
            if (nomoreinput && err === -5) {
              if (z.avail_in !== 0) {
                throw new Error("inflate error: bad input");
              }
            } else if (err === 2) {
              if (this.customDict) {
                const dictErr = inflate.inflateSetDictionary(this.customDict);
                if (dictErr !== 0) {
                  throw new Error("Custom dictionary is not valid for this data");
                }
              } else {
                throw new Error("Custom dictionary required for this data");
              }
            } else if (err !== 0 && err !== 1) {
              throw new Error("inflate error: " + z.msg);
            }
            if ((nomoreinput || err === 1) && z.avail_in === chunk.length) {
              throw new Error("inflate error: bad input data");
            }
            if (z.next_out_index) {
              const nextBuffer = new Uint8Array(z.next_out.subarray(0, z.next_out_index));
              const useCRC = inflate.containerFormat === 2;
              if (this.checksum === void 0) {
                this.checksum = useCRC ? 0 : 1;
              }
              if (useCRC) {
                this.checksum = crc32(nextBuffer, this.checksum);
              } else {
                this.checksum = adler32(nextBuffer, this.checksum);
              }
              outBuffers.push(nextBuffer);
            }
          } while (z.avail_in > 0 || z.avail_out === 0);
          return outBuffers;
        }
        finish() {
          const storedChecksum = this.inflate.checksum;
          const storedSize = this.inflate.fullSize;
          const complete = this.inflate.isComplete;
          const checksum = storedChecksum === 0 ? "unchecked" : storedChecksum === this.checksum ? "match" : "mismatch";
          const fileSize = storedSize === 0 ? "unchecked" : storedSize === this.z.total_out ? "match" : "mismatch";
          const success = complete && checksum !== "mismatch" && fileSize !== "mismatch";
          const fileName = this.inflate.fileName;
          const modDate = this.inflate.modDate;
          return {
            success,
            complete,
            checksum,
            fileSize,
            fileName,
            modDate
          };
        }
      };
      D_CODES = 30;
      BL_CODES = 19;
      LENGTH_CODES = 29;
      LITERALS = 256;
      L_CODES = LITERALS + 1 + LENGTH_CODES;
      HEAP_SIZE = 2 * L_CODES + 1;
      MAX_BL_BITS = 7;
      _dist_code = [
        0,
        1,
        2,
        3,
        4,
        4,
        5,
        5,
        6,
        6,
        6,
        6,
        7,
        7,
        7,
        7,
        8,
        8,
        8,
        8,
        8,
        8,
        8,
        8,
        9,
        9,
        9,
        9,
        9,
        9,
        9,
        9,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        11,
        11,
        11,
        11,
        11,
        11,
        11,
        11,
        11,
        11,
        11,
        11,
        11,
        11,
        11,
        11,
        12,
        12,
        12,
        12,
        12,
        12,
        12,
        12,
        12,
        12,
        12,
        12,
        12,
        12,
        12,
        12,
        12,
        12,
        12,
        12,
        12,
        12,
        12,
        12,
        12,
        12,
        12,
        12,
        12,
        12,
        12,
        12,
        13,
        13,
        13,
        13,
        13,
        13,
        13,
        13,
        13,
        13,
        13,
        13,
        13,
        13,
        13,
        13,
        13,
        13,
        13,
        13,
        13,
        13,
        13,
        13,
        13,
        13,
        13,
        13,
        13,
        13,
        13,
        13,
        14,
        14,
        14,
        14,
        14,
        14,
        14,
        14,
        14,
        14,
        14,
        14,
        14,
        14,
        14,
        14,
        14,
        14,
        14,
        14,
        14,
        14,
        14,
        14,
        14,
        14,
        14,
        14,
        14,
        14,
        14,
        14,
        14,
        14,
        14,
        14,
        14,
        14,
        14,
        14,
        14,
        14,
        14,
        14,
        14,
        14,
        14,
        14,
        14,
        14,
        14,
        14,
        14,
        14,
        14,
        14,
        14,
        14,
        14,
        14,
        14,
        14,
        14,
        14,
        15,
        15,
        15,
        15,
        15,
        15,
        15,
        15,
        15,
        15,
        15,
        15,
        15,
        15,
        15,
        15,
        15,
        15,
        15,
        15,
        15,
        15,
        15,
        15,
        15,
        15,
        15,
        15,
        15,
        15,
        15,
        15,
        15,
        15,
        15,
        15,
        15,
        15,
        15,
        15,
        15,
        15,
        15,
        15,
        15,
        15,
        15,
        15,
        15,
        15,
        15,
        15,
        15,
        15,
        15,
        15,
        15,
        15,
        15,
        15,
        15,
        15,
        15,
        15,
        0,
        0,
        16,
        17,
        18,
        18,
        19,
        19,
        20,
        20,
        20,
        20,
        21,
        21,
        21,
        21,
        22,
        22,
        22,
        22,
        22,
        22,
        22,
        22,
        23,
        23,
        23,
        23,
        23,
        23,
        23,
        23,
        24,
        24,
        24,
        24,
        24,
        24,
        24,
        24,
        24,
        24,
        24,
        24,
        24,
        24,
        24,
        24,
        25,
        25,
        25,
        25,
        25,
        25,
        25,
        25,
        25,
        25,
        25,
        25,
        25,
        25,
        25,
        25,
        26,
        26,
        26,
        26,
        26,
        26,
        26,
        26,
        26,
        26,
        26,
        26,
        26,
        26,
        26,
        26,
        26,
        26,
        26,
        26,
        26,
        26,
        26,
        26,
        26,
        26,
        26,
        26,
        26,
        26,
        26,
        26,
        27,
        27,
        27,
        27,
        27,
        27,
        27,
        27,
        27,
        27,
        27,
        27,
        27,
        27,
        27,
        27,
        27,
        27,
        27,
        27,
        27,
        27,
        27,
        27,
        27,
        27,
        27,
        27,
        27,
        27,
        27,
        27,
        28,
        28,
        28,
        28,
        28,
        28,
        28,
        28,
        28,
        28,
        28,
        28,
        28,
        28,
        28,
        28,
        28,
        28,
        28,
        28,
        28,
        28,
        28,
        28,
        28,
        28,
        28,
        28,
        28,
        28,
        28,
        28,
        28,
        28,
        28,
        28,
        28,
        28,
        28,
        28,
        28,
        28,
        28,
        28,
        28,
        28,
        28,
        28,
        28,
        28,
        28,
        28,
        28,
        28,
        28,
        28,
        28,
        28,
        28,
        28,
        28,
        28,
        28,
        28,
        29,
        29,
        29,
        29,
        29,
        29,
        29,
        29,
        29,
        29,
        29,
        29,
        29,
        29,
        29,
        29,
        29,
        29,
        29,
        29,
        29,
        29,
        29,
        29,
        29,
        29,
        29,
        29,
        29,
        29,
        29,
        29,
        29,
        29,
        29,
        29,
        29,
        29,
        29,
        29,
        29,
        29,
        29,
        29,
        29,
        29,
        29,
        29,
        29,
        29,
        29,
        29,
        29,
        29,
        29,
        29,
        29,
        29,
        29,
        29,
        29,
        29,
        29,
        29
      ];
      Tree = class {
        constructor(tree, desc) {
          this.dyn_tree = tree;
          this.stat_desc = desc;
          this.max_code = 0;
        }
        gen_bitlen(s) {
          var tree = this.dyn_tree;
          var stree = this.stat_desc.static_tree;
          var extra = this.stat_desc.extra_bits;
          var base2 = this.stat_desc.extra_base;
          var max_length = this.stat_desc.max_length;
          var h;
          var n, m;
          var bits;
          var xbits;
          var f;
          var overflow = 0;
          for (bits = 0; bits <= 15; bits++)
            s.bl_count[bits] = 0;
          tree[s.heap[s.heap_max] * 2 + 1] = 0;
          for (h = s.heap_max + 1; h < HEAP_SIZE; h++) {
            n = s.heap[h];
            bits = tree[tree[n * 2 + 1] * 2 + 1] + 1;
            if (bits > max_length) {
              bits = max_length;
              overflow++;
            }
            tree[n * 2 + 1] = bits;
            if (n > this.max_code)
              continue;
            s.bl_count[bits]++;
            xbits = 0;
            if (n >= base2)
              xbits = extra[n - base2];
            f = tree[n * 2];
            s.opt_len += f * (bits + xbits);
            if (stree)
              s.static_len += f * (stree[n * 2 + 1] + xbits);
          }
          if (overflow === 0)
            return;
          do {
            bits = max_length - 1;
            while (s.bl_count[bits] === 0)
              bits--;
            s.bl_count[bits]--;
            s.bl_count[bits + 1] += 2;
            s.bl_count[max_length]--;
            overflow -= 2;
          } while (overflow > 0);
          for (bits = max_length; bits !== 0; bits--) {
            n = s.bl_count[bits];
            while (n !== 0) {
              m = s.heap[--h];
              if (m > this.max_code)
                continue;
              if (tree[m * 2 + 1] != bits) {
                s.opt_len += (bits - tree[m * 2 + 1]) * tree[m * 2];
                tree[m * 2 + 1] = bits;
              }
              n--;
            }
          }
        }
        bi_reverse(code2, len) {
          let res = 0;
          do {
            res |= code2 & 1;
            code2 >>>= 1;
            res <<= 1;
          } while (--len > 0);
          return res >>> 1;
        }
        gen_codes(tree, max_code, bl_count) {
          const next_code = new Uint16Array(15 + 1);
          let code2 = 0;
          for (let bits = 1; bits <= 15; bits++) {
            next_code[bits] = code2 = code2 + bl_count[bits - 1] << 1;
          }
          for (let n = 0; n <= max_code; n++) {
            const len = tree[n * 2 + 1];
            if (len === 0)
              continue;
            tree[n * 2] = this.bi_reverse(next_code[len]++, len);
          }
        }
        build_tree(s) {
          var tree = this.dyn_tree;
          var stree = this.stat_desc.static_tree;
          var elems = this.stat_desc.elems;
          var n, m;
          var max_code = -1;
          var node;
          s.heap_len = 0;
          s.heap_max = HEAP_SIZE;
          for (n = 0; n < elems; n++) {
            if (tree[n * 2] !== 0) {
              s.heap[++s.heap_len] = max_code = n;
              s.depth[n] = 0;
            } else {
              tree[n * 2 + 1] = 0;
            }
          }
          while (s.heap_len < 2) {
            node = s.heap[++s.heap_len] = max_code < 2 ? ++max_code : 0;
            tree[node * 2] = 1;
            s.depth[node] = 0;
            s.opt_len--;
            if (stree)
              s.static_len -= stree[node * 2 + 1];
          }
          this.max_code = max_code;
          for (n = Math.floor(s.heap_len / 2); n >= 1; n--)
            s.pqdownheap(tree, n);
          node = elems;
          do {
            n = s.heap[1];
            s.heap[1] = s.heap[s.heap_len--];
            s.pqdownheap(tree, 1);
            m = s.heap[1];
            s.heap[--s.heap_max] = n;
            s.heap[--s.heap_max] = m;
            tree[node * 2] = tree[n * 2] + tree[m * 2];
            s.depth[node] = Math.max(s.depth[n], s.depth[m]) + 1;
            tree[n * 2 + 1] = tree[m * 2 + 1] = node;
            s.heap[1] = node++;
            s.pqdownheap(tree, 1);
          } while (s.heap_len >= 2);
          s.heap[--s.heap_max] = s.heap[1];
          this.gen_bitlen(s);
          this.gen_codes(tree, this.max_code, s.bl_count);
        }
        static d_code(dist) {
          return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)];
        }
      };
      Tree._length_code = [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        8,
        9,
        9,
        10,
        10,
        11,
        11,
        12,
        12,
        12,
        12,
        13,
        13,
        13,
        13,
        14,
        14,
        14,
        14,
        15,
        15,
        15,
        15,
        16,
        16,
        16,
        16,
        16,
        16,
        16,
        16,
        17,
        17,
        17,
        17,
        17,
        17,
        17,
        17,
        18,
        18,
        18,
        18,
        18,
        18,
        18,
        18,
        19,
        19,
        19,
        19,
        19,
        19,
        19,
        19,
        20,
        20,
        20,
        20,
        20,
        20,
        20,
        20,
        20,
        20,
        20,
        20,
        20,
        20,
        20,
        20,
        21,
        21,
        21,
        21,
        21,
        21,
        21,
        21,
        21,
        21,
        21,
        21,
        21,
        21,
        21,
        21,
        22,
        22,
        22,
        22,
        22,
        22,
        22,
        22,
        22,
        22,
        22,
        22,
        22,
        22,
        22,
        22,
        23,
        23,
        23,
        23,
        23,
        23,
        23,
        23,
        23,
        23,
        23,
        23,
        23,
        23,
        23,
        23,
        24,
        24,
        24,
        24,
        24,
        24,
        24,
        24,
        24,
        24,
        24,
        24,
        24,
        24,
        24,
        24,
        24,
        24,
        24,
        24,
        24,
        24,
        24,
        24,
        24,
        24,
        24,
        24,
        24,
        24,
        24,
        24,
        25,
        25,
        25,
        25,
        25,
        25,
        25,
        25,
        25,
        25,
        25,
        25,
        25,
        25,
        25,
        25,
        25,
        25,
        25,
        25,
        25,
        25,
        25,
        25,
        25,
        25,
        25,
        25,
        25,
        25,
        25,
        25,
        26,
        26,
        26,
        26,
        26,
        26,
        26,
        26,
        26,
        26,
        26,
        26,
        26,
        26,
        26,
        26,
        26,
        26,
        26,
        26,
        26,
        26,
        26,
        26,
        26,
        26,
        26,
        26,
        26,
        26,
        26,
        26,
        27,
        27,
        27,
        27,
        27,
        27,
        27,
        27,
        27,
        27,
        27,
        27,
        27,
        27,
        27,
        27,
        27,
        27,
        27,
        27,
        27,
        27,
        27,
        27,
        27,
        27,
        27,
        27,
        27,
        27,
        27,
        28
      ];
      Tree.base_length = [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 12, 14, 16, 20, 24, 28, 32, 40, 48, 56, 64, 80, 96, 112, 128, 160, 192, 224, 0];
      Tree.base_dist = [
        0,
        1,
        2,
        3,
        4,
        6,
        8,
        12,
        16,
        24,
        32,
        48,
        64,
        96,
        128,
        192,
        256,
        384,
        512,
        768,
        1024,
        1536,
        2048,
        3072,
        4096,
        6144,
        8192,
        12288,
        16384,
        24576
      ];
      Tree.extra_lbits = [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0];
      Tree.extra_dbits = [0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13];
      Tree.extra_blbits = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 7];
      Tree.bl_order = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];
      StaticTree = class {
        constructor(static_tree, extra_bits, extra_base, elems, max_length) {
          this.static_tree = static_tree;
          this.extra_bits = extra_bits;
          this.extra_base = extra_base;
          this.elems = elems;
          this.max_length = max_length;
        }
      };
      StaticTree.static_ltree = new Uint16Array([
        12,
        8,
        140,
        8,
        76,
        8,
        204,
        8,
        44,
        8,
        172,
        8,
        108,
        8,
        236,
        8,
        28,
        8,
        156,
        8,
        92,
        8,
        220,
        8,
        60,
        8,
        188,
        8,
        124,
        8,
        252,
        8,
        2,
        8,
        130,
        8,
        66,
        8,
        194,
        8,
        34,
        8,
        162,
        8,
        98,
        8,
        226,
        8,
        18,
        8,
        146,
        8,
        82,
        8,
        210,
        8,
        50,
        8,
        178,
        8,
        114,
        8,
        242,
        8,
        10,
        8,
        138,
        8,
        74,
        8,
        202,
        8,
        42,
        8,
        170,
        8,
        106,
        8,
        234,
        8,
        26,
        8,
        154,
        8,
        90,
        8,
        218,
        8,
        58,
        8,
        186,
        8,
        122,
        8,
        250,
        8,
        6,
        8,
        134,
        8,
        70,
        8,
        198,
        8,
        38,
        8,
        166,
        8,
        102,
        8,
        230,
        8,
        22,
        8,
        150,
        8,
        86,
        8,
        214,
        8,
        54,
        8,
        182,
        8,
        118,
        8,
        246,
        8,
        14,
        8,
        142,
        8,
        78,
        8,
        206,
        8,
        46,
        8,
        174,
        8,
        110,
        8,
        238,
        8,
        30,
        8,
        158,
        8,
        94,
        8,
        222,
        8,
        62,
        8,
        190,
        8,
        126,
        8,
        254,
        8,
        1,
        8,
        129,
        8,
        65,
        8,
        193,
        8,
        33,
        8,
        161,
        8,
        97,
        8,
        225,
        8,
        17,
        8,
        145,
        8,
        81,
        8,
        209,
        8,
        49,
        8,
        177,
        8,
        113,
        8,
        241,
        8,
        9,
        8,
        137,
        8,
        73,
        8,
        201,
        8,
        41,
        8,
        169,
        8,
        105,
        8,
        233,
        8,
        25,
        8,
        153,
        8,
        89,
        8,
        217,
        8,
        57,
        8,
        185,
        8,
        121,
        8,
        249,
        8,
        5,
        8,
        133,
        8,
        69,
        8,
        197,
        8,
        37,
        8,
        165,
        8,
        101,
        8,
        229,
        8,
        21,
        8,
        149,
        8,
        85,
        8,
        213,
        8,
        53,
        8,
        181,
        8,
        117,
        8,
        245,
        8,
        13,
        8,
        141,
        8,
        77,
        8,
        205,
        8,
        45,
        8,
        173,
        8,
        109,
        8,
        237,
        8,
        29,
        8,
        157,
        8,
        93,
        8,
        221,
        8,
        61,
        8,
        189,
        8,
        125,
        8,
        253,
        8,
        19,
        9,
        275,
        9,
        147,
        9,
        403,
        9,
        83,
        9,
        339,
        9,
        211,
        9,
        467,
        9,
        51,
        9,
        307,
        9,
        179,
        9,
        435,
        9,
        115,
        9,
        371,
        9,
        243,
        9,
        499,
        9,
        11,
        9,
        267,
        9,
        139,
        9,
        395,
        9,
        75,
        9,
        331,
        9,
        203,
        9,
        459,
        9,
        43,
        9,
        299,
        9,
        171,
        9,
        427,
        9,
        107,
        9,
        363,
        9,
        235,
        9,
        491,
        9,
        27,
        9,
        283,
        9,
        155,
        9,
        411,
        9,
        91,
        9,
        347,
        9,
        219,
        9,
        475,
        9,
        59,
        9,
        315,
        9,
        187,
        9,
        443,
        9,
        123,
        9,
        379,
        9,
        251,
        9,
        507,
        9,
        7,
        9,
        263,
        9,
        135,
        9,
        391,
        9,
        71,
        9,
        327,
        9,
        199,
        9,
        455,
        9,
        39,
        9,
        295,
        9,
        167,
        9,
        423,
        9,
        103,
        9,
        359,
        9,
        231,
        9,
        487,
        9,
        23,
        9,
        279,
        9,
        151,
        9,
        407,
        9,
        87,
        9,
        343,
        9,
        215,
        9,
        471,
        9,
        55,
        9,
        311,
        9,
        183,
        9,
        439,
        9,
        119,
        9,
        375,
        9,
        247,
        9,
        503,
        9,
        15,
        9,
        271,
        9,
        143,
        9,
        399,
        9,
        79,
        9,
        335,
        9,
        207,
        9,
        463,
        9,
        47,
        9,
        303,
        9,
        175,
        9,
        431,
        9,
        111,
        9,
        367,
        9,
        239,
        9,
        495,
        9,
        31,
        9,
        287,
        9,
        159,
        9,
        415,
        9,
        95,
        9,
        351,
        9,
        223,
        9,
        479,
        9,
        63,
        9,
        319,
        9,
        191,
        9,
        447,
        9,
        127,
        9,
        383,
        9,
        255,
        9,
        511,
        9,
        0,
        7,
        64,
        7,
        32,
        7,
        96,
        7,
        16,
        7,
        80,
        7,
        48,
        7,
        112,
        7,
        8,
        7,
        72,
        7,
        40,
        7,
        104,
        7,
        24,
        7,
        88,
        7,
        56,
        7,
        120,
        7,
        4,
        7,
        68,
        7,
        36,
        7,
        100,
        7,
        20,
        7,
        84,
        7,
        52,
        7,
        116,
        7,
        3,
        8,
        131,
        8,
        67,
        8,
        195,
        8,
        35,
        8,
        163,
        8,
        99,
        8,
        227,
        8
      ]);
      StaticTree.static_dtree = new Uint16Array([
        0,
        5,
        16,
        5,
        8,
        5,
        24,
        5,
        4,
        5,
        20,
        5,
        12,
        5,
        28,
        5,
        2,
        5,
        18,
        5,
        10,
        5,
        26,
        5,
        6,
        5,
        22,
        5,
        14,
        5,
        30,
        5,
        1,
        5,
        17,
        5,
        9,
        5,
        25,
        5,
        5,
        5,
        21,
        5,
        13,
        5,
        29,
        5,
        3,
        5,
        19,
        5,
        11,
        5,
        27,
        5,
        7,
        5,
        23,
        5
      ]);
      StaticTree.static_l_desc = new StaticTree(StaticTree.static_ltree, Tree.extra_lbits, LITERALS + 1, L_CODES, 15);
      StaticTree.static_d_desc = new StaticTree(StaticTree.static_dtree, Tree.extra_dbits, 0, D_CODES, 15);
      StaticTree.static_bl_desc = new StaticTree(null, Tree.extra_blbits, 0, BL_CODES, MAX_BL_BITS);
      makeConfig = (gl, ml, nl, mc, func) => ({
        good_length: gl,
        max_lazy: ml,
        nice_length: nl,
        max_chain: mc,
        func
      });
      config_table = [
        makeConfig(0, 0, 0, 0, 0),
        makeConfig(4, 4, 8, 4, 1),
        makeConfig(4, 5, 16, 8, 1),
        makeConfig(4, 6, 32, 32, 1),
        makeConfig(4, 4, 16, 16, 2),
        makeConfig(8, 16, 32, 32, 2),
        makeConfig(8, 16, 128, 128, 2),
        makeConfig(8, 32, 128, 256, 2),
        makeConfig(32, 128, 258, 1024, 2),
        makeConfig(32, 258, 258, 4096, 2)
      ];
      END_BLOCK = 256;
      REP_3_6 = 16;
      REPZ_3_10 = 17;
      REPZ_11_138 = 18;
      STORED_BLOCK = 0;
      STATIC_TREES = 1;
      DYN_TREES = 2;
      MIN_MATCH = 3;
      MAX_MATCH = 258;
      MIN_LOOKAHEAD = MAX_MATCH + MIN_MATCH + 1;
      hash_bits = 8 + 7;
      hash_size = 1 << hash_bits;
      hash_mask = hash_size - 1;
      hash_shift = Math.floor((hash_bits + MIN_MATCH - 1) / MIN_MATCH);
      lit_bufsize = 1 << 8 + 6;
      pending_buf_size = lit_bufsize * 4;
      d_buf = Math.floor(lit_bufsize / 2);
      l_buf = (1 + 2) * lit_bufsize;
      window_size = 2 * 32768;
      Deflate = class {
        constructor(strm, level = 6, strategy = 0) {
          this.status = 1;
          this.pending_buf = new Uint8Array(pending_buf_size);
          this.pending = 0;
          this.pending_out = 0;
          this.last_flush = 0;
          this.window = new Uint8Array(window_size);
          this.prev = new Uint16Array(32768);
          this.head = new Uint16Array(hash_size);
          this.ins_h = 0;
          this.block_start = 0;
          this.match_length = MIN_MATCH - 1;
          this.match_available = false;
          this.strstart = 0;
          this.match_start = 0;
          this.lookahead = 0;
          this.prev_length = MIN_MATCH - 1;
          this.dyn_ltree = new Uint16Array(HEAP_SIZE * 2);
          this.dyn_dtree = new Uint16Array((2 * D_CODES + 1) * 2);
          this.bl_tree = new Uint16Array((2 * BL_CODES + 1) * 2);
          this.l_desc = new Tree(this.dyn_ltree, StaticTree.static_l_desc);
          this.d_desc = new Tree(this.dyn_dtree, StaticTree.static_d_desc);
          this.bl_desc = new Tree(this.bl_tree, StaticTree.static_bl_desc);
          this.depth = new Uint16Array(2 * L_CODES + 1);
          this.last_lit = 0;
          this.matches = 0;
          this.opt_len = 0;
          this.static_len = 0;
          this.last_eob_len = 8;
          this.bi_buf = 0;
          this.bi_valid = 0;
          this.bl_count = new Uint16Array(15 + 1);
          this.heap = new Uint16Array(2 * L_CODES + 1);
          this.heap_len = 0;
          this.heap_max = HEAP_SIZE;
          if (level < 0 || level > 9 || strategy < 0 || strategy > 2) {
            throw RangeError("level or strategy is out of range");
          }
          this.strm = strm;
          this.level = level;
          this.strategy = strategy;
          strm.msg = "";
          strm.total_in = strm.total_out = 0;
          this.init_block();
          for (let i = 0; i < hash_size; ++i) {
            this.head[i] = 0;
          }
          this.max_lazy_match = config_table[level].max_lazy;
          this.good_match = config_table[level].good_length;
          this.nice_match = config_table[level].nice_length;
          this.max_chain_length = config_table[level].max_chain;
        }
        init_block() {
          for (let i = 0; i < L_CODES; i++)
            this.dyn_ltree[i * 2] = 0;
          for (let i = 0; i < D_CODES; i++)
            this.dyn_dtree[i * 2] = 0;
          for (let i = 0; i < BL_CODES; i++)
            this.bl_tree[i * 2] = 0;
          this.dyn_ltree[END_BLOCK * 2] = 1;
          this.opt_len = this.static_len = 0;
          this.last_lit = this.matches = 0;
        }
        pqdownheap(tree, k) {
          const heap2 = this.heap;
          const v2 = heap2[k];
          let j = k << 1;
          while (j <= this.heap_len) {
            if (j < this.heap_len && smaller(tree, heap2[j + 1], heap2[j], this.depth)) {
              j++;
            }
            if (smaller(tree, v2, heap2[j], this.depth))
              break;
            heap2[k] = heap2[j];
            k = j;
            j <<= 1;
          }
          heap2[k] = v2;
        }
        scan_tree(tree, max_code) {
          var prevlen = -1;
          var curlen;
          var nextlen = tree[0 * 2 + 1];
          var count = 0;
          var max_count = 7;
          var min_count = 4;
          if (nextlen === 0) {
            max_count = 138;
            min_count = 3;
          }
          tree[(max_code + 1) * 2 + 1] = 65535;
          for (let n = 0; n <= max_code; n++) {
            curlen = nextlen;
            nextlen = tree[(n + 1) * 2 + 1];
            if (++count < max_count && curlen == nextlen) {
              continue;
            } else if (count < min_count) {
              this.bl_tree[curlen * 2] += count;
            } else if (curlen !== 0) {
              if (curlen != prevlen)
                this.bl_tree[curlen * 2]++;
              this.bl_tree[REP_3_6 * 2]++;
            } else if (count <= 10) {
              this.bl_tree[REPZ_3_10 * 2]++;
            } else {
              this.bl_tree[REPZ_11_138 * 2]++;
            }
            count = 0;
            prevlen = curlen;
            if (nextlen === 0) {
              max_count = 138;
              min_count = 3;
            } else if (curlen == nextlen) {
              max_count = 6;
              min_count = 3;
            } else {
              max_count = 7;
              min_count = 4;
            }
          }
        }
        build_bl_tree() {
          this.scan_tree(this.dyn_ltree, this.l_desc.max_code);
          this.scan_tree(this.dyn_dtree, this.d_desc.max_code);
          this.bl_desc.build_tree(this);
          let max_blindex;
          for (max_blindex = BL_CODES - 1; max_blindex >= 3; max_blindex--) {
            if (this.bl_tree[Tree.bl_order[max_blindex] * 2 + 1] !== 0)
              break;
          }
          this.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;
          return max_blindex;
        }
        put_short(w) {
          this.pending_buf[this.pending++] = w & 255;
          this.pending_buf[this.pending++] = w >>> 8 & 255;
        }
        send_bits(value, length) {
          if (this.bi_valid > 16 - length) {
            this.bi_buf |= value << this.bi_valid & 65535;
            const pending = this.pending;
            this.pending_buf[pending] = this.bi_buf;
            this.pending_buf[pending + 1] = this.bi_buf >>> 8;
            this.pending = pending + 2;
            this.bi_buf = value >>> 16 - this.bi_valid;
            this.bi_valid += length - 16;
          } else {
            this.bi_buf |= value << this.bi_valid & 65535;
            this.bi_valid += length;
          }
        }
        send_code(c2, tree) {
          const c22 = c2 * 2;
          this.send_bits(tree[c22] & 65535, tree[c22 + 1] & 65535);
        }
        send_tree(tree, max_code) {
          var prevlen = -1;
          var curlen;
          var nextlen = tree[0 * 2 + 1];
          var count = 0;
          var max_count = 7;
          var min_count = 4;
          if (nextlen === 0) {
            max_count = 138;
            min_count = 3;
          }
          for (let n = 0; n <= max_code; n++) {
            curlen = nextlen;
            nextlen = tree[(n + 1) * 2 + 1];
            if (++count < max_count && curlen == nextlen) {
              continue;
            } else if (count < min_count) {
              do {
                this.send_code(curlen, this.bl_tree);
              } while (--count !== 0);
            } else if (curlen !== 0) {
              if (curlen != prevlen) {
                this.send_code(curlen, this.bl_tree);
                count--;
              }
              this.send_code(REP_3_6, this.bl_tree);
              this.send_bits(count - 3, 2);
            } else if (count <= 10) {
              this.send_code(REPZ_3_10, this.bl_tree);
              this.send_bits(count - 3, 3);
            } else {
              this.send_code(REPZ_11_138, this.bl_tree);
              this.send_bits(count - 11, 7);
            }
            count = 0;
            prevlen = curlen;
            if (nextlen === 0) {
              max_count = 138;
              min_count = 3;
            } else if (curlen == nextlen) {
              max_count = 6;
              min_count = 3;
            } else {
              max_count = 7;
              min_count = 4;
            }
          }
        }
        send_all_trees(lcodes, dcodes, blcodes) {
          this.send_bits(lcodes - 257, 5);
          this.send_bits(dcodes - 1, 5);
          this.send_bits(blcodes - 4, 4);
          for (let rank = 0; rank < blcodes; rank++) {
            this.send_bits(this.bl_tree[Tree.bl_order[rank] * 2 + 1], 3);
          }
          this.send_tree(this.dyn_ltree, lcodes - 1);
          this.send_tree(this.dyn_dtree, dcodes - 1);
        }
        bi_flush() {
          if (this.bi_valid === 16) {
            this.put_short(this.bi_buf);
            this.bi_buf = 0;
            this.bi_valid = 0;
          } else if (this.bi_valid >= 8) {
            this.pending_buf[this.pending++] = this.bi_buf;
            this.bi_buf >>>= 8;
            this.bi_valid -= 8;
          }
        }
        _tr_align() {
          this.send_bits(STATIC_TREES << 1, 3);
          this.send_code(END_BLOCK, StaticTree.static_ltree);
          this.bi_flush();
          if (1 + this.last_eob_len + 10 - this.bi_valid < 9) {
            this.send_bits(STATIC_TREES << 1, 3);
            this.send_code(END_BLOCK, StaticTree.static_ltree);
            this.bi_flush();
          }
          this.last_eob_len = 7;
        }
        _tr_tally(dist, lc) {
          this.pending_buf[d_buf + this.last_lit * 2] = dist >>> 8 & 255;
          this.pending_buf[d_buf + this.last_lit * 2 + 1] = dist & 255;
          this.pending_buf[l_buf + this.last_lit] = lc & 255;
          this.last_lit++;
          if (dist === 0) {
            this.dyn_ltree[lc * 2]++;
          } else {
            this.matches++;
            dist--;
            this.dyn_ltree[(Tree._length_code[lc] + LITERALS + 1) * 2]++;
            this.dyn_dtree[Tree.d_code(dist) * 2]++;
          }
          if ((this.last_lit & 8191) === 0 && this.level > 2) {
            let out_length = this.last_lit * 8;
            let in_length = this.strstart - this.block_start;
            for (let dcode = 0; dcode < D_CODES; dcode++) {
              out_length += this.dyn_dtree[dcode * 2] * (5 + Tree.extra_dbits[dcode]);
            }
            out_length >>>= 3;
            if (this.matches < Math.floor(this.last_lit / 2) && out_length < Math.floor(in_length / 2))
              return true;
          }
          return this.last_lit === lit_bufsize - 1;
        }
        compress_block(ltree, dtree) {
          let lx = 0;
          if (this.last_lit !== 0) {
            do {
              let dist = this.pending_buf[d_buf + lx * 2] << 8 & 65280 | this.pending_buf[d_buf + lx * 2 + 1] & 255;
              let lc = this.pending_buf[l_buf + lx] & 255;
              lx++;
              if (dist === 0) {
                this.send_code(lc, ltree);
              } else {
                let code2 = Tree._length_code[lc];
                this.send_code(code2 + LITERALS + 1, ltree);
                let extra = Tree.extra_lbits[code2];
                if (extra !== 0) {
                  lc -= Tree.base_length[code2];
                  this.send_bits(lc, extra);
                }
                dist--;
                code2 = Tree.d_code(dist);
                this.send_code(code2, dtree);
                extra = Tree.extra_dbits[code2];
                if (extra !== 0) {
                  dist -= Tree.base_dist[code2];
                  this.send_bits(dist, extra);
                }
              }
            } while (lx < this.last_lit);
          }
          this.send_code(END_BLOCK, ltree);
          this.last_eob_len = ltree[END_BLOCK * 2 + 1];
        }
        bi_windup() {
          if (this.bi_valid > 8) {
            this.put_short(this.bi_buf);
          } else if (this.bi_valid > 0) {
            this.pending_buf[this.pending++] = this.bi_buf;
          }
          this.bi_buf = 0;
          this.bi_valid = 0;
        }
        copy_block(buf, len, header) {
          this.bi_windup();
          this.last_eob_len = 8;
          if (header) {
            this.put_short(len);
            this.put_short(~len);
          }
          this.pending_buf.set(this.window.subarray(buf, buf + len), this.pending);
          this.pending += len;
        }
        _tr_stored_block(buf, stored_len, eof) {
          this.send_bits((STORED_BLOCK << 1) + (eof ? 1 : 0), 3);
          this.copy_block(buf, stored_len, true);
        }
        _tr_flush_block(buf, stored_len, eof) {
          let opt_lenb, static_lenb;
          let max_blindex = 0;
          if (this.level > 0) {
            this.l_desc.build_tree(this);
            this.d_desc.build_tree(this);
            max_blindex = this.build_bl_tree();
            opt_lenb = this.opt_len + 3 + 7 >>> 3;
            static_lenb = this.static_len + 3 + 7 >>> 3;
            if (static_lenb <= opt_lenb)
              opt_lenb = static_lenb;
          } else {
            opt_lenb = static_lenb = stored_len + 5;
          }
          if (stored_len + 4 <= opt_lenb && buf !== -1) {
            this._tr_stored_block(buf, stored_len, eof);
          } else if (static_lenb == opt_lenb) {
            this.send_bits((STATIC_TREES << 1) + (eof ? 1 : 0), 3);
            this.compress_block(StaticTree.static_ltree, StaticTree.static_dtree);
          } else {
            this.send_bits((DYN_TREES << 1) + (eof ? 1 : 0), 3);
            this.send_all_trees(this.l_desc.max_code + 1, this.d_desc.max_code + 1, max_blindex + 1);
            this.compress_block(this.dyn_ltree, this.dyn_dtree);
          }
          this.init_block();
          if (eof) {
            this.bi_windup();
          }
        }
        flush_block_only(eof) {
          this._tr_flush_block(this.block_start >= 0 ? this.block_start : -1, this.strstart - this.block_start, eof);
          this.block_start = this.strstart;
          this.strm.flush_pending(this);
        }
        fill_window() {
          do {
            let more = window_size - this.lookahead - this.strstart;
            if (more === 0 && this.strstart === 0 && this.lookahead === 0) {
              more = 32768;
            } else if (more === -1) {
              more--;
            } else if (this.strstart >= 32768 + 32768 - MIN_LOOKAHEAD) {
              this.window.set(this.window.subarray(32768, 32768 + 32768), 0);
              this.match_start -= 32768;
              this.strstart -= 32768;
              this.block_start -= 32768;
              let n2 = hash_size;
              let p = n2;
              do {
                let m = this.head[--p] & 65535;
                this.head[p] = m >= 32768 ? m - 32768 : 0;
              } while (--n2 !== 0);
              n2 = 32768;
              p = n2;
              do {
                let m = this.prev[--p] & 65535;
                this.prev[p] = m >= 32768 ? m - 32768 : 0;
              } while (--n2 !== 0);
              more += 32768;
            }
            if (this.strm.avail_in === 0)
              return;
            const n = this.strm.read_into_buf(this.window, this.strstart + this.lookahead, more);
            this.lookahead += n;
            if (this.lookahead >= MIN_MATCH) {
              this.ins_h = this.window[this.strstart] & 255;
              this.ins_h = (this.ins_h << hash_shift ^ this.window[this.strstart + 1] & 255) & hash_mask;
            }
          } while (this.lookahead < MIN_LOOKAHEAD && this.strm.avail_in !== 0);
        }
        deflate_stored(flush) {
          let max_block_size = 65535;
          if (max_block_size > pending_buf_size - 5) {
            max_block_size = pending_buf_size - 5;
          }
          while (true) {
            if (this.lookahead <= 1) {
              this.fill_window();
              if (this.lookahead === 0 && flush === 0)
                return 0;
              if (this.lookahead === 0)
                break;
            }
            this.strstart += this.lookahead;
            this.lookahead = 0;
            let max_start = this.block_start + max_block_size;
            if (this.strstart === 0 || this.strstart >= max_start) {
              this.lookahead = this.strstart - max_start;
              this.strstart = max_start;
              this.flush_block_only(false);
              if (this.strm.avail_out === 0)
                return 0;
            }
            if (this.strstart - this.block_start >= 32768 - MIN_LOOKAHEAD) {
              this.flush_block_only(false);
              if (this.strm.avail_out === 0)
                return 0;
            }
          }
          this.flush_block_only(flush === 4);
          if (this.strm.avail_out === 0)
            return flush === 4 ? 2 : 0;
          return flush === 4 ? 3 : 1;
        }
        longest_match(cur_match) {
          let chain_length = this.max_chain_length;
          let scan = this.strstart;
          let best_len = this.prev_length;
          let limit = this.strstart > 32768 - MIN_LOOKAHEAD ? this.strstart - (32768 - MIN_LOOKAHEAD) : 0;
          let _nice_match = this.nice_match;
          const win = this.window;
          const strend = this.strstart + MAX_MATCH;
          let scan_end1 = win[scan + best_len - 1];
          let scan_end = win[scan + best_len];
          const scan_start = win[scan];
          const scan_start1 = win[scan + 1];
          if (this.prev_length >= this.good_match) {
            chain_length >>= 2;
          }
          if (_nice_match > this.lookahead)
            _nice_match = this.lookahead;
          do {
            let match2 = cur_match;
            let cont = true;
            do {
              match2 = cur_match;
              if (win[match2 + best_len] !== scan_end || win[match2 + best_len - 1] !== scan_end1) {
                if ((cur_match = this.prev[cur_match & 32767]) > limit && --chain_length !== 0) {
                  continue;
                } else {
                  cont = false;
                }
              }
              break;
            } while (true);
            if (!cont) {
              break;
            }
            if (win[match2] !== scan_start || win[match2 + 1] !== scan_start1)
              continue;
            scan += 2;
            match2 += 2;
            do {
              const sv = win[scan] << 24 | win[scan + 1] << 16 | win[scan + 2] << 8 | win[scan + 3];
              const mv = win[match2] << 24 | win[match2 + 1] << 16 | win[match2 + 2] << 8 | win[match2 + 3];
              const sxm = sv ^ mv;
              if (sxm) {
                const match_byte = Math.clz32(sxm) >> 3;
                scan += match_byte;
                match2 += match_byte;
                break;
              } else {
                scan += 4;
                match2 += 4;
              }
            } while (scan < strend);
            if (scan > strend) {
              scan = strend;
            }
            let len = MAX_MATCH - (strend - scan);
            scan = strend - MAX_MATCH;
            if (len > best_len) {
              this.match_start = cur_match;
              best_len = len;
              if (len >= _nice_match)
                break;
              scan_end1 = win[scan + best_len - 1];
              scan_end = win[scan + best_len];
            }
          } while ((cur_match = this.prev[cur_match & 32767]) > limit && --chain_length !== 0);
          if (best_len <= this.lookahead)
            return best_len;
          return this.lookahead;
        }
        deflate_fast(flush) {
          let hash_head = 0;
          let bflush;
          while (true) {
            if (this.lookahead < MIN_LOOKAHEAD) {
              this.fill_window();
              if (this.lookahead < MIN_LOOKAHEAD && flush === 0) {
                return 0;
              }
              if (this.lookahead === 0)
                break;
            }
            if (this.lookahead >= MIN_MATCH) {
              this.ins_h = (this.ins_h << hash_shift ^ this.window[this.strstart + (MIN_MATCH - 1)] & 255) & hash_mask;
              hash_head = this.head[this.ins_h] & 65535;
              this.prev[this.strstart & 32767] = this.head[this.ins_h];
              this.head[this.ins_h] = this.strstart;
            }
            if (hash_head !== 0 && (this.strstart - hash_head & 65535) <= 32768 - MIN_LOOKAHEAD) {
              if (this.strategy !== 2) {
                this.match_length = this.longest_match(hash_head);
              }
            }
            if (this.match_length >= MIN_MATCH) {
              bflush = this._tr_tally(this.strstart - this.match_start, this.match_length - MIN_MATCH);
              this.lookahead -= this.match_length;
              if (this.match_length <= this.max_lazy_match && this.lookahead >= MIN_MATCH) {
                this.match_length--;
                do {
                  this.strstart++;
                  this.ins_h = (this.ins_h << hash_shift ^ this.window[this.strstart + (MIN_MATCH - 1)] & 255) & hash_mask;
                  hash_head = this.head[this.ins_h] & 65535;
                  this.prev[this.strstart & 32767] = this.head[this.ins_h];
                  this.head[this.ins_h] = this.strstart;
                } while (--this.match_length !== 0);
                this.strstart++;
              } else {
                this.strstart += this.match_length;
                this.match_length = 0;
                this.ins_h = this.window[this.strstart] & 255;
                this.ins_h = (this.ins_h << hash_shift ^ this.window[this.strstart + 1] & 255) & hash_mask;
              }
            } else {
              bflush = this._tr_tally(0, this.window[this.strstart] & 255);
              this.lookahead--;
              this.strstart++;
            }
            if (bflush) {
              this.flush_block_only(false);
              if (this.strm.avail_out === 0)
                return 0;
            }
          }
          this.flush_block_only(flush === 4);
          if (this.strm.avail_out === 0) {
            if (flush === 4)
              return 2;
            else
              return 0;
          }
          return flush === 4 ? 3 : 1;
        }
        deflate_slow(flush) {
          let hash_head = 0;
          let bflush;
          let max_insert;
          let prev_match;
          while (true) {
            if (this.lookahead < MIN_LOOKAHEAD) {
              this.fill_window();
              if (this.lookahead < MIN_LOOKAHEAD && flush === 0) {
                return 0;
              }
              if (this.lookahead === 0)
                break;
            }
            if (this.lookahead >= MIN_MATCH) {
              this.ins_h = (this.ins_h << hash_shift ^ this.window[this.strstart + (MIN_MATCH - 1)] & 255) & hash_mask;
              hash_head = this.head[this.ins_h] & 65535;
              this.prev[this.strstart & 32767] = this.head[this.ins_h];
              this.head[this.ins_h] = this.strstart;
            }
            this.prev_length = this.match_length;
            prev_match = this.match_start;
            this.match_length = MIN_MATCH - 1;
            if (hash_head !== 0 && this.prev_length < this.max_lazy_match && (this.strstart - hash_head & 65535) <= 32768 - MIN_LOOKAHEAD) {
              if (this.strategy !== 2) {
                this.match_length = this.longest_match(hash_head);
              }
              if (this.match_length <= 5 && (this.strategy === 1 || this.match_length === MIN_MATCH && this.strstart - this.match_start > 4096)) {
                this.match_length = MIN_MATCH - 1;
              }
            }
            if (this.prev_length >= MIN_MATCH && this.match_length <= this.prev_length) {
              max_insert = this.strstart + this.lookahead - MIN_MATCH;
              bflush = this._tr_tally(this.strstart - 1 - prev_match, this.prev_length - MIN_MATCH);
              this.lookahead -= this.prev_length - 1;
              this.prev_length -= 2;
              do {
                if (++this.strstart <= max_insert) {
                  this.ins_h = (this.ins_h << hash_shift ^ this.window[this.strstart + (MIN_MATCH - 1)] & 255) & hash_mask;
                  hash_head = this.head[this.ins_h] & 65535;
                  this.prev[this.strstart & 32767] = this.head[this.ins_h];
                  this.head[this.ins_h] = this.strstart;
                }
              } while (--this.prev_length !== 0);
              this.match_available = false;
              this.match_length = MIN_MATCH - 1;
              this.strstart++;
              if (bflush) {
                this.flush_block_only(false);
                if (this.strm.avail_out === 0)
                  return 0;
              }
            } else if (this.match_available) {
              bflush = this._tr_tally(0, this.window[this.strstart - 1] & 255);
              if (bflush) {
                this.flush_block_only(false);
              }
              this.strstart++;
              this.lookahead--;
              if (this.strm.avail_out === 0)
                return 0;
            } else {
              this.match_available = true;
              this.strstart++;
              this.lookahead--;
            }
          }
          if (this.match_available) {
            bflush = this._tr_tally(0, this.window[this.strstart - 1] & 255);
            this.match_available = false;
          }
          this.flush_block_only(flush === 4);
          if (this.strm.avail_out === 0) {
            if (flush === 4)
              return 2;
            else
              return 0;
          }
          return flush === 4 ? 3 : 1;
        }
        deflateSetDictionary(dictionary) {
          const dictLength = dictionary.byteLength;
          let length = dictLength;
          let n, index = 0;
          if (!dictionary || this.status !== 1)
            return -2;
          if (length < MIN_MATCH)
            return 0;
          if (length > 32768 - MIN_LOOKAHEAD) {
            length = 32768 - MIN_LOOKAHEAD;
            index = dictLength - length;
          }
          this.window.set(dictionary.subarray(index, index + length), 0);
          this.strstart = length;
          this.block_start = length;
          this.ins_h = this.window[0] & 255;
          this.ins_h = (this.ins_h << hash_shift ^ this.window[1] & 255) & hash_mask;
          for (n = 0; n <= length - MIN_MATCH; n++) {
            this.ins_h = (this.ins_h << hash_shift ^ this.window[n + (MIN_MATCH - 1)] & 255) & hash_mask;
            this.prev[n & 32767] = this.head[this.ins_h];
            this.head[this.ins_h] = n;
          }
          return 0;
        }
        deflate(flush) {
          if (flush > 4 || flush < 0) {
            return -2;
          }
          const { strm } = this;
          if (!strm.next_out || !strm.next_in && strm.avail_in !== 0 || this.status === 3 && flush != 4) {
            return -2;
          }
          if (strm.avail_out === 0) {
            return -5;
          }
          let old_flush = this.last_flush;
          this.last_flush = flush;
          if (this.status === 1) {
            this.status = 2;
          }
          if (this.pending !== 0) {
            strm.flush_pending(this);
            if (strm.avail_out === 0) {
              this.last_flush = -1;
              return 0;
            }
          } else if (strm.avail_in === 0 && flush <= old_flush && flush !== 4) {
            return -5;
          }
          if (this.status === 3 && strm.avail_in !== 0) {
            return -5;
          }
          if (strm.avail_in !== 0 || this.lookahead !== 0 || flush !== 0 && this.status !== 3) {
            let bstate;
            switch (config_table[this.level].func) {
              case 0:
                bstate = this.deflate_stored(flush);
                break;
              case 1:
                bstate = this.deflate_fast(flush);
                break;
              case 2:
              default:
                bstate = this.deflate_slow(flush);
                break;
            }
            if (bstate == 2 || bstate === 3) {
              this.status = 3;
            }
            if (bstate === 0 || bstate === 2) {
              if (strm.avail_out === 0) {
                this.last_flush = -1;
              }
              return 0;
            }
            if (bstate === 1) {
              if (flush === 1) {
                this._tr_align();
              } else {
                this._tr_stored_block(0, 0, false);
                if (flush === 3) {
                  for (let i = 0; i < hash_size; i++)
                    this.head[i] = 0;
                }
              }
              strm.flush_pending(this);
              if (strm.avail_out === 0) {
                this.last_flush = -1;
                return 0;
              }
            }
          }
          if (flush !== 4)
            return 0;
          return 1;
        }
      };
      Deflater = class {
        constructor(options) {
          var _a8, _b3;
          this.checksum = 1;
          this.origSize = 0;
          this.dictChecksum = 0;
          const level = (_a8 = options === null || options === void 0 ? void 0 : options.level) !== null && _a8 !== void 0 ? _a8 : 6;
          const format = (_b3 = options === null || options === void 0 ? void 0 : options.format) !== null && _b3 !== void 0 ? _b3 : "deflate";
          const dictionary = options === null || options === void 0 ? void 0 : options.dictionary;
          const fileName = options === null || options === void 0 ? void 0 : options.fileName;
          if (typeof level !== "number" || level < 1 || level > 9) {
            throw new RangeError("level must be between 1 and 9, inclusive");
          }
          if (format !== "gzip" && format !== "raw" && format !== "deflate") {
            throw new RangeError("container must be one of `raw`, `deflate`, `gzip`");
          }
          if (typeof fileName !== "undefined" && typeof fileName !== "string") {
            throw new TypeError("fileName must be a string");
          }
          this.fileName = fileName || "";
          this.z = new ZStream();
          this.deflate = new Deflate(this.z, level, 0);
          if (dictionary) {
            if (format !== "deflate") {
              throw new TypeError("Can only provide a dictionary for `deflate` containers.");
            }
            const dict = u8ArrayFromBufferSource(dictionary);
            if (!dict) {
              throw new TypeError("dictionary must be an ArrayBuffer or buffer view");
            }
            this.dictChecksum = adler32(dict);
            this.deflate.deflateSetDictionary(dict);
          }
          this.format = format;
          if (this.format === "gzip") {
            this.checksum = 0;
          }
        }
        buildZlibHeader() {
          let headerSize = 2;
          let check = 1;
          if (this.dictChecksum !== 0) {
            headerSize += 4;
            check = PRESET_DICT;
          }
          const buf = new ArrayBuffer(headerSize);
          const dv = new DataView(buf);
          dv.setUint16(0, 120 << 8 | check);
          if (this.dictChecksum !== 0) {
            dv.setUint32(2, this.dictChecksum);
          }
          return new Uint8Array(buf);
        }
        buildGZipHeader() {
          let flag = 0;
          let fileNameBytes = [];
          if (this.fileName.length > 0) {
            flag |= 8;
            fileNameBytes = Array.from(this.fileName).map((c2) => {
              const cc = c2.charCodeAt(0);
              return cc > 255 ? 95 : cc;
            });
            fileNameBytes.push(0);
          }
          const buf = new ArrayBuffer(10 + fileNameBytes.length);
          const dv = new DataView(buf);
          dv.setUint16(0, GZIP_ID1 << 8 | GZIP_ID2);
          dv.setUint16(2, Z_DEFLATED << 8 | flag);
          const time = Math.floor(Date.now() / 1e3);
          dv.setUint32(4, time, true);
          dv.setUint16(8, 0 << 8 | 255);
          const ua = new Uint8Array(buf);
          if (fileNameBytes.length) {
            ua.set(fileNameBytes, 10);
          }
          return ua;
        }
        buildTrailer() {
          const gzip = this.format === "gzip";
          const size = gzip ? 8 : 4;
          const trailer = new ArrayBuffer(size);
          const dv = new DataView(trailer);
          dv.setUint32(0, this.checksum, gzip);
          if (gzip) {
            dv.setUint32(4, this.origSize, true);
          }
          return new Uint8Array(trailer);
        }
        append(data) {
          const buffers = [];
          const chunk = u8ArrayFromBufferSource(data);
          if (!(chunk instanceof Uint8Array)) {
            throw new TypeError("data must be an ArrayBuffer or buffer view");
          }
          if (!chunk.length) {
            return buffers;
          }
          if (this.format !== "gzip") {
            this.checksum = adler32(chunk, this.checksum);
          } else {
            this.checksum = crc32(chunk, this.checksum);
          }
          this.origSize += chunk.length;
          const { deflate, z } = this;
          z.next_in_index = 0;
          z.next_in = chunk;
          z.avail_in = chunk.length;
          if (deflate.status === 1) {
            if (this.format === "deflate") {
              buffers.push(this.buildZlibHeader());
            } else if (this.format === "gzip") {
              buffers.push(this.buildGZipHeader());
            }
          }
          do {
            z.next_out_index = 0;
            z.avail_out = OUTPUT_BUFSIZE;
            const err = deflate.deflate(0);
            if (err !== 0) {
              throw new Error("deflating: " + z.msg);
            }
            if (z.next_out_index) {
              buffers.push(new Uint8Array(z.next_out.subarray(0, z.next_out_index)));
            }
          } while (z.avail_in > 0 || z.avail_out === 0);
          return buffers;
        }
        finish() {
          const buffers = [];
          const { deflate, z } = this;
          if (deflate.status === 1) {
            throw new Error("Cannot call finish before at least 1 call to append");
          }
          do {
            z.next_out_index = 0;
            z.avail_out = OUTPUT_BUFSIZE;
            const err = deflate.deflate(4);
            if (err !== 1 && err !== 0) {
              throw new Error("deflating: " + z.msg);
            }
            if (OUTPUT_BUFSIZE - z.avail_out > 0) {
              buffers.push(new Uint8Array(z.next_out.subarray(0, z.next_out_index)));
            }
          } while (z.avail_in > 0 || z.avail_out === 0);
          if (this.format !== "raw") {
            buffers.push(this.buildTrailer());
          }
          return buffers;
        }
      };
    }
  });

  // node_modules/.pnpm/@stardazed+streams-compression@1.0.0/node_modules/@stardazed/streams-compression/dist/sd-streams-compression.esm.js
  var sd_streams_compression_esm_exports = {};
  __export(sd_streams_compression_esm_exports, {
    CompressionStream: () => CompressionStream,
    DecompressionStream: () => DecompressionStream
  });
  var decContext, decTransform, DecompressionTransformer, DecompressionStream, comContext, comTransform, CompressionTransformer, CompressionStream;
  var init_sd_streams_compression_esm = __esm({
    "node_modules/.pnpm/@stardazed+streams-compression@1.0.0/node_modules/@stardazed/streams-compression/dist/sd-streams-compression.esm.js"() {
      init_env();
      init_sd_zlib_esm();
      decContext = Symbol("decContext");
      decTransform = Symbol("decTransform");
      DecompressionTransformer = function() {
        function DecompressionTransformer2(inflater) {
          this.inflater_ = inflater;
        }
        DecompressionTransformer2.prototype.transform = function(chunk, controller) {
          if (!(chunk instanceof ArrayBuffer || ArrayBuffer.isView(chunk))) {
            throw new TypeError("Input data must be a BufferSource");
          }
          var buffers = this.inflater_.append(chunk);
          for (var _i = 0, buffers_1 = buffers; _i < buffers_1.length; _i++) {
            var buf = buffers_1[_i];
            controller.enqueue(buf);
          }
        };
        DecompressionTransformer2.prototype.flush = function(_controller) {
          var result = this.inflater_.finish();
          if (!result.success) {
            if (!result.complete) {
              throw new Error("Unexpected EOF during decompression");
            }
            if (result.checksum === "mismatch") {
              throw new Error("Data integrity check failed");
            }
            if (result.fileSize === "mismatch") {
              throw new Error("Data size check failed");
            }
            throw new Error("Decompression error");
          }
        };
        return DecompressionTransformer2;
      }();
      DecompressionStream = function() {
        function DecompressionStream2(format) {
          if (format !== "deflate" && format !== "gzip") {
            throw new TypeError("format must be one of `deflate`, `gzip`");
          }
          this[decContext] = new Inflater();
          this[decTransform] = new TransformStream(new DecompressionTransformer(this[decContext]));
        }
        Object.defineProperty(DecompressionStream2.prototype, "readable", {
          get: function() {
            return this[decTransform].readable;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(DecompressionStream2.prototype, "writable", {
          get: function() {
            return this[decTransform].writable;
          },
          enumerable: true,
          configurable: true
        });
        return DecompressionStream2;
      }();
      comContext = Symbol("comContext");
      comTransform = Symbol("comTransform");
      CompressionTransformer = function() {
        function CompressionTransformer2(deflater) {
          this.deflater_ = deflater;
        }
        CompressionTransformer2.prototype.transform = function(chunk, controller) {
          if (!(chunk instanceof ArrayBuffer || ArrayBuffer.isView(chunk))) {
            throw new TypeError("Input data must be a BufferSource");
          }
          var buffers = this.deflater_.append(chunk);
          for (var _i = 0, buffers_1 = buffers; _i < buffers_1.length; _i++) {
            var buf = buffers_1[_i];
            controller.enqueue(buf);
          }
        };
        CompressionTransformer2.prototype.flush = function(controller) {
          var buffers = this.deflater_.finish();
          for (var _i = 0, buffers_2 = buffers; _i < buffers_2.length; _i++) {
            var buf = buffers_2[_i];
            controller.enqueue(buf);
          }
        };
        return CompressionTransformer2;
      }();
      CompressionStream = function() {
        function CompressionStream2(format) {
          if (format !== "deflate" && format !== "gzip") {
            throw new TypeError("format must be one of `deflate`, `gzip`");
          }
          this[comContext] = new Deflater({ format });
          this[comTransform] = new TransformStream(new CompressionTransformer(this[comContext]));
        }
        Object.defineProperty(CompressionStream2.prototype, "readable", {
          get: function() {
            return this[comTransform].readable;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(CompressionStream2.prototype, "writable", {
          get: function() {
            return this[comTransform].writable;
          },
          enumerable: true,
          configurable: true
        });
        return CompressionStream2;
      }();
    }
  });

  // node_modules/.pnpm/tslib@2.4.0/node_modules/tslib/tslib.js
  var require_tslib = __commonJS({
    "node_modules/.pnpm/tslib@2.4.0/node_modules/tslib/tslib.js"(exports, module) {
      init_env();
      var __extends2;
      var __assign2;
      var __rest2;
      var __decorate2;
      var __param2;
      var __metadata2;
      var __awaiter2;
      var __generator2;
      var __exportStar2;
      var __values2;
      var __read2;
      var __spread2;
      var __spreadArrays2;
      var __spreadArray2;
      var __await2;
      var __asyncGenerator2;
      var __asyncDelegator2;
      var __asyncValues2;
      var __makeTemplateObject2;
      var __importStar2;
      var __importDefault2;
      var __classPrivateFieldGet11;
      var __classPrivateFieldSet10;
      var __classPrivateFieldIn2;
      var __createBinding2;
      (function(factory) {
        var root = typeof self === "object" ? self : typeof self === "object" ? self : typeof this === "object" ? this : {};
        if (typeof define === "function" && define.amd) {
          define("tslib", ["exports"], function(exports2) {
            factory(createExporter(root, createExporter(exports2)));
          });
        } else if (typeof module === "object" && typeof module.exports === "object") {
          factory(createExporter(root, createExporter(module.exports)));
        } else {
          factory(createExporter(root));
        }
        function createExporter(exports2, previous) {
          if (exports2 !== root) {
            if (typeof Object.create === "function") {
              Object.defineProperty(exports2, "__esModule", { value: true });
            } else {
              exports2.__esModule = true;
            }
          }
          return function(id, v2) {
            return exports2[id] = previous ? previous(id, v2) : v2;
          };
        }
      })(function(exporter) {
        var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b)
            if (Object.prototype.hasOwnProperty.call(b, p))
              d[p] = b[p];
        };
        __extends2 = function(d, b) {
          if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
          extendStatics(d, b);
          function __() {
            this.constructor = d;
          }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
        __assign2 = Object.assign || function(t) {
          for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s)
              if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
          }
          return t;
        };
        __rest2 = function(s, e) {
          var t = {};
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
              t[p] = s[p];
          if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
              if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
            }
          return t;
        };
        __decorate2 = function(decorators, target2, key2, desc) {
          var c2 = arguments.length, r2 = c2 < 3 ? target2 : desc === null ? desc = Object.getOwnPropertyDescriptor(target2, key2) : desc, d;
          if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r2 = Reflect.decorate(decorators, target2, key2, desc);
          else
            for (var i = decorators.length - 1; i >= 0; i--)
              if (d = decorators[i])
                r2 = (c2 < 3 ? d(r2) : c2 > 3 ? d(target2, key2, r2) : d(target2, key2)) || r2;
          return c2 > 3 && r2 && Object.defineProperty(target2, key2, r2), r2;
        };
        __param2 = function(paramIndex, decorator) {
          return function(target2, key2) {
            decorator(target2, key2, paramIndex);
          };
        };
        __metadata2 = function(metadataKey, metadataValue) {
          if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
        };
        __awaiter2 = function(thisArg, _arguments, P, generator) {
          function adopt(value) {
            return value instanceof P ? value : new P(function(resolve) {
              resolve(value);
            });
          }
          return new (P || (P = Promise))(function(resolve, reject) {
            function fulfilled(value) {
              try {
                step(generator.next(value));
              } catch (e) {
                reject(e);
              }
            }
            function rejected(value) {
              try {
                step(generator["throw"](value));
              } catch (e) {
                reject(e);
              }
            }
            function step(result) {
              result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
            }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
          });
        };
        __generator2 = function(thisArg, body) {
          var _ = { label: 0, sent: function() {
            if (t[0] & 1)
              throw t[1];
            return t[1];
          }, trys: [], ops: [] }, f, y, t, g;
          return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
            return this;
          }), g;
          function verb(n) {
            return function(v2) {
              return step([n, v2]);
            };
          }
          function step(op) {
            if (f)
              throw new TypeError("Generator is already executing.");
            while (_)
              try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                  return t;
                if (y = 0, t)
                  op = [op[0] & 2, t.value];
                switch (op[0]) {
                  case 0:
                  case 1:
                    t = op;
                    break;
                  case 4:
                    _.label++;
                    return { value: op[1], done: false };
                  case 5:
                    _.label++;
                    y = op[1];
                    op = [0];
                    continue;
                  case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                  default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                      _ = 0;
                      continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                      _.label = op[1];
                      break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                      _.label = t[1];
                      t = op;
                      break;
                    }
                    if (t && _.label < t[2]) {
                      _.label = t[2];
                      _.ops.push(op);
                      break;
                    }
                    if (t[2])
                      _.ops.pop();
                    _.trys.pop();
                    continue;
                }
                op = body.call(thisArg, _);
              } catch (e) {
                op = [6, e];
                y = 0;
              } finally {
                f = t = 0;
              }
            if (op[0] & 5)
              throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
          }
        };
        __exportStar2 = function(m, o) {
          for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
              __createBinding2(o, m, p);
        };
        __createBinding2 = Object.create ? function(o, m, k, k2) {
          if (k2 === void 0)
            k2 = k;
          var desc = Object.getOwnPropertyDescriptor(m, k);
          if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
            desc = { enumerable: true, get: function() {
              return m[k];
            } };
          }
          Object.defineProperty(o, k2, desc);
        } : function(o, m, k, k2) {
          if (k2 === void 0)
            k2 = k;
          o[k2] = m[k];
        };
        __values2 = function(o) {
          var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
          if (m)
            return m.call(o);
          if (o && typeof o.length === "number")
            return {
              next: function() {
                if (o && i >= o.length)
                  o = void 0;
                return { value: o && o[i++], done: !o };
              }
            };
          throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        __read2 = function(o, n) {
          var m = typeof Symbol === "function" && o[Symbol.iterator];
          if (!m)
            return o;
          var i = m.call(o), r2, ar = [], e;
          try {
            while ((n === void 0 || n-- > 0) && !(r2 = i.next()).done)
              ar.push(r2.value);
          } catch (error) {
            e = { error };
          } finally {
            try {
              if (r2 && !r2.done && (m = i["return"]))
                m.call(i);
            } finally {
              if (e)
                throw e.error;
            }
          }
          return ar;
        };
        __spread2 = function() {
          for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read2(arguments[i]));
          return ar;
        };
        __spreadArrays2 = function() {
          for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
          for (var r2 = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
              r2[k] = a[j];
          return r2;
        };
        __spreadArray2 = function(to, from2, pack2) {
          if (pack2 || arguments.length === 2)
            for (var i = 0, l = from2.length, ar; i < l; i++) {
              if (ar || !(i in from2)) {
                if (!ar)
                  ar = Array.prototype.slice.call(from2, 0, i);
                ar[i] = from2[i];
              }
            }
          return to.concat(ar || Array.prototype.slice.call(from2));
        };
        __await2 = function(v2) {
          return this instanceof __await2 ? (this.v = v2, this) : new __await2(v2);
        };
        __asyncGenerator2 = function(thisArg, _arguments, generator) {
          if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
          var g = generator.apply(thisArg, _arguments || []), i, q = [];
          return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
            return this;
          }, i;
          function verb(n) {
            if (g[n])
              i[n] = function(v2) {
                return new Promise(function(a, b) {
                  q.push([n, v2, a, b]) > 1 || resume(n, v2);
                });
              };
          }
          function resume(n, v2) {
            try {
              step(g[n](v2));
            } catch (e) {
              settle(q[0][3], e);
            }
          }
          function step(r2) {
            r2.value instanceof __await2 ? Promise.resolve(r2.value.v).then(fulfill, reject) : settle(q[0][2], r2);
          }
          function fulfill(value) {
            resume("next", value);
          }
          function reject(value) {
            resume("throw", value);
          }
          function settle(f, v2) {
            if (f(v2), q.shift(), q.length)
              resume(q[0][0], q[0][1]);
          }
        };
        __asyncDelegator2 = function(o) {
          var i, p;
          return i = {}, verb("next"), verb("throw", function(e) {
            throw e;
          }), verb("return"), i[Symbol.iterator] = function() {
            return this;
          }, i;
          function verb(n, f) {
            i[n] = o[n] ? function(v2) {
              return (p = !p) ? { value: __await2(o[n](v2)), done: n === "return" } : f ? f(v2) : v2;
            } : f;
          }
        };
        __asyncValues2 = function(o) {
          if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
          var m = o[Symbol.asyncIterator], i;
          return m ? m.call(o) : (o = typeof __values2 === "function" ? __values2(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
            return this;
          }, i);
          function verb(n) {
            i[n] = o[n] && function(v2) {
              return new Promise(function(resolve, reject) {
                v2 = o[n](v2), settle(resolve, reject, v2.done, v2.value);
              });
            };
          }
          function settle(resolve, reject, d, v2) {
            Promise.resolve(v2).then(function(v3) {
              resolve({ value: v3, done: d });
            }, reject);
          }
        };
        __makeTemplateObject2 = function(cooked, raw) {
          if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
          } else {
            cooked.raw = raw;
          }
          return cooked;
        };
        var __setModuleDefault = Object.create ? function(o, v2) {
          Object.defineProperty(o, "default", { enumerable: true, value: v2 });
        } : function(o, v2) {
          o["default"] = v2;
        };
        __importStar2 = function(mod) {
          if (mod && mod.__esModule)
            return mod;
          var result = {};
          if (mod != null) {
            for (var k in mod)
              if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                __createBinding2(result, mod, k);
          }
          __setModuleDefault(result, mod);
          return result;
        };
        __importDefault2 = function(mod) {
          return mod && mod.__esModule ? mod : { "default": mod };
        };
        __classPrivateFieldGet11 = function(receiver, state, kind, f) {
          if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a getter");
          if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot read private member from an object whose class did not declare it");
          return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
        };
        __classPrivateFieldSet10 = function(receiver, state, value, kind, f) {
          if (kind === "m")
            throw new TypeError("Private method is not writable");
          if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a setter");
          if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot write private member to an object whose class did not declare it");
          return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
        };
        __classPrivateFieldIn2 = function(state, receiver) {
          if (receiver === null || typeof receiver !== "object" && typeof receiver !== "function")
            throw new TypeError("Cannot use 'in' operator on non-object");
          return typeof state === "function" ? receiver === state : state.has(receiver);
        };
        exporter("__extends", __extends2);
        exporter("__assign", __assign2);
        exporter("__rest", __rest2);
        exporter("__decorate", __decorate2);
        exporter("__param", __param2);
        exporter("__metadata", __metadata2);
        exporter("__awaiter", __awaiter2);
        exporter("__generator", __generator2);
        exporter("__exportStar", __exportStar2);
        exporter("__createBinding", __createBinding2);
        exporter("__values", __values2);
        exporter("__read", __read2);
        exporter("__spread", __spread2);
        exporter("__spreadArrays", __spreadArrays2);
        exporter("__spreadArray", __spreadArray2);
        exporter("__await", __await2);
        exporter("__asyncGenerator", __asyncGenerator2);
        exporter("__asyncDelegator", __asyncDelegator2);
        exporter("__asyncValues", __asyncValues2);
        exporter("__makeTemplateObject", __makeTemplateObject2);
        exporter("__importStar", __importStar2);
        exporter("__importDefault", __importDefault2);
        exporter("__classPrivateFieldGet", __classPrivateFieldGet11);
        exporter("__classPrivateFieldSet", __classPrivateFieldSet10);
        exporter("__classPrivateFieldIn", __classPrivateFieldIn2);
      });
    }
  });

  // node_modules/.pnpm/negotiated@1.0.2/node_modules/negotiated/lib/parser.js
  var require_parser = __commonJS({
    "node_modules/.pnpm/negotiated@1.0.2/node_modules/negotiated/lib/parser.js"(exports, module) {
      "use strict";
      init_env();
      module.exports = class Parser {
        constructor(source) {
          this.source = source;
          this.index = 0;
        }
        accept({ regex, capture }) {
          regex.lastIndex = this.index;
          const match2 = this.source.match(regex);
          if (match2) {
            this.index += match2[0].length;
            return capture === -1 ? match2 : match2[capture];
          }
          return null;
        }
        expect(pattern) {
          const result = this.accept(pattern);
          if (result !== null)
            return result;
          throw new Error("Malformed header value");
        }
        ended() {
          return this.index === this.source.length;
        }
      };
    }
  });

  // node_modules/.pnpm/negotiated@1.0.2/node_modules/negotiated/lib/patterns.js
  var require_patterns = __commonJS({
    "node_modules/.pnpm/negotiated@1.0.2/node_modules/negotiated/lib/patterns.js"(exports) {
      "use strict";
      init_env();
      var pattern = (capture, regex) => ({ regex, capture });
      exports.token = pattern(0, /[-!#$%&'*+.^_`|~a-z\d]+/yi);
      exports.mediaRange = pattern(0, /[-!#$%&'*+.^_`|~a-z\d]+\/[-!#$%&'*+.^_`|~a-z\d]+/yi);
      exports.languageRange = pattern(0, /[a-z]{1,8}(?:-[a-z\d]{1,8})*|\*/yi);
      exports.trailers = pattern(0, /trailers/yi);
      exports.transferCoding = pattern(0, /gzip|deflate|compress|chunked/yi);
      exports.parameters = pattern(0, /(?:[ \t]*;[ \t]*(?!q=)[-!#$%&'*+.^_`|~a-z\d]+=(?:[-!#$%&'*+.^_`|~a-z\d]+|"(?:[ \t\x21\x23-\x5b\x5d-\x7e\x80-\xff]|\\[ \t\x21-\x7e\x80-\xff])*"))*/yi);
      exports.transferParameters = pattern(0, /(?:[ \t]*;[ \t]*(?!q=)[-!#$%&'*+.^_`|~a-z\d]+[ \t]*=[ \t]*(?:[-!#$%&'*+.^_`|~a-z\d]+|"(?:[ \t\x21\x23-\x5b\x5d-\x7e\x80-\xff]|\\[ \t\x21-\x7e\x80-\xff])*"))*/yi);
      exports.extensions = pattern(0, /(?:[ \t]*;[ \t]*[-!#$%&'*+.^_`|~a-z\d]+(?:=(?:[-!#$%&'*+.^_`|~a-z\d]+|"(?:[ \t\x21\x23-\x5b\x5d-\x7e\x80-\xff]|\\[ \t\x21-\x7e\x80-\xff])*"))?)*/yi);
      exports.qvalue = pattern(1, /[ \t]*;[ \t]*q=(0(?:\.\d{0,3})?|1(?:\.0{0,3})?)/yi);
      exports.comma = pattern(0, /[ \t]*,[ \t]*/yi);
      exports.nextParameter = pattern(-1, /[; \t]+([^=; \t]+)(?:[= \t]+([^"; \t]+|"(?:[^"\\]|\\.)*"))?/yi);
    }
  });

  // node_modules/.pnpm/negotiated@1.0.2/node_modules/negotiated/lib/index.js
  var require_lib = __commonJS({
    "node_modules/.pnpm/negotiated@1.0.2/node_modules/negotiated/lib/index.js"(exports) {
      "use strict";
      init_env();
      var Parser3 = require_parser();
      var patterns = require_patterns();
      var quotedPair = /\\(.)/g;
      var simpleAccept = (name, subjectPattern) => function* (header) {
        if (!header)
          return;
        if (typeof header !== "string")
          throw new TypeError("Expected header to be a string");
        for (const parser = new Parser3(header); ; ) {
          const subject = parser.expect(subjectPattern).toLowerCase();
          const weight = +(parser.accept(patterns.qvalue) || 1);
          yield { [name]: subject, weight };
          if (parser.ended())
            return;
          parser.expect(patterns.comma);
        }
      };
      exports.mediaTypes = function* (header) {
        if (!header)
          return;
        if (typeof header !== "string")
          throw new TypeError("Expected header to be a string");
        for (const parser = new Parser3(header); ; ) {
          const type = parser.expect(patterns.mediaRange).toLowerCase();
          const params = parser.accept(patterns.parameters);
          const qvalue = parser.accept(patterns.qvalue);
          const extensions2 = qvalue ? parser.accept(patterns.extensions) : "";
          const weight = qvalue ? +qvalue : 1;
          yield { type, params, weight, extensions: extensions2 };
          if (parser.ended())
            return;
          parser.expect(patterns.comma);
        }
      };
      exports.charsets = simpleAccept("charset", patterns.token);
      exports.encodings = simpleAccept("encoding", patterns.token);
      exports.languages = simpleAccept("language", patterns.languageRange);
      exports.transferEncodings = function* (header) {
        if (!header)
          return;
        if (typeof header !== "string")
          throw new TypeError("Expected header to be a string");
        for (const parser = new Parser3(header); ; ) {
          if (!parser.accept(patterns.trailers)) {
            let encoding = parser.accept(patterns.transferCoding);
            let params = "";
            if (encoding) {
              encoding = encoding.toLowerCase();
              if (encoding === "chunked")
                throw new Error("Malformed header value");
            } else {
              encoding = parser.expect(patterns.token).toLowerCase();
              params = parser.accept(patterns.transferParameters);
            }
            const weight = +(parser.accept(patterns.qvalue) || 1);
            yield { encoding, params, weight };
          }
          if (parser.ended())
            return;
          parser.expect(patterns.comma);
        }
      };
      exports.parameters = function* (params) {
        if (!params)
          return;
        if (typeof params !== "string")
          throw new TypeError("Expected parameters to be a string");
        for (const parser = new Parser3(params); ; ) {
          let [, key2, value] = parser.expect(patterns.nextParameter);
          key2 = key2.toLowerCase();
          if (value && value.charCodeAt(0) === 34)
            value = value.slice(1, -1).replace(quotedPair, "$1");
          yield { key: key2, value };
          if (parser.ended())
            return;
        }
      };
    }
  });

  // node_modules/.pnpm/mime@3.0.0/node_modules/mime/Mime.js
  var require_Mime = __commonJS({
    "node_modules/.pnpm/mime@3.0.0/node_modules/mime/Mime.js"(exports, module) {
      "use strict";
      init_env();
      function Mime2() {
        this._types = /* @__PURE__ */ Object.create(null);
        this._extensions = /* @__PURE__ */ Object.create(null);
        for (let i = 0; i < arguments.length; i++) {
          this.define(arguments[i]);
        }
        this.define = this.define.bind(this);
        this.getType = this.getType.bind(this);
        this.getExtension = this.getExtension.bind(this);
      }
      Mime2.prototype.define = function(typeMap, force) {
        for (let type in typeMap) {
          let extensions2 = typeMap[type].map(function(t) {
            return t.toLowerCase();
          });
          type = type.toLowerCase();
          for (let i = 0; i < extensions2.length; i++) {
            const ext = extensions2[i];
            if (ext[0] === "*") {
              continue;
            }
            if (!force && ext in this._types) {
              throw new Error('Attempt to change mapping for "' + ext + '" extension from "' + this._types[ext] + '" to "' + type + '". Pass `force=true` to allow this, otherwise remove "' + ext + '" from the list of extensions for "' + type + '".');
            }
            this._types[ext] = type;
          }
          if (force || !this._extensions[type]) {
            const ext = extensions2[0];
            this._extensions[type] = ext[0] !== "*" ? ext : ext.substr(1);
          }
        }
      };
      Mime2.prototype.getType = function(path) {
        path = String(path);
        let last = path.replace(/^.*[/\\]/, "").toLowerCase();
        let ext = last.replace(/^.*\./, "").toLowerCase();
        let hasPath = last.length < path.length;
        let hasDot = ext.length < last.length - 1;
        return (hasDot || !hasPath) && this._types[ext] || null;
      };
      Mime2.prototype.getExtension = function(type) {
        type = /^\s*([^;\s]*)/.test(type) && RegExp.$1;
        return type && this._extensions[type.toLowerCase()] || null;
      };
      module.exports = Mime2;
    }
  });

  // node_modules/.pnpm/mime@3.0.0/node_modules/mime/types/standard.js
  var require_standard = __commonJS({
    "node_modules/.pnpm/mime@3.0.0/node_modules/mime/types/standard.js"(exports, module) {
      init_env();
      module.exports = { "application/andrew-inset": ["ez"], "application/applixware": ["aw"], "application/atom+xml": ["atom"], "application/atomcat+xml": ["atomcat"], "application/atomdeleted+xml": ["atomdeleted"], "application/atomsvc+xml": ["atomsvc"], "application/atsc-dwd+xml": ["dwd"], "application/atsc-held+xml": ["held"], "application/atsc-rsat+xml": ["rsat"], "application/bdoc": ["bdoc"], "application/calendar+xml": ["xcs"], "application/ccxml+xml": ["ccxml"], "application/cdfx+xml": ["cdfx"], "application/cdmi-capability": ["cdmia"], "application/cdmi-container": ["cdmic"], "application/cdmi-domain": ["cdmid"], "application/cdmi-object": ["cdmio"], "application/cdmi-queue": ["cdmiq"], "application/cu-seeme": ["cu"], "application/dash+xml": ["mpd"], "application/davmount+xml": ["davmount"], "application/docbook+xml": ["dbk"], "application/dssc+der": ["dssc"], "application/dssc+xml": ["xdssc"], "application/ecmascript": ["es", "ecma"], "application/emma+xml": ["emma"], "application/emotionml+xml": ["emotionml"], "application/epub+zip": ["epub"], "application/exi": ["exi"], "application/express": ["exp"], "application/fdt+xml": ["fdt"], "application/font-tdpfr": ["pfr"], "application/geo+json": ["geojson"], "application/gml+xml": ["gml"], "application/gpx+xml": ["gpx"], "application/gxf": ["gxf"], "application/gzip": ["gz"], "application/hjson": ["hjson"], "application/hyperstudio": ["stk"], "application/inkml+xml": ["ink", "inkml"], "application/ipfix": ["ipfix"], "application/its+xml": ["its"], "application/java-archive": ["jar", "war", "ear"], "application/java-serialized-object": ["ser"], "application/java-vm": ["class"], "application/javascript": ["js", "mjs"], "application/json": ["json", "map"], "application/json5": ["json5"], "application/jsonml+json": ["jsonml"], "application/ld+json": ["jsonld"], "application/lgr+xml": ["lgr"], "application/lost+xml": ["lostxml"], "application/mac-binhex40": ["hqx"], "application/mac-compactpro": ["cpt"], "application/mads+xml": ["mads"], "application/manifest+json": ["webmanifest"], "application/marc": ["mrc"], "application/marcxml+xml": ["mrcx"], "application/mathematica": ["ma", "nb", "mb"], "application/mathml+xml": ["mathml"], "application/mbox": ["mbox"], "application/mediaservercontrol+xml": ["mscml"], "application/metalink+xml": ["metalink"], "application/metalink4+xml": ["meta4"], "application/mets+xml": ["mets"], "application/mmt-aei+xml": ["maei"], "application/mmt-usd+xml": ["musd"], "application/mods+xml": ["mods"], "application/mp21": ["m21", "mp21"], "application/mp4": ["mp4s", "m4p"], "application/msword": ["doc", "dot"], "application/mxf": ["mxf"], "application/n-quads": ["nq"], "application/n-triples": ["nt"], "application/node": ["cjs"], "application/octet-stream": ["bin", "dms", "lrf", "mar", "so", "dist", "distz", "pkg", "bpk", "dump", "elc", "deploy", "exe", "dll", "deb", "dmg", "iso", "img", "msi", "msp", "msm", "buffer"], "application/oda": ["oda"], "application/oebps-package+xml": ["opf"], "application/ogg": ["ogx"], "application/omdoc+xml": ["omdoc"], "application/onenote": ["onetoc", "onetoc2", "onetmp", "onepkg"], "application/oxps": ["oxps"], "application/p2p-overlay+xml": ["relo"], "application/patch-ops-error+xml": ["xer"], "application/pdf": ["pdf"], "application/pgp-encrypted": ["pgp"], "application/pgp-signature": ["asc", "sig"], "application/pics-rules": ["prf"], "application/pkcs10": ["p10"], "application/pkcs7-mime": ["p7m", "p7c"], "application/pkcs7-signature": ["p7s"], "application/pkcs8": ["p8"], "application/pkix-attr-cert": ["ac"], "application/pkix-cert": ["cer"], "application/pkix-crl": ["crl"], "application/pkix-pkipath": ["pkipath"], "application/pkixcmp": ["pki"], "application/pls+xml": ["pls"], "application/postscript": ["ai", "eps", "ps"], "application/provenance+xml": ["provx"], "application/pskc+xml": ["pskcxml"], "application/raml+yaml": ["raml"], "application/rdf+xml": ["rdf", "owl"], "application/reginfo+xml": ["rif"], "application/relax-ng-compact-syntax": ["rnc"], "application/resource-lists+xml": ["rl"], "application/resource-lists-diff+xml": ["rld"], "application/rls-services+xml": ["rs"], "application/route-apd+xml": ["rapd"], "application/route-s-tsid+xml": ["sls"], "application/route-usd+xml": ["rusd"], "application/rpki-ghostbusters": ["gbr"], "application/rpki-manifest": ["mft"], "application/rpki-roa": ["roa"], "application/rsd+xml": ["rsd"], "application/rss+xml": ["rss"], "application/rtf": ["rtf"], "application/sbml+xml": ["sbml"], "application/scvp-cv-request": ["scq"], "application/scvp-cv-response": ["scs"], "application/scvp-vp-request": ["spq"], "application/scvp-vp-response": ["spp"], "application/sdp": ["sdp"], "application/senml+xml": ["senmlx"], "application/sensml+xml": ["sensmlx"], "application/set-payment-initiation": ["setpay"], "application/set-registration-initiation": ["setreg"], "application/shf+xml": ["shf"], "application/sieve": ["siv", "sieve"], "application/smil+xml": ["smi", "smil"], "application/sparql-query": ["rq"], "application/sparql-results+xml": ["srx"], "application/srgs": ["gram"], "application/srgs+xml": ["grxml"], "application/sru+xml": ["sru"], "application/ssdl+xml": ["ssdl"], "application/ssml+xml": ["ssml"], "application/swid+xml": ["swidtag"], "application/tei+xml": ["tei", "teicorpus"], "application/thraud+xml": ["tfi"], "application/timestamped-data": ["tsd"], "application/toml": ["toml"], "application/trig": ["trig"], "application/ttml+xml": ["ttml"], "application/ubjson": ["ubj"], "application/urc-ressheet+xml": ["rsheet"], "application/urc-targetdesc+xml": ["td"], "application/voicexml+xml": ["vxml"], "application/wasm": ["wasm"], "application/widget": ["wgt"], "application/winhlp": ["hlp"], "application/wsdl+xml": ["wsdl"], "application/wspolicy+xml": ["wspolicy"], "application/xaml+xml": ["xaml"], "application/xcap-att+xml": ["xav"], "application/xcap-caps+xml": ["xca"], "application/xcap-diff+xml": ["xdf"], "application/xcap-el+xml": ["xel"], "application/xcap-ns+xml": ["xns"], "application/xenc+xml": ["xenc"], "application/xhtml+xml": ["xhtml", "xht"], "application/xliff+xml": ["xlf"], "application/xml": ["xml", "xsl", "xsd", "rng"], "application/xml-dtd": ["dtd"], "application/xop+xml": ["xop"], "application/xproc+xml": ["xpl"], "application/xslt+xml": ["*xsl", "xslt"], "application/xspf+xml": ["xspf"], "application/xv+xml": ["mxml", "xhvml", "xvml", "xvm"], "application/yang": ["yang"], "application/yin+xml": ["yin"], "application/zip": ["zip"], "audio/3gpp": ["*3gpp"], "audio/adpcm": ["adp"], "audio/amr": ["amr"], "audio/basic": ["au", "snd"], "audio/midi": ["mid", "midi", "kar", "rmi"], "audio/mobile-xmf": ["mxmf"], "audio/mp3": ["*mp3"], "audio/mp4": ["m4a", "mp4a"], "audio/mpeg": ["mpga", "mp2", "mp2a", "mp3", "m2a", "m3a"], "audio/ogg": ["oga", "ogg", "spx", "opus"], "audio/s3m": ["s3m"], "audio/silk": ["sil"], "audio/wav": ["wav"], "audio/wave": ["*wav"], "audio/webm": ["weba"], "audio/xm": ["xm"], "font/collection": ["ttc"], "font/otf": ["otf"], "font/ttf": ["ttf"], "font/woff": ["woff"], "font/woff2": ["woff2"], "image/aces": ["exr"], "image/apng": ["apng"], "image/avif": ["avif"], "image/bmp": ["bmp"], "image/cgm": ["cgm"], "image/dicom-rle": ["drle"], "image/emf": ["emf"], "image/fits": ["fits"], "image/g3fax": ["g3"], "image/gif": ["gif"], "image/heic": ["heic"], "image/heic-sequence": ["heics"], "image/heif": ["heif"], "image/heif-sequence": ["heifs"], "image/hej2k": ["hej2"], "image/hsj2": ["hsj2"], "image/ief": ["ief"], "image/jls": ["jls"], "image/jp2": ["jp2", "jpg2"], "image/jpeg": ["jpeg", "jpg", "jpe"], "image/jph": ["jph"], "image/jphc": ["jhc"], "image/jpm": ["jpm"], "image/jpx": ["jpx", "jpf"], "image/jxr": ["jxr"], "image/jxra": ["jxra"], "image/jxrs": ["jxrs"], "image/jxs": ["jxs"], "image/jxsc": ["jxsc"], "image/jxsi": ["jxsi"], "image/jxss": ["jxss"], "image/ktx": ["ktx"], "image/ktx2": ["ktx2"], "image/png": ["png"], "image/sgi": ["sgi"], "image/svg+xml": ["svg", "svgz"], "image/t38": ["t38"], "image/tiff": ["tif", "tiff"], "image/tiff-fx": ["tfx"], "image/webp": ["webp"], "image/wmf": ["wmf"], "message/disposition-notification": ["disposition-notification"], "message/global": ["u8msg"], "message/global-delivery-status": ["u8dsn"], "message/global-disposition-notification": ["u8mdn"], "message/global-headers": ["u8hdr"], "message/rfc822": ["eml", "mime"], "model/3mf": ["3mf"], "model/gltf+json": ["gltf"], "model/gltf-binary": ["glb"], "model/iges": ["igs", "iges"], "model/mesh": ["msh", "mesh", "silo"], "model/mtl": ["mtl"], "model/obj": ["obj"], "model/step+xml": ["stpx"], "model/step+zip": ["stpz"], "model/step-xml+zip": ["stpxz"], "model/stl": ["stl"], "model/vrml": ["wrl", "vrml"], "model/x3d+binary": ["*x3db", "x3dbz"], "model/x3d+fastinfoset": ["x3db"], "model/x3d+vrml": ["*x3dv", "x3dvz"], "model/x3d+xml": ["x3d", "x3dz"], "model/x3d-vrml": ["x3dv"], "text/cache-manifest": ["appcache", "manifest"], "text/calendar": ["ics", "ifb"], "text/coffeescript": ["coffee", "litcoffee"], "text/css": ["css"], "text/csv": ["csv"], "text/html": ["html", "htm", "shtml"], "text/jade": ["jade"], "text/jsx": ["jsx"], "text/less": ["less"], "text/markdown": ["markdown", "md"], "text/mathml": ["mml"], "text/mdx": ["mdx"], "text/n3": ["n3"], "text/plain": ["txt", "text", "conf", "def", "list", "log", "in", "ini"], "text/richtext": ["rtx"], "text/rtf": ["*rtf"], "text/sgml": ["sgml", "sgm"], "text/shex": ["shex"], "text/slim": ["slim", "slm"], "text/spdx": ["spdx"], "text/stylus": ["stylus", "styl"], "text/tab-separated-values": ["tsv"], "text/troff": ["t", "tr", "roff", "man", "me", "ms"], "text/turtle": ["ttl"], "text/uri-list": ["uri", "uris", "urls"], "text/vcard": ["vcard"], "text/vtt": ["vtt"], "text/xml": ["*xml"], "text/yaml": ["yaml", "yml"], "video/3gpp": ["3gp", "3gpp"], "video/3gpp2": ["3g2"], "video/h261": ["h261"], "video/h263": ["h263"], "video/h264": ["h264"], "video/iso.segment": ["m4s"], "video/jpeg": ["jpgv"], "video/jpm": ["*jpm", "jpgm"], "video/mj2": ["mj2", "mjp2"], "video/mp2t": ["ts"], "video/mp4": ["mp4", "mp4v", "mpg4"], "video/mpeg": ["mpeg", "mpg", "mpe", "m1v", "m2v"], "video/ogg": ["ogv"], "video/quicktime": ["qt", "mov"], "video/webm": ["webm"] };
    }
  });

  // node_modules/.pnpm/mime@3.0.0/node_modules/mime/types/other.js
  var require_other = __commonJS({
    "node_modules/.pnpm/mime@3.0.0/node_modules/mime/types/other.js"(exports, module) {
      init_env();
      module.exports = { "application/prs.cww": ["cww"], "application/vnd.1000minds.decision-model+xml": ["1km"], "application/vnd.3gpp.pic-bw-large": ["plb"], "application/vnd.3gpp.pic-bw-small": ["psb"], "application/vnd.3gpp.pic-bw-var": ["pvb"], "application/vnd.3gpp2.tcap": ["tcap"], "application/vnd.3m.post-it-notes": ["pwn"], "application/vnd.accpac.simply.aso": ["aso"], "application/vnd.accpac.simply.imp": ["imp"], "application/vnd.acucobol": ["acu"], "application/vnd.acucorp": ["atc", "acutc"], "application/vnd.adobe.air-application-installer-package+zip": ["air"], "application/vnd.adobe.formscentral.fcdt": ["fcdt"], "application/vnd.adobe.fxp": ["fxp", "fxpl"], "application/vnd.adobe.xdp+xml": ["xdp"], "application/vnd.adobe.xfdf": ["xfdf"], "application/vnd.ahead.space": ["ahead"], "application/vnd.airzip.filesecure.azf": ["azf"], "application/vnd.airzip.filesecure.azs": ["azs"], "application/vnd.amazon.ebook": ["azw"], "application/vnd.americandynamics.acc": ["acc"], "application/vnd.amiga.ami": ["ami"], "application/vnd.android.package-archive": ["apk"], "application/vnd.anser-web-certificate-issue-initiation": ["cii"], "application/vnd.anser-web-funds-transfer-initiation": ["fti"], "application/vnd.antix.game-component": ["atx"], "application/vnd.apple.installer+xml": ["mpkg"], "application/vnd.apple.keynote": ["key"], "application/vnd.apple.mpegurl": ["m3u8"], "application/vnd.apple.numbers": ["numbers"], "application/vnd.apple.pages": ["pages"], "application/vnd.apple.pkpass": ["pkpass"], "application/vnd.aristanetworks.swi": ["swi"], "application/vnd.astraea-software.iota": ["iota"], "application/vnd.audiograph": ["aep"], "application/vnd.balsamiq.bmml+xml": ["bmml"], "application/vnd.blueice.multipass": ["mpm"], "application/vnd.bmi": ["bmi"], "application/vnd.businessobjects": ["rep"], "application/vnd.chemdraw+xml": ["cdxml"], "application/vnd.chipnuts.karaoke-mmd": ["mmd"], "application/vnd.cinderella": ["cdy"], "application/vnd.citationstyles.style+xml": ["csl"], "application/vnd.claymore": ["cla"], "application/vnd.cloanto.rp9": ["rp9"], "application/vnd.clonk.c4group": ["c4g", "c4d", "c4f", "c4p", "c4u"], "application/vnd.cluetrust.cartomobile-config": ["c11amc"], "application/vnd.cluetrust.cartomobile-config-pkg": ["c11amz"], "application/vnd.commonspace": ["csp"], "application/vnd.contact.cmsg": ["cdbcmsg"], "application/vnd.cosmocaller": ["cmc"], "application/vnd.crick.clicker": ["clkx"], "application/vnd.crick.clicker.keyboard": ["clkk"], "application/vnd.crick.clicker.palette": ["clkp"], "application/vnd.crick.clicker.template": ["clkt"], "application/vnd.crick.clicker.wordbank": ["clkw"], "application/vnd.criticaltools.wbs+xml": ["wbs"], "application/vnd.ctc-posml": ["pml"], "application/vnd.cups-ppd": ["ppd"], "application/vnd.curl.car": ["car"], "application/vnd.curl.pcurl": ["pcurl"], "application/vnd.dart": ["dart"], "application/vnd.data-vision.rdz": ["rdz"], "application/vnd.dbf": ["dbf"], "application/vnd.dece.data": ["uvf", "uvvf", "uvd", "uvvd"], "application/vnd.dece.ttml+xml": ["uvt", "uvvt"], "application/vnd.dece.unspecified": ["uvx", "uvvx"], "application/vnd.dece.zip": ["uvz", "uvvz"], "application/vnd.denovo.fcselayout-link": ["fe_launch"], "application/vnd.dna": ["dna"], "application/vnd.dolby.mlp": ["mlp"], "application/vnd.dpgraph": ["dpg"], "application/vnd.dreamfactory": ["dfac"], "application/vnd.ds-keypoint": ["kpxx"], "application/vnd.dvb.ait": ["ait"], "application/vnd.dvb.service": ["svc"], "application/vnd.dynageo": ["geo"], "application/vnd.ecowin.chart": ["mag"], "application/vnd.enliven": ["nml"], "application/vnd.epson.esf": ["esf"], "application/vnd.epson.msf": ["msf"], "application/vnd.epson.quickanime": ["qam"], "application/vnd.epson.salt": ["slt"], "application/vnd.epson.ssf": ["ssf"], "application/vnd.eszigno3+xml": ["es3", "et3"], "application/vnd.ezpix-album": ["ez2"], "application/vnd.ezpix-package": ["ez3"], "application/vnd.fdf": ["fdf"], "application/vnd.fdsn.mseed": ["mseed"], "application/vnd.fdsn.seed": ["seed", "dataless"], "application/vnd.flographit": ["gph"], "application/vnd.fluxtime.clip": ["ftc"], "application/vnd.framemaker": ["fm", "frame", "maker", "book"], "application/vnd.frogans.fnc": ["fnc"], "application/vnd.frogans.ltf": ["ltf"], "application/vnd.fsc.weblaunch": ["fsc"], "application/vnd.fujitsu.oasys": ["oas"], "application/vnd.fujitsu.oasys2": ["oa2"], "application/vnd.fujitsu.oasys3": ["oa3"], "application/vnd.fujitsu.oasysgp": ["fg5"], "application/vnd.fujitsu.oasysprs": ["bh2"], "application/vnd.fujixerox.ddd": ["ddd"], "application/vnd.fujixerox.docuworks": ["xdw"], "application/vnd.fujixerox.docuworks.binder": ["xbd"], "application/vnd.fuzzysheet": ["fzs"], "application/vnd.genomatix.tuxedo": ["txd"], "application/vnd.geogebra.file": ["ggb"], "application/vnd.geogebra.tool": ["ggt"], "application/vnd.geometry-explorer": ["gex", "gre"], "application/vnd.geonext": ["gxt"], "application/vnd.geoplan": ["g2w"], "application/vnd.geospace": ["g3w"], "application/vnd.gmx": ["gmx"], "application/vnd.google-apps.document": ["gdoc"], "application/vnd.google-apps.presentation": ["gslides"], "application/vnd.google-apps.spreadsheet": ["gsheet"], "application/vnd.google-earth.kml+xml": ["kml"], "application/vnd.google-earth.kmz": ["kmz"], "application/vnd.grafeq": ["gqf", "gqs"], "application/vnd.groove-account": ["gac"], "application/vnd.groove-help": ["ghf"], "application/vnd.groove-identity-message": ["gim"], "application/vnd.groove-injector": ["grv"], "application/vnd.groove-tool-message": ["gtm"], "application/vnd.groove-tool-template": ["tpl"], "application/vnd.groove-vcard": ["vcg"], "application/vnd.hal+xml": ["hal"], "application/vnd.handheld-entertainment+xml": ["zmm"], "application/vnd.hbci": ["hbci"], "application/vnd.hhe.lesson-player": ["les"], "application/vnd.hp-hpgl": ["hpgl"], "application/vnd.hp-hpid": ["hpid"], "application/vnd.hp-hps": ["hps"], "application/vnd.hp-jlyt": ["jlt"], "application/vnd.hp-pcl": ["pcl"], "application/vnd.hp-pclxl": ["pclxl"], "application/vnd.hydrostatix.sof-data": ["sfd-hdstx"], "application/vnd.ibm.minipay": ["mpy"], "application/vnd.ibm.modcap": ["afp", "listafp", "list3820"], "application/vnd.ibm.rights-management": ["irm"], "application/vnd.ibm.secure-container": ["sc"], "application/vnd.iccprofile": ["icc", "icm"], "application/vnd.igloader": ["igl"], "application/vnd.immervision-ivp": ["ivp"], "application/vnd.immervision-ivu": ["ivu"], "application/vnd.insors.igm": ["igm"], "application/vnd.intercon.formnet": ["xpw", "xpx"], "application/vnd.intergeo": ["i2g"], "application/vnd.intu.qbo": ["qbo"], "application/vnd.intu.qfx": ["qfx"], "application/vnd.ipunplugged.rcprofile": ["rcprofile"], "application/vnd.irepository.package+xml": ["irp"], "application/vnd.is-xpr": ["xpr"], "application/vnd.isac.fcs": ["fcs"], "application/vnd.jam": ["jam"], "application/vnd.jcp.javame.midlet-rms": ["rms"], "application/vnd.jisp": ["jisp"], "application/vnd.joost.joda-archive": ["joda"], "application/vnd.kahootz": ["ktz", "ktr"], "application/vnd.kde.karbon": ["karbon"], "application/vnd.kde.kchart": ["chrt"], "application/vnd.kde.kformula": ["kfo"], "application/vnd.kde.kivio": ["flw"], "application/vnd.kde.kontour": ["kon"], "application/vnd.kde.kpresenter": ["kpr", "kpt"], "application/vnd.kde.kspread": ["ksp"], "application/vnd.kde.kword": ["kwd", "kwt"], "application/vnd.kenameaapp": ["htke"], "application/vnd.kidspiration": ["kia"], "application/vnd.kinar": ["kne", "knp"], "application/vnd.koan": ["skp", "skd", "skt", "skm"], "application/vnd.kodak-descriptor": ["sse"], "application/vnd.las.las+xml": ["lasxml"], "application/vnd.llamagraphics.life-balance.desktop": ["lbd"], "application/vnd.llamagraphics.life-balance.exchange+xml": ["lbe"], "application/vnd.lotus-1-2-3": ["123"], "application/vnd.lotus-approach": ["apr"], "application/vnd.lotus-freelance": ["pre"], "application/vnd.lotus-notes": ["nsf"], "application/vnd.lotus-organizer": ["org"], "application/vnd.lotus-screencam": ["scm"], "application/vnd.lotus-wordpro": ["lwp"], "application/vnd.macports.portpkg": ["portpkg"], "application/vnd.mapbox-vector-tile": ["mvt"], "application/vnd.mcd": ["mcd"], "application/vnd.medcalcdata": ["mc1"], "application/vnd.mediastation.cdkey": ["cdkey"], "application/vnd.mfer": ["mwf"], "application/vnd.mfmp": ["mfm"], "application/vnd.micrografx.flo": ["flo"], "application/vnd.micrografx.igx": ["igx"], "application/vnd.mif": ["mif"], "application/vnd.mobius.daf": ["daf"], "application/vnd.mobius.dis": ["dis"], "application/vnd.mobius.mbk": ["mbk"], "application/vnd.mobius.mqy": ["mqy"], "application/vnd.mobius.msl": ["msl"], "application/vnd.mobius.plc": ["plc"], "application/vnd.mobius.txf": ["txf"], "application/vnd.mophun.application": ["mpn"], "application/vnd.mophun.certificate": ["mpc"], "application/vnd.mozilla.xul+xml": ["xul"], "application/vnd.ms-artgalry": ["cil"], "application/vnd.ms-cab-compressed": ["cab"], "application/vnd.ms-excel": ["xls", "xlm", "xla", "xlc", "xlt", "xlw"], "application/vnd.ms-excel.addin.macroenabled.12": ["xlam"], "application/vnd.ms-excel.sheet.binary.macroenabled.12": ["xlsb"], "application/vnd.ms-excel.sheet.macroenabled.12": ["xlsm"], "application/vnd.ms-excel.template.macroenabled.12": ["xltm"], "application/vnd.ms-fontobject": ["eot"], "application/vnd.ms-htmlhelp": ["chm"], "application/vnd.ms-ims": ["ims"], "application/vnd.ms-lrm": ["lrm"], "application/vnd.ms-officetheme": ["thmx"], "application/vnd.ms-outlook": ["msg"], "application/vnd.ms-pki.seccat": ["cat"], "application/vnd.ms-pki.stl": ["*stl"], "application/vnd.ms-powerpoint": ["ppt", "pps", "pot"], "application/vnd.ms-powerpoint.addin.macroenabled.12": ["ppam"], "application/vnd.ms-powerpoint.presentation.macroenabled.12": ["pptm"], "application/vnd.ms-powerpoint.slide.macroenabled.12": ["sldm"], "application/vnd.ms-powerpoint.slideshow.macroenabled.12": ["ppsm"], "application/vnd.ms-powerpoint.template.macroenabled.12": ["potm"], "application/vnd.ms-project": ["mpp", "mpt"], "application/vnd.ms-word.document.macroenabled.12": ["docm"], "application/vnd.ms-word.template.macroenabled.12": ["dotm"], "application/vnd.ms-works": ["wps", "wks", "wcm", "wdb"], "application/vnd.ms-wpl": ["wpl"], "application/vnd.ms-xpsdocument": ["xps"], "application/vnd.mseq": ["mseq"], "application/vnd.musician": ["mus"], "application/vnd.muvee.style": ["msty"], "application/vnd.mynfc": ["taglet"], "application/vnd.neurolanguage.nlu": ["nlu"], "application/vnd.nitf": ["ntf", "nitf"], "application/vnd.noblenet-directory": ["nnd"], "application/vnd.noblenet-sealer": ["nns"], "application/vnd.noblenet-web": ["nnw"], "application/vnd.nokia.n-gage.ac+xml": ["*ac"], "application/vnd.nokia.n-gage.data": ["ngdat"], "application/vnd.nokia.n-gage.symbian.install": ["n-gage"], "application/vnd.nokia.radio-preset": ["rpst"], "application/vnd.nokia.radio-presets": ["rpss"], "application/vnd.novadigm.edm": ["edm"], "application/vnd.novadigm.edx": ["edx"], "application/vnd.novadigm.ext": ["ext"], "application/vnd.oasis.opendocument.chart": ["odc"], "application/vnd.oasis.opendocument.chart-template": ["otc"], "application/vnd.oasis.opendocument.database": ["odb"], "application/vnd.oasis.opendocument.formula": ["odf"], "application/vnd.oasis.opendocument.formula-template": ["odft"], "application/vnd.oasis.opendocument.graphics": ["odg"], "application/vnd.oasis.opendocument.graphics-template": ["otg"], "application/vnd.oasis.opendocument.image": ["odi"], "application/vnd.oasis.opendocument.image-template": ["oti"], "application/vnd.oasis.opendocument.presentation": ["odp"], "application/vnd.oasis.opendocument.presentation-template": ["otp"], "application/vnd.oasis.opendocument.spreadsheet": ["ods"], "application/vnd.oasis.opendocument.spreadsheet-template": ["ots"], "application/vnd.oasis.opendocument.text": ["odt"], "application/vnd.oasis.opendocument.text-master": ["odm"], "application/vnd.oasis.opendocument.text-template": ["ott"], "application/vnd.oasis.opendocument.text-web": ["oth"], "application/vnd.olpc-sugar": ["xo"], "application/vnd.oma.dd2+xml": ["dd2"], "application/vnd.openblox.game+xml": ["obgx"], "application/vnd.openofficeorg.extension": ["oxt"], "application/vnd.openstreetmap.data+xml": ["osm"], "application/vnd.openxmlformats-officedocument.presentationml.presentation": ["pptx"], "application/vnd.openxmlformats-officedocument.presentationml.slide": ["sldx"], "application/vnd.openxmlformats-officedocument.presentationml.slideshow": ["ppsx"], "application/vnd.openxmlformats-officedocument.presentationml.template": ["potx"], "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet": ["xlsx"], "application/vnd.openxmlformats-officedocument.spreadsheetml.template": ["xltx"], "application/vnd.openxmlformats-officedocument.wordprocessingml.document": ["docx"], "application/vnd.openxmlformats-officedocument.wordprocessingml.template": ["dotx"], "application/vnd.osgeo.mapguide.package": ["mgp"], "application/vnd.osgi.dp": ["dp"], "application/vnd.osgi.subsystem": ["esa"], "application/vnd.palm": ["pdb", "pqa", "oprc"], "application/vnd.pawaafile": ["paw"], "application/vnd.pg.format": ["str"], "application/vnd.pg.osasli": ["ei6"], "application/vnd.picsel": ["efif"], "application/vnd.pmi.widget": ["wg"], "application/vnd.pocketlearn": ["plf"], "application/vnd.powerbuilder6": ["pbd"], "application/vnd.previewsystems.box": ["box"], "application/vnd.proteus.magazine": ["mgz"], "application/vnd.publishare-delta-tree": ["qps"], "application/vnd.pvi.ptid1": ["ptid"], "application/vnd.quark.quarkxpress": ["qxd", "qxt", "qwd", "qwt", "qxl", "qxb"], "application/vnd.rar": ["rar"], "application/vnd.realvnc.bed": ["bed"], "application/vnd.recordare.musicxml": ["mxl"], "application/vnd.recordare.musicxml+xml": ["musicxml"], "application/vnd.rig.cryptonote": ["cryptonote"], "application/vnd.rim.cod": ["cod"], "application/vnd.rn-realmedia": ["rm"], "application/vnd.rn-realmedia-vbr": ["rmvb"], "application/vnd.route66.link66+xml": ["link66"], "application/vnd.sailingtracker.track": ["st"], "application/vnd.seemail": ["see"], "application/vnd.sema": ["sema"], "application/vnd.semd": ["semd"], "application/vnd.semf": ["semf"], "application/vnd.shana.informed.formdata": ["ifm"], "application/vnd.shana.informed.formtemplate": ["itp"], "application/vnd.shana.informed.interchange": ["iif"], "application/vnd.shana.informed.package": ["ipk"], "application/vnd.simtech-mindmapper": ["twd", "twds"], "application/vnd.smaf": ["mmf"], "application/vnd.smart.teacher": ["teacher"], "application/vnd.software602.filler.form+xml": ["fo"], "application/vnd.solent.sdkm+xml": ["sdkm", "sdkd"], "application/vnd.spotfire.dxp": ["dxp"], "application/vnd.spotfire.sfs": ["sfs"], "application/vnd.stardivision.calc": ["sdc"], "application/vnd.stardivision.draw": ["sda"], "application/vnd.stardivision.impress": ["sdd"], "application/vnd.stardivision.math": ["smf"], "application/vnd.stardivision.writer": ["sdw", "vor"], "application/vnd.stardivision.writer-global": ["sgl"], "application/vnd.stepmania.package": ["smzip"], "application/vnd.stepmania.stepchart": ["sm"], "application/vnd.sun.wadl+xml": ["wadl"], "application/vnd.sun.xml.calc": ["sxc"], "application/vnd.sun.xml.calc.template": ["stc"], "application/vnd.sun.xml.draw": ["sxd"], "application/vnd.sun.xml.draw.template": ["std"], "application/vnd.sun.xml.impress": ["sxi"], "application/vnd.sun.xml.impress.template": ["sti"], "application/vnd.sun.xml.math": ["sxm"], "application/vnd.sun.xml.writer": ["sxw"], "application/vnd.sun.xml.writer.global": ["sxg"], "application/vnd.sun.xml.writer.template": ["stw"], "application/vnd.sus-calendar": ["sus", "susp"], "application/vnd.svd": ["svd"], "application/vnd.symbian.install": ["sis", "sisx"], "application/vnd.syncml+xml": ["xsm"], "application/vnd.syncml.dm+wbxml": ["bdm"], "application/vnd.syncml.dm+xml": ["xdm"], "application/vnd.syncml.dmddf+xml": ["ddf"], "application/vnd.tao.intent-module-archive": ["tao"], "application/vnd.tcpdump.pcap": ["pcap", "cap", "dmp"], "application/vnd.tmobile-livetv": ["tmo"], "application/vnd.trid.tpt": ["tpt"], "application/vnd.triscape.mxs": ["mxs"], "application/vnd.trueapp": ["tra"], "application/vnd.ufdl": ["ufd", "ufdl"], "application/vnd.uiq.theme": ["utz"], "application/vnd.umajin": ["umj"], "application/vnd.unity": ["unityweb"], "application/vnd.uoml+xml": ["uoml"], "application/vnd.vcx": ["vcx"], "application/vnd.visio": ["vsd", "vst", "vss", "vsw"], "application/vnd.visionary": ["vis"], "application/vnd.vsf": ["vsf"], "application/vnd.wap.wbxml": ["wbxml"], "application/vnd.wap.wmlc": ["wmlc"], "application/vnd.wap.wmlscriptc": ["wmlsc"], "application/vnd.webturbo": ["wtb"], "application/vnd.wolfram.player": ["nbp"], "application/vnd.wordperfect": ["wpd"], "application/vnd.wqd": ["wqd"], "application/vnd.wt.stf": ["stf"], "application/vnd.xara": ["xar"], "application/vnd.xfdl": ["xfdl"], "application/vnd.yamaha.hv-dic": ["hvd"], "application/vnd.yamaha.hv-script": ["hvs"], "application/vnd.yamaha.hv-voice": ["hvp"], "application/vnd.yamaha.openscoreformat": ["osf"], "application/vnd.yamaha.openscoreformat.osfpvg+xml": ["osfpvg"], "application/vnd.yamaha.smaf-audio": ["saf"], "application/vnd.yamaha.smaf-phrase": ["spf"], "application/vnd.yellowriver-custom-menu": ["cmp"], "application/vnd.zul": ["zir", "zirz"], "application/vnd.zzazz.deck+xml": ["zaz"], "application/x-7z-compressed": ["7z"], "application/x-abiword": ["abw"], "application/x-ace-compressed": ["ace"], "application/x-apple-diskimage": ["*dmg"], "application/x-arj": ["arj"], "application/x-authorware-bin": ["aab", "x32", "u32", "vox"], "application/x-authorware-map": ["aam"], "application/x-authorware-seg": ["aas"], "application/x-bcpio": ["bcpio"], "application/x-bdoc": ["*bdoc"], "application/x-bittorrent": ["torrent"], "application/x-blorb": ["blb", "blorb"], "application/x-bzip": ["bz"], "application/x-bzip2": ["bz2", "boz"], "application/x-cbr": ["cbr", "cba", "cbt", "cbz", "cb7"], "application/x-cdlink": ["vcd"], "application/x-cfs-compressed": ["cfs"], "application/x-chat": ["chat"], "application/x-chess-pgn": ["pgn"], "application/x-chrome-extension": ["crx"], "application/x-cocoa": ["cco"], "application/x-conference": ["nsc"], "application/x-cpio": ["cpio"], "application/x-csh": ["csh"], "application/x-debian-package": ["*deb", "udeb"], "application/x-dgc-compressed": ["dgc"], "application/x-director": ["dir", "dcr", "dxr", "cst", "cct", "cxt", "w3d", "fgd", "swa"], "application/x-doom": ["wad"], "application/x-dtbncx+xml": ["ncx"], "application/x-dtbook+xml": ["dtb"], "application/x-dtbresource+xml": ["res"], "application/x-dvi": ["dvi"], "application/x-envoy": ["evy"], "application/x-eva": ["eva"], "application/x-font-bdf": ["bdf"], "application/x-font-ghostscript": ["gsf"], "application/x-font-linux-psf": ["psf"], "application/x-font-pcf": ["pcf"], "application/x-font-snf": ["snf"], "application/x-font-type1": ["pfa", "pfb", "pfm", "afm"], "application/x-freearc": ["arc"], "application/x-futuresplash": ["spl"], "application/x-gca-compressed": ["gca"], "application/x-glulx": ["ulx"], "application/x-gnumeric": ["gnumeric"], "application/x-gramps-xml": ["gramps"], "application/x-gtar": ["gtar"], "application/x-hdf": ["hdf"], "application/x-httpd-php": ["php"], "application/x-install-instructions": ["install"], "application/x-iso9660-image": ["*iso"], "application/x-iwork-keynote-sffkey": ["*key"], "application/x-iwork-numbers-sffnumbers": ["*numbers"], "application/x-iwork-pages-sffpages": ["*pages"], "application/x-java-archive-diff": ["jardiff"], "application/x-java-jnlp-file": ["jnlp"], "application/x-keepass2": ["kdbx"], "application/x-latex": ["latex"], "application/x-lua-bytecode": ["luac"], "application/x-lzh-compressed": ["lzh", "lha"], "application/x-makeself": ["run"], "application/x-mie": ["mie"], "application/x-mobipocket-ebook": ["prc", "mobi"], "application/x-ms-application": ["application"], "application/x-ms-shortcut": ["lnk"], "application/x-ms-wmd": ["wmd"], "application/x-ms-wmz": ["wmz"], "application/x-ms-xbap": ["xbap"], "application/x-msaccess": ["mdb"], "application/x-msbinder": ["obd"], "application/x-mscardfile": ["crd"], "application/x-msclip": ["clp"], "application/x-msdos-program": ["*exe"], "application/x-msdownload": ["*exe", "*dll", "com", "bat", "*msi"], "application/x-msmediaview": ["mvb", "m13", "m14"], "application/x-msmetafile": ["*wmf", "*wmz", "*emf", "emz"], "application/x-msmoney": ["mny"], "application/x-mspublisher": ["pub"], "application/x-msschedule": ["scd"], "application/x-msterminal": ["trm"], "application/x-mswrite": ["wri"], "application/x-netcdf": ["nc", "cdf"], "application/x-ns-proxy-autoconfig": ["pac"], "application/x-nzb": ["nzb"], "application/x-perl": ["pl", "pm"], "application/x-pilot": ["*prc", "*pdb"], "application/x-pkcs12": ["p12", "pfx"], "application/x-pkcs7-certificates": ["p7b", "spc"], "application/x-pkcs7-certreqresp": ["p7r"], "application/x-rar-compressed": ["*rar"], "application/x-redhat-package-manager": ["rpm"], "application/x-research-info-systems": ["ris"], "application/x-sea": ["sea"], "application/x-sh": ["sh"], "application/x-shar": ["shar"], "application/x-shockwave-flash": ["swf"], "application/x-silverlight-app": ["xap"], "application/x-sql": ["sql"], "application/x-stuffit": ["sit"], "application/x-stuffitx": ["sitx"], "application/x-subrip": ["srt"], "application/x-sv4cpio": ["sv4cpio"], "application/x-sv4crc": ["sv4crc"], "application/x-t3vm-image": ["t3"], "application/x-tads": ["gam"], "application/x-tar": ["tar"], "application/x-tcl": ["tcl", "tk"], "application/x-tex": ["tex"], "application/x-tex-tfm": ["tfm"], "application/x-texinfo": ["texinfo", "texi"], "application/x-tgif": ["*obj"], "application/x-ustar": ["ustar"], "application/x-virtualbox-hdd": ["hdd"], "application/x-virtualbox-ova": ["ova"], "application/x-virtualbox-ovf": ["ovf"], "application/x-virtualbox-vbox": ["vbox"], "application/x-virtualbox-vbox-extpack": ["vbox-extpack"], "application/x-virtualbox-vdi": ["vdi"], "application/x-virtualbox-vhd": ["vhd"], "application/x-virtualbox-vmdk": ["vmdk"], "application/x-wais-source": ["src"], "application/x-web-app-manifest+json": ["webapp"], "application/x-x509-ca-cert": ["der", "crt", "pem"], "application/x-xfig": ["fig"], "application/x-xliff+xml": ["*xlf"], "application/x-xpinstall": ["xpi"], "application/x-xz": ["xz"], "application/x-zmachine": ["z1", "z2", "z3", "z4", "z5", "z6", "z7", "z8"], "audio/vnd.dece.audio": ["uva", "uvva"], "audio/vnd.digital-winds": ["eol"], "audio/vnd.dra": ["dra"], "audio/vnd.dts": ["dts"], "audio/vnd.dts.hd": ["dtshd"], "audio/vnd.lucent.voice": ["lvp"], "audio/vnd.ms-playready.media.pya": ["pya"], "audio/vnd.nuera.ecelp4800": ["ecelp4800"], "audio/vnd.nuera.ecelp7470": ["ecelp7470"], "audio/vnd.nuera.ecelp9600": ["ecelp9600"], "audio/vnd.rip": ["rip"], "audio/x-aac": ["aac"], "audio/x-aiff": ["aif", "aiff", "aifc"], "audio/x-caf": ["caf"], "audio/x-flac": ["flac"], "audio/x-m4a": ["*m4a"], "audio/x-matroska": ["mka"], "audio/x-mpegurl": ["m3u"], "audio/x-ms-wax": ["wax"], "audio/x-ms-wma": ["wma"], "audio/x-pn-realaudio": ["ram", "ra"], "audio/x-pn-realaudio-plugin": ["rmp"], "audio/x-realaudio": ["*ra"], "audio/x-wav": ["*wav"], "chemical/x-cdx": ["cdx"], "chemical/x-cif": ["cif"], "chemical/x-cmdf": ["cmdf"], "chemical/x-cml": ["cml"], "chemical/x-csml": ["csml"], "chemical/x-xyz": ["xyz"], "image/prs.btif": ["btif"], "image/prs.pti": ["pti"], "image/vnd.adobe.photoshop": ["psd"], "image/vnd.airzip.accelerator.azv": ["azv"], "image/vnd.dece.graphic": ["uvi", "uvvi", "uvg", "uvvg"], "image/vnd.djvu": ["djvu", "djv"], "image/vnd.dvb.subtitle": ["*sub"], "image/vnd.dwg": ["dwg"], "image/vnd.dxf": ["dxf"], "image/vnd.fastbidsheet": ["fbs"], "image/vnd.fpx": ["fpx"], "image/vnd.fst": ["fst"], "image/vnd.fujixerox.edmics-mmr": ["mmr"], "image/vnd.fujixerox.edmics-rlc": ["rlc"], "image/vnd.microsoft.icon": ["ico"], "image/vnd.ms-dds": ["dds"], "image/vnd.ms-modi": ["mdi"], "image/vnd.ms-photo": ["wdp"], "image/vnd.net-fpx": ["npx"], "image/vnd.pco.b16": ["b16"], "image/vnd.tencent.tap": ["tap"], "image/vnd.valve.source.texture": ["vtf"], "image/vnd.wap.wbmp": ["wbmp"], "image/vnd.xiff": ["xif"], "image/vnd.zbrush.pcx": ["pcx"], "image/x-3ds": ["3ds"], "image/x-cmu-raster": ["ras"], "image/x-cmx": ["cmx"], "image/x-freehand": ["fh", "fhc", "fh4", "fh5", "fh7"], "image/x-icon": ["*ico"], "image/x-jng": ["jng"], "image/x-mrsid-image": ["sid"], "image/x-ms-bmp": ["*bmp"], "image/x-pcx": ["*pcx"], "image/x-pict": ["pic", "pct"], "image/x-portable-anymap": ["pnm"], "image/x-portable-bitmap": ["pbm"], "image/x-portable-graymap": ["pgm"], "image/x-portable-pixmap": ["ppm"], "image/x-rgb": ["rgb"], "image/x-tga": ["tga"], "image/x-xbitmap": ["xbm"], "image/x-xpixmap": ["xpm"], "image/x-xwindowdump": ["xwd"], "message/vnd.wfa.wsc": ["wsc"], "model/vnd.collada+xml": ["dae"], "model/vnd.dwf": ["dwf"], "model/vnd.gdl": ["gdl"], "model/vnd.gtw": ["gtw"], "model/vnd.mts": ["mts"], "model/vnd.opengex": ["ogex"], "model/vnd.parasolid.transmit.binary": ["x_b"], "model/vnd.parasolid.transmit.text": ["x_t"], "model/vnd.sap.vds": ["vds"], "model/vnd.usdz+zip": ["usdz"], "model/vnd.valve.source.compiled-map": ["bsp"], "model/vnd.vtu": ["vtu"], "text/prs.lines.tag": ["dsc"], "text/vnd.curl": ["curl"], "text/vnd.curl.dcurl": ["dcurl"], "text/vnd.curl.mcurl": ["mcurl"], "text/vnd.curl.scurl": ["scurl"], "text/vnd.dvb.subtitle": ["sub"], "text/vnd.fly": ["fly"], "text/vnd.fmi.flexstor": ["flx"], "text/vnd.graphviz": ["gv"], "text/vnd.in3d.3dml": ["3dml"], "text/vnd.in3d.spot": ["spot"], "text/vnd.sun.j2me.app-descriptor": ["jad"], "text/vnd.wap.wml": ["wml"], "text/vnd.wap.wmlscript": ["wmls"], "text/x-asm": ["s", "asm"], "text/x-c": ["c", "cc", "cxx", "cpp", "h", "hh", "dic"], "text/x-component": ["htc"], "text/x-fortran": ["f", "for", "f77", "f90"], "text/x-handlebars-template": ["hbs"], "text/x-java-source": ["java"], "text/x-lua": ["lua"], "text/x-markdown": ["mkd"], "text/x-nfo": ["nfo"], "text/x-opml": ["opml"], "text/x-org": ["*org"], "text/x-pascal": ["p", "pas"], "text/x-processing": ["pde"], "text/x-sass": ["sass"], "text/x-scss": ["scss"], "text/x-setext": ["etx"], "text/x-sfv": ["sfv"], "text/x-suse-ymp": ["ymp"], "text/x-uuencode": ["uu"], "text/x-vcalendar": ["vcs"], "text/x-vcard": ["vcf"], "video/vnd.dece.hd": ["uvh", "uvvh"], "video/vnd.dece.mobile": ["uvm", "uvvm"], "video/vnd.dece.pd": ["uvp", "uvvp"], "video/vnd.dece.sd": ["uvs", "uvvs"], "video/vnd.dece.video": ["uvv", "uvvv"], "video/vnd.dvb.file": ["dvb"], "video/vnd.fvt": ["fvt"], "video/vnd.mpegurl": ["mxu", "m4u"], "video/vnd.ms-playready.media.pyv": ["pyv"], "video/vnd.uvvu.mp4": ["uvu", "uvvu"], "video/vnd.vivo": ["viv"], "video/x-f4v": ["f4v"], "video/x-fli": ["fli"], "video/x-flv": ["flv"], "video/x-m4v": ["m4v"], "video/x-matroska": ["mkv", "mk3d", "mks"], "video/x-mng": ["mng"], "video/x-ms-asf": ["asf", "asx"], "video/x-ms-vob": ["vob"], "video/x-ms-wm": ["wm"], "video/x-ms-wmv": ["wmv"], "video/x-ms-wmx": ["wmx"], "video/x-ms-wvx": ["wvx"], "video/x-msvideo": ["avi"], "video/x-sgi-movie": ["movie"], "video/x-smv": ["smv"], "x-conference/x-cooltalk": ["ice"] };
    }
  });

  // node_modules/.pnpm/mime@3.0.0/node_modules/mime/index.js
  var require_mime = __commonJS({
    "node_modules/.pnpm/mime@3.0.0/node_modules/mime/index.js"(exports, module) {
      "use strict";
      init_env();
      var Mime2 = require_Mime();
      module.exports = new Mime2(require_standard(), require_other());
    }
  });

  // node_modules/.pnpm/@cloudflare+kv-asset-handler@0.2.0/node_modules/@cloudflare/kv-asset-handler/dist/types.js
  var require_types = __commonJS({
    "node_modules/.pnpm/@cloudflare+kv-asset-handler@0.2.0/node_modules/@cloudflare/kv-asset-handler/dist/types.js"(exports) {
      "use strict";
      init_env();
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.InternalError = exports.NotFoundError = exports.MethodNotAllowedError = exports.KVError = void 0;
      var KVError = class extends Error {
        constructor(message, status = 500) {
          super(message);
          Object.setPrototypeOf(this, new.target.prototype);
          this.name = KVError.name;
          this.status = status;
        }
      };
      exports.KVError = KVError;
      var MethodNotAllowedError = class extends KVError {
        constructor(message = `Not a valid request method`, status = 405) {
          super(message, status);
        }
      };
      exports.MethodNotAllowedError = MethodNotAllowedError;
      var NotFoundError = class extends KVError {
        constructor(message = `Not Found`, status = 404) {
          super(message, status);
        }
      };
      exports.NotFoundError = NotFoundError;
      var InternalError = class extends KVError {
        constructor(message = `Internal Error in KV Asset Handler`, status = 500) {
          super(message, status);
        }
      };
      exports.InternalError = InternalError;
    }
  });

  // node_modules/.pnpm/@cloudflare+kv-asset-handler@0.2.0/node_modules/@cloudflare/kv-asset-handler/dist/index.js
  var require_dist = __commonJS({
    "node_modules/.pnpm/@cloudflare+kv-asset-handler@0.2.0/node_modules/@cloudflare/kv-asset-handler/dist/index.js"(exports) {
      "use strict";
      init_env();
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.InternalError = exports.NotFoundError = exports.MethodNotAllowedError = exports.serveSinglePageApp = exports.mapRequestToAsset = exports.getAssetFromKV = void 0;
      var mime = require_mime();
      var types_1 = require_types();
      Object.defineProperty(exports, "MethodNotAllowedError", { enumerable: true, get: function() {
        return types_1.MethodNotAllowedError;
      } });
      Object.defineProperty(exports, "NotFoundError", { enumerable: true, get: function() {
        return types_1.NotFoundError;
      } });
      Object.defineProperty(exports, "InternalError", { enumerable: true, get: function() {
        return types_1.InternalError;
      } });
      var defaultCacheControl = {
        browserTTL: null,
        edgeTTL: 2 * 60 * 60 * 24,
        bypassCache: false
      };
      var parseStringAsObject = (maybeString) => typeof maybeString === "string" ? JSON.parse(maybeString) : maybeString;
      var getAssetFromKVDefaultOptions = {
        ASSET_NAMESPACE: typeof __STATIC_CONTENT !== "undefined" ? __STATIC_CONTENT : void 0,
        ASSET_MANIFEST: typeof __STATIC_CONTENT_MANIFEST !== "undefined" ? parseStringAsObject(__STATIC_CONTENT_MANIFEST) : {},
        cacheControl: defaultCacheControl,
        defaultMimeType: "text/plain",
        defaultDocument: "index.html",
        pathIsEncoded: false
      };
      function assignOptions(options) {
        return Object.assign({}, getAssetFromKVDefaultOptions, options);
      }
      var mapRequestToAsset2 = (request, options) => {
        options = assignOptions(options);
        const parsedUrl = new URL(request.url);
        let pathname = parsedUrl.pathname;
        if (pathname.endsWith("/")) {
          pathname = pathname.concat(options.defaultDocument);
        } else if (!mime.getType(pathname)) {
          pathname = pathname.concat("/" + options.defaultDocument);
        }
        parsedUrl.pathname = pathname;
        return new Request(parsedUrl.toString(), request);
      };
      exports.mapRequestToAsset = mapRequestToAsset2;
      function serveSinglePageApp(request, options) {
        options = assignOptions(options);
        request = mapRequestToAsset2(request, options);
        const parsedUrl = new URL(request.url);
        if (parsedUrl.pathname.endsWith(".html")) {
          return new Request(`${parsedUrl.origin}/${options.defaultDocument}`, request);
        } else {
          return request;
        }
      }
      exports.serveSinglePageApp = serveSinglePageApp;
      var getAssetFromKV2 = async (event, options) => {
        options = assignOptions(options);
        const request = event.request;
        const ASSET_NAMESPACE = options.ASSET_NAMESPACE;
        const ASSET_MANIFEST = parseStringAsObject(options.ASSET_MANIFEST);
        if (typeof ASSET_NAMESPACE === "undefined") {
          throw new types_1.InternalError(`there is no KV namespace bound to the script`);
        }
        const rawPathKey = new URL(request.url).pathname.replace(/^\/+/, "");
        let pathIsEncoded = options.pathIsEncoded;
        let requestKey;
        if (options.mapRequestToAsset) {
          requestKey = options.mapRequestToAsset(request);
        } else if (ASSET_MANIFEST[rawPathKey]) {
          requestKey = request;
        } else if (ASSET_MANIFEST[decodeURIComponent(rawPathKey)]) {
          pathIsEncoded = true;
          requestKey = request;
        } else {
          const mappedRequest = mapRequestToAsset2(request);
          const mappedRawPathKey = new URL(mappedRequest.url).pathname.replace(/^\/+/, "");
          if (ASSET_MANIFEST[decodeURIComponent(mappedRawPathKey)]) {
            pathIsEncoded = true;
            requestKey = mappedRequest;
          } else {
            requestKey = mapRequestToAsset2(request, options);
          }
        }
        const SUPPORTED_METHODS = ["GET", "HEAD"];
        if (!SUPPORTED_METHODS.includes(requestKey.method)) {
          throw new types_1.MethodNotAllowedError(`${requestKey.method} is not a valid request method`);
        }
        const parsedUrl = new URL(requestKey.url);
        const pathname = pathIsEncoded ? decodeURIComponent(parsedUrl.pathname) : parsedUrl.pathname;
        let pathKey = pathname.replace(/^\/+/, "");
        const cache = caches.default;
        let mimeType = mime.getType(pathKey) || options.defaultMimeType;
        if (mimeType.startsWith("text") || mimeType === "application/javascript") {
          mimeType += "; charset=utf-8";
        }
        let shouldEdgeCache = false;
        if (typeof ASSET_MANIFEST !== "undefined") {
          if (ASSET_MANIFEST[pathKey]) {
            pathKey = ASSET_MANIFEST[pathKey];
            shouldEdgeCache = true;
          }
        }
        let cacheKey = new Request(`${parsedUrl.origin}/${pathKey}`, request);
        const evalCacheOpts = (() => {
          switch (typeof options.cacheControl) {
            case "function":
              return options.cacheControl(request);
            case "object":
              return options.cacheControl;
            default:
              return defaultCacheControl;
          }
        })();
        const formatETag = (entityId = pathKey, validatorType = "strong") => {
          if (!entityId) {
            return "";
          }
          switch (validatorType) {
            case "weak":
              if (!entityId.startsWith("W/")) {
                return `W/${entityId}`;
              }
              return entityId;
            case "strong":
              if (entityId.startsWith(`W/"`)) {
                entityId = entityId.replace("W/", "");
              }
              if (!entityId.endsWith(`"`)) {
                entityId = `"${entityId}"`;
              }
              return entityId;
            default:
              return "";
          }
        };
        options.cacheControl = Object.assign({}, defaultCacheControl, evalCacheOpts);
        if (options.cacheControl.bypassCache || options.cacheControl.edgeTTL === null || request.method == "HEAD") {
          shouldEdgeCache = false;
        }
        const shouldSetBrowserCache = typeof options.cacheControl.browserTTL === "number";
        let response = null;
        if (shouldEdgeCache) {
          response = await cache.match(cacheKey);
        }
        if (response) {
          if (response.status > 300 && response.status < 400) {
            if (response.body && "cancel" in Object.getPrototypeOf(response.body)) {
              response.body.cancel();
            } else {
            }
            response = new Response(null, response);
          } else {
            let opts = {
              headers: new Headers(response.headers),
              status: 0,
              statusText: ""
            };
            opts.headers.set("cf-cache-status", "HIT");
            if (response.status) {
              opts.status = response.status;
              opts.statusText = response.statusText;
            } else if (opts.headers.has("Content-Range")) {
              opts.status = 206;
              opts.statusText = "Partial Content";
            } else {
              opts.status = 200;
              opts.statusText = "OK";
            }
            response = new Response(response.body, opts);
          }
        } else {
          const body = await ASSET_NAMESPACE.get(pathKey, "arrayBuffer");
          if (body === null) {
            throw new types_1.NotFoundError(`could not find ${pathKey} in your content namespace`);
          }
          response = new Response(body);
          if (shouldEdgeCache) {
            response.headers.set("Accept-Ranges", "bytes");
            response.headers.set("Content-Length", body.length);
            if (!response.headers.has("etag")) {
              response.headers.set("etag", formatETag(pathKey, "strong"));
            }
            response.headers.set("Cache-Control", `max-age=${options.cacheControl.edgeTTL}`);
            event.waitUntil(cache.put(cacheKey, response.clone()));
            response.headers.set("CF-Cache-Status", "MISS");
          }
        }
        response.headers.set("Content-Type", mimeType);
        if (response.status === 304) {
          let etag = formatETag(response.headers.get("etag"), "strong");
          let ifNoneMatch = cacheKey.headers.get("if-none-match");
          let proxyCacheStatus = response.headers.get("CF-Cache-Status");
          if (etag) {
            if (ifNoneMatch && ifNoneMatch === etag && proxyCacheStatus === "MISS") {
              response.headers.set("CF-Cache-Status", "EXPIRED");
            } else {
              response.headers.set("CF-Cache-Status", "REVALIDATED");
            }
            response.headers.set("etag", formatETag(etag, "weak"));
          }
        }
        if (shouldSetBrowserCache) {
          response.headers.set("Cache-Control", `max-age=${options.cacheControl.browserTTL}`);
        } else {
          response.headers.delete("Cache-Control");
        }
        return response;
      };
      exports.getAssetFromKV = getAssetFromKV2;
    }
  });

  // node_modules/.pnpm/p-timeout@4.1.0/node_modules/p-timeout/index.js
  var require_p_timeout = __commonJS({
    "node_modules/.pnpm/p-timeout@4.1.0/node_modules/p-timeout/index.js"(exports, module) {
      "use strict";
      init_env();
      var TimeoutError2 = class extends Error {
        constructor(message) {
          super(message);
          this.name = "TimeoutError";
        }
      };
      var pTimeout2 = (promise, milliseconds, fallback, options) => {
        let timer;
        const cancelablePromise = new Promise((resolve, reject) => {
          if (typeof milliseconds !== "number" || milliseconds < 0) {
            throw new TypeError("Expected `milliseconds` to be a positive number");
          }
          if (milliseconds === Infinity) {
            resolve(promise);
            return;
          }
          options = {
            customTimers: { setTimeout, clearTimeout },
            ...options
          };
          timer = options.customTimers.setTimeout.call(void 0, () => {
            if (typeof fallback === "function") {
              try {
                resolve(fallback());
              } catch (error) {
                reject(error);
              }
              return;
            }
            const message = typeof fallback === "string" ? fallback : `Promise timed out after ${milliseconds} milliseconds`;
            const timeoutError2 = fallback instanceof Error ? fallback : new TimeoutError2(message);
            if (typeof promise.cancel === "function") {
              promise.cancel();
            }
            reject(timeoutError2);
          }, milliseconds);
          (async () => {
            try {
              resolve(await promise);
            } catch (error) {
              reject(error);
            } finally {
              options.customTimers.clearTimeout.call(void 0, timer);
            }
          })();
        });
        cancelablePromise.clear = () => {
          clearTimeout(timer);
          timer = void 0;
        };
        return cancelablePromise;
      };
      module.exports = pTimeout2;
      module.exports.default = pTimeout2;
      module.exports.TimeoutError = TimeoutError2;
    }
  });

  // node_modules/.pnpm/entities@3.0.1/node_modules/entities/lib/decode_codepoint.js
  var require_decode_codepoint = __commonJS({
    "node_modules/.pnpm/entities@3.0.1/node_modules/entities/lib/decode_codepoint.js"(exports) {
      "use strict";
      init_env();
      Object.defineProperty(exports, "__esModule", { value: true });
      var decodeMap = /* @__PURE__ */ new Map([
        [0, 65533],
        [128, 8364],
        [130, 8218],
        [131, 402],
        [132, 8222],
        [133, 8230],
        [134, 8224],
        [135, 8225],
        [136, 710],
        [137, 8240],
        [138, 352],
        [139, 8249],
        [140, 338],
        [142, 381],
        [145, 8216],
        [146, 8217],
        [147, 8220],
        [148, 8221],
        [149, 8226],
        [150, 8211],
        [151, 8212],
        [152, 732],
        [153, 8482],
        [154, 353],
        [155, 8250],
        [156, 339],
        [158, 382],
        [159, 376]
      ]);
      var fromCodePoint = String.fromCodePoint || function(codePoint) {
        var output = "";
        if (codePoint > 65535) {
          codePoint -= 65536;
          output += String.fromCharCode(codePoint >>> 10 & 1023 | 55296);
          codePoint = 56320 | codePoint & 1023;
        }
        output += String.fromCharCode(codePoint);
        return output;
      };
      function decodeCodePoint(codePoint) {
        var _a8;
        if (codePoint >= 55296 && codePoint <= 57343 || codePoint > 1114111) {
          return "\uFFFD";
        }
        return fromCodePoint((_a8 = decodeMap.get(codePoint)) !== null && _a8 !== void 0 ? _a8 : codePoint);
      }
      exports.default = decodeCodePoint;
    }
  });

  // node_modules/.pnpm/entities@3.0.1/node_modules/entities/lib/generated/decode-data-html.js
  var require_decode_data_html = __commonJS({
    "node_modules/.pnpm/entities@3.0.1/node_modules/entities/lib/generated/decode-data-html.js"(exports) {
      "use strict";
      init_env();
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.default = new Uint16Array([14866, 60, 237, 340, 721, 1312, 1562, 1654, 1838, 1957, 2183, 2239, 2301, 2958, 3037, 3893, 4123, 4298, 4330, 4801, 5191, 5395, 5752, 5903, 5943, 5972, 6050, 0, 0, 0, 0, 0, 0, 6135, 6565, 7422, 8183, 8738, 9242, 9503, 9938, 10189, 10573, 10637, 10715, 11950, 12246, 13539, 13950, 14445, 14533, 15364, 16514, 16980, 17390, 17763, 17849, 18036, 18125, 4096, 69, 77, 97, 98, 99, 102, 103, 108, 109, 110, 111, 112, 114, 115, 116, 117, 92, 100, 106, 115, 122, 137, 142, 151, 157, 163, 167, 182, 196, 204, 220, 229, 108, 105, 103, 33024, 198, 59, 32768, 198, 80, 33024, 38, 59, 32768, 38, 99, 117, 116, 101, 33024, 193, 59, 32768, 193, 114, 101, 118, 101, 59, 32768, 258, 512, 105, 121, 127, 134, 114, 99, 33024, 194, 59, 32768, 194, 59, 32768, 1040, 114, 59, 32896, 55349, 56580, 114, 97, 118, 101, 33024, 192, 59, 32768, 192, 112, 104, 97, 59, 32768, 913, 97, 99, 114, 59, 32768, 256, 100, 59, 32768, 10835, 512, 103, 112, 172, 177, 111, 110, 59, 32768, 260, 102, 59, 32896, 55349, 56632, 112, 108, 121, 70, 117, 110, 99, 116, 105, 111, 110, 59, 32768, 8289, 105, 110, 103, 33024, 197, 59, 32768, 197, 512, 99, 115, 209, 214, 114, 59, 32896, 55349, 56476, 105, 103, 110, 59, 32768, 8788, 105, 108, 100, 101, 33024, 195, 59, 32768, 195, 109, 108, 33024, 196, 59, 32768, 196, 2048, 97, 99, 101, 102, 111, 114, 115, 117, 253, 278, 282, 310, 315, 321, 327, 332, 512, 99, 114, 258, 267, 107, 115, 108, 97, 115, 104, 59, 32768, 8726, 583, 271, 274, 59, 32768, 10983, 101, 100, 59, 32768, 8966, 121, 59, 32768, 1041, 768, 99, 114, 116, 289, 296, 306, 97, 117, 115, 101, 59, 32768, 8757, 110, 111, 117, 108, 108, 105, 115, 59, 32768, 8492, 97, 59, 32768, 914, 114, 59, 32896, 55349, 56581, 112, 102, 59, 32896, 55349, 56633, 101, 118, 101, 59, 32768, 728, 99, 114, 59, 32768, 8492, 109, 112, 101, 113, 59, 32768, 8782, 3584, 72, 79, 97, 99, 100, 101, 102, 104, 105, 108, 111, 114, 115, 117, 368, 373, 380, 426, 461, 466, 487, 491, 495, 533, 593, 695, 701, 707, 99, 121, 59, 32768, 1063, 80, 89, 33024, 169, 59, 32768, 169, 768, 99, 112, 121, 387, 393, 419, 117, 116, 101, 59, 32768, 262, 512, 59, 105, 398, 400, 32768, 8914, 116, 97, 108, 68, 105, 102, 102, 101, 114, 101, 110, 116, 105, 97, 108, 68, 59, 32768, 8517, 108, 101, 121, 115, 59, 32768, 8493, 1024, 97, 101, 105, 111, 435, 441, 449, 454, 114, 111, 110, 59, 32768, 268, 100, 105, 108, 33024, 199, 59, 32768, 199, 114, 99, 59, 32768, 264, 110, 105, 110, 116, 59, 32768, 8752, 111, 116, 59, 32768, 266, 512, 100, 110, 471, 478, 105, 108, 108, 97, 59, 32768, 184, 116, 101, 114, 68, 111, 116, 59, 32768, 183, 114, 59, 32768, 8493, 105, 59, 32768, 935, 114, 99, 108, 101, 1024, 68, 77, 80, 84, 508, 513, 520, 526, 111, 116, 59, 32768, 8857, 105, 110, 117, 115, 59, 32768, 8854, 108, 117, 115, 59, 32768, 8853, 105, 109, 101, 115, 59, 32768, 8855, 111, 512, 99, 115, 539, 562, 107, 119, 105, 115, 101, 67, 111, 110, 116, 111, 117, 114, 73, 110, 116, 101, 103, 114, 97, 108, 59, 32768, 8754, 101, 67, 117, 114, 108, 121, 512, 68, 81, 573, 586, 111, 117, 98, 108, 101, 81, 117, 111, 116, 101, 59, 32768, 8221, 117, 111, 116, 101, 59, 32768, 8217, 1024, 108, 110, 112, 117, 602, 614, 648, 664, 111, 110, 512, 59, 101, 609, 611, 32768, 8759, 59, 32768, 10868, 768, 103, 105, 116, 621, 629, 634, 114, 117, 101, 110, 116, 59, 32768, 8801, 110, 116, 59, 32768, 8751, 111, 117, 114, 73, 110, 116, 101, 103, 114, 97, 108, 59, 32768, 8750, 512, 102, 114, 653, 656, 59, 32768, 8450, 111, 100, 117, 99, 116, 59, 32768, 8720, 110, 116, 101, 114, 67, 108, 111, 99, 107, 119, 105, 115, 101, 67, 111, 110, 116, 111, 117, 114, 73, 110, 116, 101, 103, 114, 97, 108, 59, 32768, 8755, 111, 115, 115, 59, 32768, 10799, 99, 114, 59, 32896, 55349, 56478, 112, 512, 59, 67, 713, 715, 32768, 8915, 97, 112, 59, 32768, 8781, 2816, 68, 74, 83, 90, 97, 99, 101, 102, 105, 111, 115, 743, 758, 763, 768, 773, 795, 809, 821, 826, 910, 1295, 512, 59, 111, 748, 750, 32768, 8517, 116, 114, 97, 104, 100, 59, 32768, 10513, 99, 121, 59, 32768, 1026, 99, 121, 59, 32768, 1029, 99, 121, 59, 32768, 1039, 768, 103, 114, 115, 780, 786, 790, 103, 101, 114, 59, 32768, 8225, 114, 59, 32768, 8609, 104, 118, 59, 32768, 10980, 512, 97, 121, 800, 806, 114, 111, 110, 59, 32768, 270, 59, 32768, 1044, 108, 512, 59, 116, 815, 817, 32768, 8711, 97, 59, 32768, 916, 114, 59, 32896, 55349, 56583, 512, 97, 102, 831, 897, 512, 99, 109, 836, 891, 114, 105, 116, 105, 99, 97, 108, 1024, 65, 68, 71, 84, 852, 859, 877, 884, 99, 117, 116, 101, 59, 32768, 180, 111, 581, 864, 867, 59, 32768, 729, 98, 108, 101, 65, 99, 117, 116, 101, 59, 32768, 733, 114, 97, 118, 101, 59, 32768, 96, 105, 108, 100, 101, 59, 32768, 732, 111, 110, 100, 59, 32768, 8900, 102, 101, 114, 101, 110, 116, 105, 97, 108, 68, 59, 32768, 8518, 2113, 920, 0, 0, 0, 925, 946, 0, 1139, 102, 59, 32896, 55349, 56635, 768, 59, 68, 69, 931, 933, 938, 32768, 168, 111, 116, 59, 32768, 8412, 113, 117, 97, 108, 59, 32768, 8784, 98, 108, 101, 1536, 67, 68, 76, 82, 85, 86, 961, 978, 996, 1080, 1101, 1125, 111, 110, 116, 111, 117, 114, 73, 110, 116, 101, 103, 114, 97, 108, 59, 32768, 8751, 111, 1093, 985, 0, 0, 988, 59, 32768, 168, 110, 65, 114, 114, 111, 119, 59, 32768, 8659, 512, 101, 111, 1001, 1034, 102, 116, 768, 65, 82, 84, 1010, 1017, 1029, 114, 114, 111, 119, 59, 32768, 8656, 105, 103, 104, 116, 65, 114, 114, 111, 119, 59, 32768, 8660, 101, 101, 59, 32768, 10980, 110, 103, 512, 76, 82, 1041, 1068, 101, 102, 116, 512, 65, 82, 1049, 1056, 114, 114, 111, 119, 59, 32768, 10232, 105, 103, 104, 116, 65, 114, 114, 111, 119, 59, 32768, 10234, 105, 103, 104, 116, 65, 114, 114, 111, 119, 59, 32768, 10233, 105, 103, 104, 116, 512, 65, 84, 1089, 1096, 114, 114, 111, 119, 59, 32768, 8658, 101, 101, 59, 32768, 8872, 112, 1042, 1108, 0, 0, 1115, 114, 114, 111, 119, 59, 32768, 8657, 111, 119, 110, 65, 114, 114, 111, 119, 59, 32768, 8661, 101, 114, 116, 105, 99, 97, 108, 66, 97, 114, 59, 32768, 8741, 110, 1536, 65, 66, 76, 82, 84, 97, 1152, 1179, 1186, 1236, 1272, 1288, 114, 114, 111, 119, 768, 59, 66, 85, 1163, 1165, 1170, 32768, 8595, 97, 114, 59, 32768, 10515, 112, 65, 114, 114, 111, 119, 59, 32768, 8693, 114, 101, 118, 101, 59, 32768, 785, 101, 102, 116, 1315, 1196, 0, 1209, 0, 1220, 105, 103, 104, 116, 86, 101, 99, 116, 111, 114, 59, 32768, 10576, 101, 101, 86, 101, 99, 116, 111, 114, 59, 32768, 10590, 101, 99, 116, 111, 114, 512, 59, 66, 1229, 1231, 32768, 8637, 97, 114, 59, 32768, 10582, 105, 103, 104, 116, 805, 1245, 0, 1256, 101, 101, 86, 101, 99, 116, 111, 114, 59, 32768, 10591, 101, 99, 116, 111, 114, 512, 59, 66, 1265, 1267, 32768, 8641, 97, 114, 59, 32768, 10583, 101, 101, 512, 59, 65, 1279, 1281, 32768, 8868, 114, 114, 111, 119, 59, 32768, 8615, 114, 114, 111, 119, 59, 32768, 8659, 512, 99, 116, 1300, 1305, 114, 59, 32896, 55349, 56479, 114, 111, 107, 59, 32768, 272, 4096, 78, 84, 97, 99, 100, 102, 103, 108, 109, 111, 112, 113, 115, 116, 117, 120, 1344, 1348, 1354, 1363, 1386, 1391, 1396, 1405, 1413, 1460, 1475, 1483, 1514, 1527, 1531, 1538, 71, 59, 32768, 330, 72, 33024, 208, 59, 32768, 208, 99, 117, 116, 101, 33024, 201, 59, 32768, 201, 768, 97, 105, 121, 1370, 1376, 1383, 114, 111, 110, 59, 32768, 282, 114, 99, 33024, 202, 59, 32768, 202, 59, 32768, 1069, 111, 116, 59, 32768, 278, 114, 59, 32896, 55349, 56584, 114, 97, 118, 101, 33024, 200, 59, 32768, 200, 101, 109, 101, 110, 116, 59, 32768, 8712, 512, 97, 112, 1418, 1423, 99, 114, 59, 32768, 274, 116, 121, 1060, 1431, 0, 0, 1444, 109, 97, 108, 108, 83, 113, 117, 97, 114, 101, 59, 32768, 9723, 101, 114, 121, 83, 109, 97, 108, 108, 83, 113, 117, 97, 114, 101, 59, 32768, 9643, 512, 103, 112, 1465, 1470, 111, 110, 59, 32768, 280, 102, 59, 32896, 55349, 56636, 115, 105, 108, 111, 110, 59, 32768, 917, 117, 512, 97, 105, 1489, 1504, 108, 512, 59, 84, 1495, 1497, 32768, 10869, 105, 108, 100, 101, 59, 32768, 8770, 108, 105, 98, 114, 105, 117, 109, 59, 32768, 8652, 512, 99, 105, 1519, 1523, 114, 59, 32768, 8496, 109, 59, 32768, 10867, 97, 59, 32768, 919, 109, 108, 33024, 203, 59, 32768, 203, 512, 105, 112, 1543, 1549, 115, 116, 115, 59, 32768, 8707, 111, 110, 101, 110, 116, 105, 97, 108, 69, 59, 32768, 8519, 1280, 99, 102, 105, 111, 115, 1572, 1576, 1581, 1620, 1648, 121, 59, 32768, 1060, 114, 59, 32896, 55349, 56585, 108, 108, 101, 100, 1060, 1591, 0, 0, 1604, 109, 97, 108, 108, 83, 113, 117, 97, 114, 101, 59, 32768, 9724, 101, 114, 121, 83, 109, 97, 108, 108, 83, 113, 117, 97, 114, 101, 59, 32768, 9642, 1601, 1628, 0, 1633, 0, 0, 1639, 102, 59, 32896, 55349, 56637, 65, 108, 108, 59, 32768, 8704, 114, 105, 101, 114, 116, 114, 102, 59, 32768, 8497, 99, 114, 59, 32768, 8497, 3072, 74, 84, 97, 98, 99, 100, 102, 103, 111, 114, 115, 116, 1678, 1683, 1688, 1701, 1708, 1729, 1734, 1739, 1742, 1748, 1828, 1834, 99, 121, 59, 32768, 1027, 33024, 62, 59, 32768, 62, 109, 109, 97, 512, 59, 100, 1696, 1698, 32768, 915, 59, 32768, 988, 114, 101, 118, 101, 59, 32768, 286, 768, 101, 105, 121, 1715, 1721, 1726, 100, 105, 108, 59, 32768, 290, 114, 99, 59, 32768, 284, 59, 32768, 1043, 111, 116, 59, 32768, 288, 114, 59, 32896, 55349, 56586, 59, 32768, 8921, 112, 102, 59, 32896, 55349, 56638, 101, 97, 116, 101, 114, 1536, 69, 70, 71, 76, 83, 84, 1766, 1783, 1794, 1803, 1809, 1821, 113, 117, 97, 108, 512, 59, 76, 1775, 1777, 32768, 8805, 101, 115, 115, 59, 32768, 8923, 117, 108, 108, 69, 113, 117, 97, 108, 59, 32768, 8807, 114, 101, 97, 116, 101, 114, 59, 32768, 10914, 101, 115, 115, 59, 32768, 8823, 108, 97, 110, 116, 69, 113, 117, 97, 108, 59, 32768, 10878, 105, 108, 100, 101, 59, 32768, 8819, 99, 114, 59, 32896, 55349, 56482, 59, 32768, 8811, 2048, 65, 97, 99, 102, 105, 111, 115, 117, 1854, 1861, 1874, 1880, 1884, 1897, 1919, 1934, 82, 68, 99, 121, 59, 32768, 1066, 512, 99, 116, 1866, 1871, 101, 107, 59, 32768, 711, 59, 32768, 94, 105, 114, 99, 59, 32768, 292, 114, 59, 32768, 8460, 108, 98, 101, 114, 116, 83, 112, 97, 99, 101, 59, 32768, 8459, 833, 1902, 0, 1906, 102, 59, 32768, 8461, 105, 122, 111, 110, 116, 97, 108, 76, 105, 110, 101, 59, 32768, 9472, 512, 99, 116, 1924, 1928, 114, 59, 32768, 8459, 114, 111, 107, 59, 32768, 294, 109, 112, 533, 1940, 1950, 111, 119, 110, 72, 117, 109, 112, 59, 32768, 8782, 113, 117, 97, 108, 59, 32768, 8783, 3584, 69, 74, 79, 97, 99, 100, 102, 103, 109, 110, 111, 115, 116, 117, 1985, 1990, 1996, 2001, 2010, 2025, 2030, 2034, 2043, 2077, 2134, 2155, 2160, 2167, 99, 121, 59, 32768, 1045, 108, 105, 103, 59, 32768, 306, 99, 121, 59, 32768, 1025, 99, 117, 116, 101, 33024, 205, 59, 32768, 205, 512, 105, 121, 2015, 2022, 114, 99, 33024, 206, 59, 32768, 206, 59, 32768, 1048, 111, 116, 59, 32768, 304, 114, 59, 32768, 8465, 114, 97, 118, 101, 33024, 204, 59, 32768, 204, 768, 59, 97, 112, 2050, 2052, 2070, 32768, 8465, 512, 99, 103, 2057, 2061, 114, 59, 32768, 298, 105, 110, 97, 114, 121, 73, 59, 32768, 8520, 108, 105, 101, 115, 59, 32768, 8658, 837, 2082, 0, 2110, 512, 59, 101, 2086, 2088, 32768, 8748, 512, 103, 114, 2093, 2099, 114, 97, 108, 59, 32768, 8747, 115, 101, 99, 116, 105, 111, 110, 59, 32768, 8898, 105, 115, 105, 98, 108, 101, 512, 67, 84, 2120, 2127, 111, 109, 109, 97, 59, 32768, 8291, 105, 109, 101, 115, 59, 32768, 8290, 768, 103, 112, 116, 2141, 2146, 2151, 111, 110, 59, 32768, 302, 102, 59, 32896, 55349, 56640, 97, 59, 32768, 921, 99, 114, 59, 32768, 8464, 105, 108, 100, 101, 59, 32768, 296, 828, 2172, 0, 2177, 99, 121, 59, 32768, 1030, 108, 33024, 207, 59, 32768, 207, 1280, 99, 102, 111, 115, 117, 2193, 2206, 2211, 2217, 2232, 512, 105, 121, 2198, 2203, 114, 99, 59, 32768, 308, 59, 32768, 1049, 114, 59, 32896, 55349, 56589, 112, 102, 59, 32896, 55349, 56641, 820, 2222, 0, 2227, 114, 59, 32896, 55349, 56485, 114, 99, 121, 59, 32768, 1032, 107, 99, 121, 59, 32768, 1028, 1792, 72, 74, 97, 99, 102, 111, 115, 2253, 2258, 2263, 2269, 2283, 2288, 2294, 99, 121, 59, 32768, 1061, 99, 121, 59, 32768, 1036, 112, 112, 97, 59, 32768, 922, 512, 101, 121, 2274, 2280, 100, 105, 108, 59, 32768, 310, 59, 32768, 1050, 114, 59, 32896, 55349, 56590, 112, 102, 59, 32896, 55349, 56642, 99, 114, 59, 32896, 55349, 56486, 2816, 74, 84, 97, 99, 101, 102, 108, 109, 111, 115, 116, 2323, 2328, 2333, 2374, 2396, 2775, 2780, 2797, 2804, 2934, 2954, 99, 121, 59, 32768, 1033, 33024, 60, 59, 32768, 60, 1280, 99, 109, 110, 112, 114, 2344, 2350, 2356, 2360, 2370, 117, 116, 101, 59, 32768, 313, 98, 100, 97, 59, 32768, 923, 103, 59, 32768, 10218, 108, 97, 99, 101, 116, 114, 102, 59, 32768, 8466, 114, 59, 32768, 8606, 768, 97, 101, 121, 2381, 2387, 2393, 114, 111, 110, 59, 32768, 317, 100, 105, 108, 59, 32768, 315, 59, 32768, 1051, 512, 102, 115, 2401, 2702, 116, 2560, 65, 67, 68, 70, 82, 84, 85, 86, 97, 114, 2423, 2470, 2479, 2530, 2537, 2561, 2618, 2666, 2683, 2690, 512, 110, 114, 2428, 2441, 103, 108, 101, 66, 114, 97, 99, 107, 101, 116, 59, 32768, 10216, 114, 111, 119, 768, 59, 66, 82, 2451, 2453, 2458, 32768, 8592, 97, 114, 59, 32768, 8676, 105, 103, 104, 116, 65, 114, 114, 111, 119, 59, 32768, 8646, 101, 105, 108, 105, 110, 103, 59, 32768, 8968, 111, 838, 2485, 0, 2498, 98, 108, 101, 66, 114, 97, 99, 107, 101, 116, 59, 32768, 10214, 110, 805, 2503, 0, 2514, 101, 101, 86, 101, 99, 116, 111, 114, 59, 32768, 10593, 101, 99, 116, 111, 114, 512, 59, 66, 2523, 2525, 32768, 8643, 97, 114, 59, 32768, 10585, 108, 111, 111, 114, 59, 32768, 8970, 105, 103, 104, 116, 512, 65, 86, 2546, 2553, 114, 114, 111, 119, 59, 32768, 8596, 101, 99, 116, 111, 114, 59, 32768, 10574, 512, 101, 114, 2566, 2591, 101, 768, 59, 65, 86, 2574, 2576, 2583, 32768, 8867, 114, 114, 111, 119, 59, 32768, 8612, 101, 99, 116, 111, 114, 59, 32768, 10586, 105, 97, 110, 103, 108, 101, 768, 59, 66, 69, 2604, 2606, 2611, 32768, 8882, 97, 114, 59, 32768, 10703, 113, 117, 97, 108, 59, 32768, 8884, 112, 768, 68, 84, 86, 2626, 2638, 2649, 111, 119, 110, 86, 101, 99, 116, 111, 114, 59, 32768, 10577, 101, 101, 86, 101, 99, 116, 111, 114, 59, 32768, 10592, 101, 99, 116, 111, 114, 512, 59, 66, 2659, 2661, 32768, 8639, 97, 114, 59, 32768, 10584, 101, 99, 116, 111, 114, 512, 59, 66, 2676, 2678, 32768, 8636, 97, 114, 59, 32768, 10578, 114, 114, 111, 119, 59, 32768, 8656, 105, 103, 104, 116, 97, 114, 114, 111, 119, 59, 32768, 8660, 115, 1536, 69, 70, 71, 76, 83, 84, 2716, 2730, 2741, 2750, 2756, 2768, 113, 117, 97, 108, 71, 114, 101, 97, 116, 101, 114, 59, 32768, 8922, 117, 108, 108, 69, 113, 117, 97, 108, 59, 32768, 8806, 114, 101, 97, 116, 101, 114, 59, 32768, 8822, 101, 115, 115, 59, 32768, 10913, 108, 97, 110, 116, 69, 113, 117, 97, 108, 59, 32768, 10877, 105, 108, 100, 101, 59, 32768, 8818, 114, 59, 32896, 55349, 56591, 512, 59, 101, 2785, 2787, 32768, 8920, 102, 116, 97, 114, 114, 111, 119, 59, 32768, 8666, 105, 100, 111, 116, 59, 32768, 319, 768, 110, 112, 119, 2811, 2899, 2904, 103, 1024, 76, 82, 108, 114, 2821, 2848, 2860, 2887, 101, 102, 116, 512, 65, 82, 2829, 2836, 114, 114, 111, 119, 59, 32768, 10229, 105, 103, 104, 116, 65, 114, 114, 111, 119, 59, 32768, 10231, 105, 103, 104, 116, 65, 114, 114, 111, 119, 59, 32768, 10230, 101, 102, 116, 512, 97, 114, 2868, 2875, 114, 114, 111, 119, 59, 32768, 10232, 105, 103, 104, 116, 97, 114, 114, 111, 119, 59, 32768, 10234, 105, 103, 104, 116, 97, 114, 114, 111, 119, 59, 32768, 10233, 102, 59, 32896, 55349, 56643, 101, 114, 512, 76, 82, 2911, 2922, 101, 102, 116, 65, 114, 114, 111, 119, 59, 32768, 8601, 105, 103, 104, 116, 65, 114, 114, 111, 119, 59, 32768, 8600, 768, 99, 104, 116, 2941, 2945, 2948, 114, 59, 32768, 8466, 59, 32768, 8624, 114, 111, 107, 59, 32768, 321, 59, 32768, 8810, 2048, 97, 99, 101, 102, 105, 111, 115, 117, 2974, 2978, 2982, 3007, 3012, 3022, 3028, 3033, 112, 59, 32768, 10501, 121, 59, 32768, 1052, 512, 100, 108, 2987, 2998, 105, 117, 109, 83, 112, 97, 99, 101, 59, 32768, 8287, 108, 105, 110, 116, 114, 102, 59, 32768, 8499, 114, 59, 32896, 55349, 56592, 110, 117, 115, 80, 108, 117, 115, 59, 32768, 8723, 112, 102, 59, 32896, 55349, 56644, 99, 114, 59, 32768, 8499, 59, 32768, 924, 2304, 74, 97, 99, 101, 102, 111, 115, 116, 117, 3055, 3060, 3067, 3089, 3201, 3206, 3874, 3880, 3889, 99, 121, 59, 32768, 1034, 99, 117, 116, 101, 59, 32768, 323, 768, 97, 101, 121, 3074, 3080, 3086, 114, 111, 110, 59, 32768, 327, 100, 105, 108, 59, 32768, 325, 59, 32768, 1053, 768, 103, 115, 119, 3096, 3160, 3194, 97, 116, 105, 118, 101, 768, 77, 84, 86, 3108, 3121, 3145, 101, 100, 105, 117, 109, 83, 112, 97, 99, 101, 59, 32768, 8203, 104, 105, 512, 99, 110, 3128, 3137, 107, 83, 112, 97, 99, 101, 59, 32768, 8203, 83, 112, 97, 99, 101, 59, 32768, 8203, 101, 114, 121, 84, 104, 105, 110, 83, 112, 97, 99, 101, 59, 32768, 8203, 116, 101, 100, 512, 71, 76, 3168, 3184, 114, 101, 97, 116, 101, 114, 71, 114, 101, 97, 116, 101, 114, 59, 32768, 8811, 101, 115, 115, 76, 101, 115, 115, 59, 32768, 8810, 76, 105, 110, 101, 59, 32768, 10, 114, 59, 32896, 55349, 56593, 1024, 66, 110, 112, 116, 3215, 3222, 3238, 3242, 114, 101, 97, 107, 59, 32768, 8288, 66, 114, 101, 97, 107, 105, 110, 103, 83, 112, 97, 99, 101, 59, 32768, 160, 102, 59, 32768, 8469, 3328, 59, 67, 68, 69, 71, 72, 76, 78, 80, 82, 83, 84, 86, 3269, 3271, 3293, 3312, 3352, 3430, 3455, 3551, 3589, 3625, 3678, 3821, 3861, 32768, 10988, 512, 111, 117, 3276, 3286, 110, 103, 114, 117, 101, 110, 116, 59, 32768, 8802, 112, 67, 97, 112, 59, 32768, 8813, 111, 117, 98, 108, 101, 86, 101, 114, 116, 105, 99, 97, 108, 66, 97, 114, 59, 32768, 8742, 768, 108, 113, 120, 3319, 3327, 3345, 101, 109, 101, 110, 116, 59, 32768, 8713, 117, 97, 108, 512, 59, 84, 3335, 3337, 32768, 8800, 105, 108, 100, 101, 59, 32896, 8770, 824, 105, 115, 116, 115, 59, 32768, 8708, 114, 101, 97, 116, 101, 114, 1792, 59, 69, 70, 71, 76, 83, 84, 3373, 3375, 3382, 3394, 3404, 3410, 3423, 32768, 8815, 113, 117, 97, 108, 59, 32768, 8817, 117, 108, 108, 69, 113, 117, 97, 108, 59, 32896, 8807, 824, 114, 101, 97, 116, 101, 114, 59, 32896, 8811, 824, 101, 115, 115, 59, 32768, 8825, 108, 97, 110, 116, 69, 113, 117, 97, 108, 59, 32896, 10878, 824, 105, 108, 100, 101, 59, 32768, 8821, 117, 109, 112, 533, 3437, 3448, 111, 119, 110, 72, 117, 109, 112, 59, 32896, 8782, 824, 113, 117, 97, 108, 59, 32896, 8783, 824, 101, 512, 102, 115, 3461, 3492, 116, 84, 114, 105, 97, 110, 103, 108, 101, 768, 59, 66, 69, 3477, 3479, 3485, 32768, 8938, 97, 114, 59, 32896, 10703, 824, 113, 117, 97, 108, 59, 32768, 8940, 115, 1536, 59, 69, 71, 76, 83, 84, 3506, 3508, 3515, 3524, 3531, 3544, 32768, 8814, 113, 117, 97, 108, 59, 32768, 8816, 114, 101, 97, 116, 101, 114, 59, 32768, 8824, 101, 115, 115, 59, 32896, 8810, 824, 108, 97, 110, 116, 69, 113, 117, 97, 108, 59, 32896, 10877, 824, 105, 108, 100, 101, 59, 32768, 8820, 101, 115, 116, 101, 100, 512, 71, 76, 3561, 3578, 114, 101, 97, 116, 101, 114, 71, 114, 101, 97, 116, 101, 114, 59, 32896, 10914, 824, 101, 115, 115, 76, 101, 115, 115, 59, 32896, 10913, 824, 114, 101, 99, 101, 100, 101, 115, 768, 59, 69, 83, 3603, 3605, 3613, 32768, 8832, 113, 117, 97, 108, 59, 32896, 10927, 824, 108, 97, 110, 116, 69, 113, 117, 97, 108, 59, 32768, 8928, 512, 101, 105, 3630, 3645, 118, 101, 114, 115, 101, 69, 108, 101, 109, 101, 110, 116, 59, 32768, 8716, 103, 104, 116, 84, 114, 105, 97, 110, 103, 108, 101, 768, 59, 66, 69, 3663, 3665, 3671, 32768, 8939, 97, 114, 59, 32896, 10704, 824, 113, 117, 97, 108, 59, 32768, 8941, 512, 113, 117, 3683, 3732, 117, 97, 114, 101, 83, 117, 512, 98, 112, 3694, 3712, 115, 101, 116, 512, 59, 69, 3702, 3705, 32896, 8847, 824, 113, 117, 97, 108, 59, 32768, 8930, 101, 114, 115, 101, 116, 512, 59, 69, 3722, 3725, 32896, 8848, 824, 113, 117, 97, 108, 59, 32768, 8931, 768, 98, 99, 112, 3739, 3757, 3801, 115, 101, 116, 512, 59, 69, 3747, 3750, 32896, 8834, 8402, 113, 117, 97, 108, 59, 32768, 8840, 99, 101, 101, 100, 115, 1024, 59, 69, 83, 84, 3771, 3773, 3781, 3793, 32768, 8833, 113, 117, 97, 108, 59, 32896, 10928, 824, 108, 97, 110, 116, 69, 113, 117, 97, 108, 59, 32768, 8929, 105, 108, 100, 101, 59, 32896, 8831, 824, 101, 114, 115, 101, 116, 512, 59, 69, 3811, 3814, 32896, 8835, 8402, 113, 117, 97, 108, 59, 32768, 8841, 105, 108, 100, 101, 1024, 59, 69, 70, 84, 3834, 3836, 3843, 3854, 32768, 8769, 113, 117, 97, 108, 59, 32768, 8772, 117, 108, 108, 69, 113, 117, 97, 108, 59, 32768, 8775, 105, 108, 100, 101, 59, 32768, 8777, 101, 114, 116, 105, 99, 97, 108, 66, 97, 114, 59, 32768, 8740, 99, 114, 59, 32896, 55349, 56489, 105, 108, 100, 101, 33024, 209, 59, 32768, 209, 59, 32768, 925, 3584, 69, 97, 99, 100, 102, 103, 109, 111, 112, 114, 115, 116, 117, 118, 3921, 3927, 3936, 3951, 3958, 3963, 3972, 3996, 4002, 4034, 4037, 4055, 4071, 4078, 108, 105, 103, 59, 32768, 338, 99, 117, 116, 101, 33024, 211, 59, 32768, 211, 512, 105, 121, 3941, 3948, 114, 99, 33024, 212, 59, 32768, 212, 59, 32768, 1054, 98, 108, 97, 99, 59, 32768, 336, 114, 59, 32896, 55349, 56594, 114, 97, 118, 101, 33024, 210, 59, 32768, 210, 768, 97, 101, 105, 3979, 3984, 3989, 99, 114, 59, 32768, 332, 103, 97, 59, 32768, 937, 99, 114, 111, 110, 59, 32768, 927, 112, 102, 59, 32896, 55349, 56646, 101, 110, 67, 117, 114, 108, 121, 512, 68, 81, 4014, 4027, 111, 117, 98, 108, 101, 81, 117, 111, 116, 101, 59, 32768, 8220, 117, 111, 116, 101, 59, 32768, 8216, 59, 32768, 10836, 512, 99, 108, 4042, 4047, 114, 59, 32896, 55349, 56490, 97, 115, 104, 33024, 216, 59, 32768, 216, 105, 573, 4060, 4067, 100, 101, 33024, 213, 59, 32768, 213, 101, 115, 59, 32768, 10807, 109, 108, 33024, 214, 59, 32768, 214, 101, 114, 512, 66, 80, 4085, 4109, 512, 97, 114, 4090, 4094, 114, 59, 32768, 8254, 97, 99, 512, 101, 107, 4101, 4104, 59, 32768, 9182, 101, 116, 59, 32768, 9140, 97, 114, 101, 110, 116, 104, 101, 115, 105, 115, 59, 32768, 9180, 2304, 97, 99, 102, 104, 105, 108, 111, 114, 115, 4141, 4150, 4154, 4159, 4163, 4166, 4176, 4198, 4284, 114, 116, 105, 97, 108, 68, 59, 32768, 8706, 121, 59, 32768, 1055, 114, 59, 32896, 55349, 56595, 105, 59, 32768, 934, 59, 32768, 928, 117, 115, 77, 105, 110, 117, 115, 59, 32768, 177, 512, 105, 112, 4181, 4194, 110, 99, 97, 114, 101, 112, 108, 97, 110, 101, 59, 32768, 8460, 102, 59, 32768, 8473, 1024, 59, 101, 105, 111, 4207, 4209, 4251, 4256, 32768, 10939, 99, 101, 100, 101, 115, 1024, 59, 69, 83, 84, 4223, 4225, 4232, 4244, 32768, 8826, 113, 117, 97, 108, 59, 32768, 10927, 108, 97, 110, 116, 69, 113, 117, 97, 108, 59, 32768, 8828, 105, 108, 100, 101, 59, 32768, 8830, 109, 101, 59, 32768, 8243, 512, 100, 112, 4261, 4267, 117, 99, 116, 59, 32768, 8719, 111, 114, 116, 105, 111, 110, 512, 59, 97, 4278, 4280, 32768, 8759, 108, 59, 32768, 8733, 512, 99, 105, 4289, 4294, 114, 59, 32896, 55349, 56491, 59, 32768, 936, 1024, 85, 102, 111, 115, 4306, 4313, 4318, 4323, 79, 84, 33024, 34, 59, 32768, 34, 114, 59, 32896, 55349, 56596, 112, 102, 59, 32768, 8474, 99, 114, 59, 32896, 55349, 56492, 3072, 66, 69, 97, 99, 101, 102, 104, 105, 111, 114, 115, 117, 4354, 4360, 4366, 4395, 4417, 4473, 4477, 4481, 4743, 4764, 4776, 4788, 97, 114, 114, 59, 32768, 10512, 71, 33024, 174, 59, 32768, 174, 768, 99, 110, 114, 4373, 4379, 4383, 117, 116, 101, 59, 32768, 340, 103, 59, 32768, 10219, 114, 512, 59, 116, 4389, 4391, 32768, 8608, 108, 59, 32768, 10518, 768, 97, 101, 121, 4402, 4408, 4414, 114, 111, 110, 59, 32768, 344, 100, 105, 108, 59, 32768, 342, 59, 32768, 1056, 512, 59, 118, 4422, 4424, 32768, 8476, 101, 114, 115, 101, 512, 69, 85, 4433, 4458, 512, 108, 113, 4438, 4446, 101, 109, 101, 110, 116, 59, 32768, 8715, 117, 105, 108, 105, 98, 114, 105, 117, 109, 59, 32768, 8651, 112, 69, 113, 117, 105, 108, 105, 98, 114, 105, 117, 109, 59, 32768, 10607, 114, 59, 32768, 8476, 111, 59, 32768, 929, 103, 104, 116, 2048, 65, 67, 68, 70, 84, 85, 86, 97, 4501, 4547, 4556, 4607, 4614, 4671, 4719, 4736, 512, 110, 114, 4506, 4519, 103, 108, 101, 66, 114, 97, 99, 107, 101, 116, 59, 32768, 10217, 114, 111, 119, 768, 59, 66, 76, 4529, 4531, 4536, 32768, 8594, 97, 114, 59, 32768, 8677, 101, 102, 116, 65, 114, 114, 111, 119, 59, 32768, 8644, 101, 105, 108, 105, 110, 103, 59, 32768, 8969, 111, 838, 4562, 0, 4575, 98, 108, 101, 66, 114, 97, 99, 107, 101, 116, 59, 32768, 10215, 110, 805, 4580, 0, 4591, 101, 101, 86, 101, 99, 116, 111, 114, 59, 32768, 10589, 101, 99, 116, 111, 114, 512, 59, 66, 4600, 4602, 32768, 8642, 97, 114, 59, 32768, 10581, 108, 111, 111, 114, 59, 32768, 8971, 512, 101, 114, 4619, 4644, 101, 768, 59, 65, 86, 4627, 4629, 4636, 32768, 8866, 114, 114, 111, 119, 59, 32768, 8614, 101, 99, 116, 111, 114, 59, 32768, 10587, 105, 97, 110, 103, 108, 101, 768, 59, 66, 69, 4657, 4659, 4664, 32768, 8883, 97, 114, 59, 32768, 10704, 113, 117, 97, 108, 59, 32768, 8885, 112, 768, 68, 84, 86, 4679, 4691, 4702, 111, 119, 110, 86, 101, 99, 116, 111, 114, 59, 32768, 10575, 101, 101, 86, 101, 99, 116, 111, 114, 59, 32768, 10588, 101, 99, 116, 111, 114, 512, 59, 66, 4712, 4714, 32768, 8638, 97, 114, 59, 32768, 10580, 101, 99, 116, 111, 114, 512, 59, 66, 4729, 4731, 32768, 8640, 97, 114, 59, 32768, 10579, 114, 114, 111, 119, 59, 32768, 8658, 512, 112, 117, 4748, 4752, 102, 59, 32768, 8477, 110, 100, 73, 109, 112, 108, 105, 101, 115, 59, 32768, 10608, 105, 103, 104, 116, 97, 114, 114, 111, 119, 59, 32768, 8667, 512, 99, 104, 4781, 4785, 114, 59, 32768, 8475, 59, 32768, 8625, 108, 101, 68, 101, 108, 97, 121, 101, 100, 59, 32768, 10740, 3328, 72, 79, 97, 99, 102, 104, 105, 109, 111, 113, 115, 116, 117, 4827, 4842, 4849, 4856, 4889, 4894, 4949, 4955, 4967, 4973, 5059, 5065, 5070, 512, 67, 99, 4832, 4838, 72, 99, 121, 59, 32768, 1065, 121, 59, 32768, 1064, 70, 84, 99, 121, 59, 32768, 1068, 99, 117, 116, 101, 59, 32768, 346, 1280, 59, 97, 101, 105, 121, 4867, 4869, 4875, 4881, 4886, 32768, 10940, 114, 111, 110, 59, 32768, 352, 100, 105, 108, 59, 32768, 350, 114, 99, 59, 32768, 348, 59, 32768, 1057, 114, 59, 32896, 55349, 56598, 111, 114, 116, 1024, 68, 76, 82, 85, 4906, 4917, 4928, 4940, 111, 119, 110, 65, 114, 114, 111, 119, 59, 32768, 8595, 101, 102, 116, 65, 114, 114, 111, 119, 59, 32768, 8592, 105, 103, 104, 116, 65, 114, 114, 111, 119, 59, 32768, 8594, 112, 65, 114, 114, 111, 119, 59, 32768, 8593, 103, 109, 97, 59, 32768, 931, 97, 108, 108, 67, 105, 114, 99, 108, 101, 59, 32768, 8728, 112, 102, 59, 32896, 55349, 56650, 1091, 4979, 0, 0, 4983, 116, 59, 32768, 8730, 97, 114, 101, 1024, 59, 73, 83, 85, 4994, 4996, 5010, 5052, 32768, 9633, 110, 116, 101, 114, 115, 101, 99, 116, 105, 111, 110, 59, 32768, 8851, 117, 512, 98, 112, 5016, 5033, 115, 101, 116, 512, 59, 69, 5024, 5026, 32768, 8847, 113, 117, 97, 108, 59, 32768, 8849, 101, 114, 115, 101, 116, 512, 59, 69, 5043, 5045, 32768, 8848, 113, 117, 97, 108, 59, 32768, 8850, 110, 105, 111, 110, 59, 32768, 8852, 99, 114, 59, 32896, 55349, 56494, 97, 114, 59, 32768, 8902, 1024, 98, 99, 109, 112, 5079, 5102, 5155, 5158, 512, 59, 115, 5084, 5086, 32768, 8912, 101, 116, 512, 59, 69, 5093, 5095, 32768, 8912, 113, 117, 97, 108, 59, 32768, 8838, 512, 99, 104, 5107, 5148, 101, 101, 100, 115, 1024, 59, 69, 83, 84, 5120, 5122, 5129, 5141, 32768, 8827, 113, 117, 97, 108, 59, 32768, 10928, 108, 97, 110, 116, 69, 113, 117, 97, 108, 59, 32768, 8829, 105, 108, 100, 101, 59, 32768, 8831, 84, 104, 97, 116, 59, 32768, 8715, 59, 32768, 8721, 768, 59, 101, 115, 5165, 5167, 5185, 32768, 8913, 114, 115, 101, 116, 512, 59, 69, 5176, 5178, 32768, 8835, 113, 117, 97, 108, 59, 32768, 8839, 101, 116, 59, 32768, 8913, 2816, 72, 82, 83, 97, 99, 102, 104, 105, 111, 114, 115, 5213, 5221, 5227, 5241, 5252, 5274, 5279, 5323, 5362, 5368, 5378, 79, 82, 78, 33024, 222, 59, 32768, 222, 65, 68, 69, 59, 32768, 8482, 512, 72, 99, 5232, 5237, 99, 121, 59, 32768, 1035, 121, 59, 32768, 1062, 512, 98, 117, 5246, 5249, 59, 32768, 9, 59, 32768, 932, 768, 97, 101, 121, 5259, 5265, 5271, 114, 111, 110, 59, 32768, 356, 100, 105, 108, 59, 32768, 354, 59, 32768, 1058, 114, 59, 32896, 55349, 56599, 512, 101, 105, 5284, 5300, 835, 5289, 0, 5297, 101, 102, 111, 114, 101, 59, 32768, 8756, 97, 59, 32768, 920, 512, 99, 110, 5305, 5315, 107, 83, 112, 97, 99, 101, 59, 32896, 8287, 8202, 83, 112, 97, 99, 101, 59, 32768, 8201, 108, 100, 101, 1024, 59, 69, 70, 84, 5335, 5337, 5344, 5355, 32768, 8764, 113, 117, 97, 108, 59, 32768, 8771, 117, 108, 108, 69, 113, 117, 97, 108, 59, 32768, 8773, 105, 108, 100, 101, 59, 32768, 8776, 112, 102, 59, 32896, 55349, 56651, 105, 112, 108, 101, 68, 111, 116, 59, 32768, 8411, 512, 99, 116, 5383, 5388, 114, 59, 32896, 55349, 56495, 114, 111, 107, 59, 32768, 358, 5426, 5417, 5444, 5458, 5473, 0, 5480, 5485, 0, 0, 0, 0, 0, 5494, 5500, 5564, 5579, 0, 5726, 5732, 5738, 5745, 512, 99, 114, 5421, 5429, 117, 116, 101, 33024, 218, 59, 32768, 218, 114, 512, 59, 111, 5435, 5437, 32768, 8607, 99, 105, 114, 59, 32768, 10569, 114, 820, 5449, 0, 5453, 121, 59, 32768, 1038, 118, 101, 59, 32768, 364, 512, 105, 121, 5462, 5469, 114, 99, 33024, 219, 59, 32768, 219, 59, 32768, 1059, 98, 108, 97, 99, 59, 32768, 368, 114, 59, 32896, 55349, 56600, 114, 97, 118, 101, 33024, 217, 59, 32768, 217, 97, 99, 114, 59, 32768, 362, 512, 100, 105, 5504, 5548, 101, 114, 512, 66, 80, 5511, 5535, 512, 97, 114, 5516, 5520, 114, 59, 32768, 95, 97, 99, 512, 101, 107, 5527, 5530, 59, 32768, 9183, 101, 116, 59, 32768, 9141, 97, 114, 101, 110, 116, 104, 101, 115, 105, 115, 59, 32768, 9181, 111, 110, 512, 59, 80, 5555, 5557, 32768, 8899, 108, 117, 115, 59, 32768, 8846, 512, 103, 112, 5568, 5573, 111, 110, 59, 32768, 370, 102, 59, 32896, 55349, 56652, 2048, 65, 68, 69, 84, 97, 100, 112, 115, 5595, 5624, 5635, 5648, 5664, 5671, 5682, 5712, 114, 114, 111, 119, 768, 59, 66, 68, 5606, 5608, 5613, 32768, 8593, 97, 114, 59, 32768, 10514, 111, 119, 110, 65, 114, 114, 111, 119, 59, 32768, 8645, 111, 119, 110, 65, 114, 114, 111, 119, 59, 32768, 8597, 113, 117, 105, 108, 105, 98, 114, 105, 117, 109, 59, 32768, 10606, 101, 101, 512, 59, 65, 5655, 5657, 32768, 8869, 114, 114, 111, 119, 59, 32768, 8613, 114, 114, 111, 119, 59, 32768, 8657, 111, 119, 110, 97, 114, 114, 111, 119, 59, 32768, 8661, 101, 114, 512, 76, 82, 5689, 5700, 101, 102, 116, 65, 114, 114, 111, 119, 59, 32768, 8598, 105, 103, 104, 116, 65, 114, 114, 111, 119, 59, 32768, 8599, 105, 512, 59, 108, 5718, 5720, 32768, 978, 111, 110, 59, 32768, 933, 105, 110, 103, 59, 32768, 366, 99, 114, 59, 32896, 55349, 56496, 105, 108, 100, 101, 59, 32768, 360, 109, 108, 33024, 220, 59, 32768, 220, 2304, 68, 98, 99, 100, 101, 102, 111, 115, 118, 5770, 5776, 5781, 5785, 5798, 5878, 5883, 5889, 5895, 97, 115, 104, 59, 32768, 8875, 97, 114, 59, 32768, 10987, 121, 59, 32768, 1042, 97, 115, 104, 512, 59, 108, 5793, 5795, 32768, 8873, 59, 32768, 10982, 512, 101, 114, 5803, 5806, 59, 32768, 8897, 768, 98, 116, 121, 5813, 5818, 5866, 97, 114, 59, 32768, 8214, 512, 59, 105, 5823, 5825, 32768, 8214, 99, 97, 108, 1024, 66, 76, 83, 84, 5837, 5842, 5848, 5859, 97, 114, 59, 32768, 8739, 105, 110, 101, 59, 32768, 124, 101, 112, 97, 114, 97, 116, 111, 114, 59, 32768, 10072, 105, 108, 100, 101, 59, 32768, 8768, 84, 104, 105, 110, 83, 112, 97, 99, 101, 59, 32768, 8202, 114, 59, 32896, 55349, 56601, 112, 102, 59, 32896, 55349, 56653, 99, 114, 59, 32896, 55349, 56497, 100, 97, 115, 104, 59, 32768, 8874, 1280, 99, 101, 102, 111, 115, 5913, 5919, 5925, 5930, 5936, 105, 114, 99, 59, 32768, 372, 100, 103, 101, 59, 32768, 8896, 114, 59, 32896, 55349, 56602, 112, 102, 59, 32896, 55349, 56654, 99, 114, 59, 32896, 55349, 56498, 1024, 102, 105, 111, 115, 5951, 5956, 5959, 5965, 114, 59, 32896, 55349, 56603, 59, 32768, 926, 112, 102, 59, 32896, 55349, 56655, 99, 114, 59, 32896, 55349, 56499, 2304, 65, 73, 85, 97, 99, 102, 111, 115, 117, 5990, 5995, 6ee3, 15139, 15159, 15176, 15182, 15236, 15261, 15267, 15309, 15352, 15360, 768, 97, 114, 116, 14582, 14587, 14591, 114, 114, 59, 32768, 8667, 114, 59, 32768, 8658, 97, 105, 108, 59, 32768, 10524, 97, 114, 114, 59, 32768, 10511, 97, 114, 59, 32768, 10596, 1792, 99, 100, 101, 110, 113, 114, 116, 14623, 14637, 14642, 14650, 14672, 14679, 14751, 512, 101, 117, 14628, 14632, 59, 32896, 8765, 817, 116, 101, 59, 32768, 341, 105, 99, 59, 32768, 8730, 109, 112, 116, 121, 118, 59, 32768, 10675, 103, 1024, 59, 100, 101, 108, 14660, 14662, 14665, 14668, 32768, 10217, 59, 32768, 10642, 59, 32768, 10661, 101, 59, 32768, 10217, 117, 111, 33024, 187, 59, 32768, 187, 114, 2816, 59, 97, 98, 99, 102, 104, 108, 112, 115, 116, 119, 14703, 14705, 14709, 14720, 14723, 14727, 14731, 14735, 14739, 14744, 14748, 32768, 8594, 112, 59, 32768, 10613, 512, 59, 102, 14714, 14716, 32768, 8677, 115, 59, 32768, 10528, 59, 32768, 10547, 115, 59, 32768, 10526, 107, 59, 32768, 8618, 112, 59, 32768, 8620, 108, 59, 32768, 10565, 105, 109, 59, 32768, 10612, 108, 59, 32768, 8611, 59, 32768, 8605, 512, 97, 105, 14756, 14761, 105, 108, 59, 32768, 10522, 111, 512, 59, 110, 14767, 14769, 32768, 8758, 97, 108, 115, 59, 32768, 8474, 768, 97, 98, 114, 14782, 14787, 14792, 114, 114, 59, 32768, 10509, 114, 107, 59, 32768, 10099, 512, 97, 107, 14797, 14809, 99, 512, 101, 107, 14803, 14806, 59, 32768, 125, 59, 32768, 93, 512, 101, 115, 14814, 14817, 59, 32768, 10636, 108, 512, 100, 117, 14823, 14826, 59, 32768, 10638, 59, 32768, 10640, 1024, 97, 101, 117, 121, 14838, 14844, 14858, 14862, 114, 111, 110, 59, 32768, 345, 512, 100, 105, 14849, 14854, 105, 108, 59, 32768, 343, 108, 59, 32768, 8969, 98, 59, 32768, 125, 59, 32768, 1088, 1024, 99, 108, 113, 115, 14874, 14878, 14885, 14897, 97, 59, 32768, 10551, 100, 104, 97, 114, 59, 32768, 10601, 117, 111, 512, 59, 114, 14892, 14894, 32768, 8221, 59, 32768, 8221, 104, 59, 32768, 8627, 768, 97, 99, 103, 14908, 14934, 14938, 108, 1024, 59, 105, 112, 115, 14918, 14920, 14925, 14931, 32768, 8476, 110, 101, 59, 32768, 8475, 97, 114, 116, 59, 32768, 8476, 59, 32768, 8477, 116, 59, 32768, 9645, 33024, 174, 59, 32768, 174, 768, 105, 108, 114, 14950, 14956, 14962, 115, 104, 116, 59, 32768, 10621, 111, 111, 114, 59, 32768, 8971, 59, 32896, 55349, 56623, 512, 97, 111, 14971, 14990, 114, 512, 100, 117, 14977, 14980, 59, 32768, 8641, 512, 59, 108, 14985, 14987, 32768, 8640, 59, 32768, 10604, 512, 59, 118, 14995, 14997, 32768, 961, 59, 32768, 1009, 768, 103, 110, 115, 15007, 15123, 15127, 104, 116, 1536, 97, 104, 108, 114, 115, 116, 15022, 15039, 15060, 15086, 15099, 15111, 114, 114, 111, 119, 512, 59, 116, 15031, 15033, 32768, 8594, 97, 105, 108, 59, 32768, 8611, 97, 114, 112, 111, 111, 110, 512, 100, 117, 15050, 15056, 111, 119, 110, 59, 32768, 8641, 112, 59, 32768, 8640, 101, 102, 116, 512, 97, 104, 15068, 15076, 114, 114, 111, 119, 115, 59, 32768, 8644, 97, 114, 112, 111, 111, 110, 115, 59, 32768, 8652, 105, 103, 104, 116, 97, 114, 114, 111, 119, 115, 59, 32768, 8649, 113, 117, 105, 103, 97, 114, 114, 111, 119, 59, 32768, 8605, 104, 114, 101, 101, 116, 105, 109, 101, 115, 59, 32768, 8908, 103, 59, 32768, 730, 105, 110, 103, 100, 111, 116, 115, 101, 113, 59, 32768, 8787, 768, 97, 104, 109, 15146, 15151, 15156, 114, 114, 59, 32768, 8644, 97, 114, 59, 32768, 8652, 59, 32768, 8207, 111, 117, 115, 116, 512, 59, 97, 15168, 15170, 32768, 9137, 99, 104, 101, 59, 32768, 9137, 109, 105, 100, 59, 32768, 10990, 1024, 97, 98, 112, 116, 15191, 15204, 15209, 15229, 512, 110, 114, 15196, 15200, 103, 59, 32768, 10221, 114, 59, 32768, 8702, 114, 107, 59, 32768, 10215, 768, 97, 102, 108, 15216, 15220, 15224, 114, 59, 32768, 10630, 59, 32896, 55349, 56675, 117, 115, 59, 32768, 10798, 105, 109, 101, 115, 59, 32768, 10805, 512, 97, 112, 15241, 15253, 114, 512, 59, 103, 15247, 15249, 32768, 41, 116, 59, 32768, 10644, 111, 108, 105, 110, 116, 59, 32768, 10770, 97, 114, 114, 59, 32768, 8649, 1024, 97, 99, 104, 113, 15276, 15282, 15287, 15290, 113, 117, 111, 59, 32768, 8250, 114, 59, 32896, 55349, 56519, 59, 32768, 8625, 512, 98, 117, 15295, 15298, 59, 32768, 93, 111, 512, 59, 114, 15304, 15306, 32768, 8217, 59, 32768, 8217, 768, 104, 105, 114, 15316, 15322, 15328, 114, 101, 101, 59, 32768, 8908, 109, 101, 115, 59, 32768, 8906, 105, 1024, 59, 101, 102, 108, 15338, 15340, 15343, 15346, 32768, 9657, 59, 32768, 8885, 59, 32768, 9656, 116, 114, 105, 59, 32768, 10702, 108, 117, 104, 97, 114, 59, 32768, 10600, 59, 32768, 8478, 6706, 15391, 15398, 15404, 15499, 15516, 15592, 0, 15606, 15660, 0, 0, 15752, 15758, 0, 15827, 15863, 15886, 16e3, 16006, 16038, 16086, 0, 16467, 0, 0, 16506, 99, 117, 116, 101, 59, 32768, 347, 113, 117, 111, 59, 32768, 8218, 2560, 59, 69, 97, 99, 101, 105, 110, 112, 115, 121, 15424, 15426, 15429, 15441, 15446, 15458, 15463, 15482, 15490, 15495, 32768, 8827, 59, 32768, 10932, 833, 15434, 0, 15437, 59, 32768, 10936, 111, 110, 59, 32768, 353, 117, 101, 59, 32768, 8829, 512, 59, 100, 15451, 15453, 32768, 10928, 105, 108, 59, 32768, 351, 114, 99, 59, 32768, 349, 768, 69, 97, 115, 15470, 15473, 15477, 59, 32768, 10934, 112, 59, 32768, 10938, 105, 109, 59, 32768, 8937, 111, 108, 105, 110, 116, 59, 32768, 10771, 105, 109, 59, 32768, 8831, 59, 32768, 1089, 111, 116, 768, 59, 98, 101, 15507, 15509, 15512, 32768, 8901, 59, 32768, 8865, 59, 32768, 10854, 1792, 65, 97, 99, 109, 115, 116, 120, 15530, 15535, 15556, 15562, 15566, 15572, 15587, 114, 114, 59, 32768, 8664, 114, 512, 104, 114, 15541, 15545, 107, 59, 32768, 10533, 512, 59, 111, 15550, 15552, 32768, 8600, 119, 59, 32768, 8600, 116, 33024, 167, 59, 32768, 167, 105, 59, 32768, 59, 119, 97, 114, 59, 32768, 10537, 109, 512, 105, 110, 15578, 15584, 110, 117, 115, 59, 32768, 8726, 59, 32768, 8726, 116, 59, 32768, 10038, 114, 512, 59, 111, 15597, 15600, 32896, 55349, 56624, 119, 110, 59, 32768, 8994, 1024, 97, 99, 111, 121, 15614, 15619, 15632, 15654, 114, 112, 59, 32768, 9839, 512, 104, 121, 15624, 15629, 99, 121, 59, 32768, 1097, 59, 32768, 1096, 114, 116, 1086, 15640, 0, 0, 15645, 105, 100, 59, 32768, 8739, 97, 114, 97, 108, 108, 101, 108, 59, 32768, 8741, 33024, 173, 59, 32768, 173, 512, 103, 109, 15664, 15681, 109, 97, 768, 59, 102, 118, 15673, 15675, 15678, 32768, 963, 59, 32768, 962, 59, 32768, 962, 2048, 59, 100, 101, 103, 108, 110, 112, 114, 15698, 15700, 15705, 15715, 15725, 15735, 15739, 15745, 32768, 8764, 111, 116, 59, 32768, 10858, 512, 59, 113, 15710, 15712, 32768, 8771, 59, 32768, 8771, 512, 59, 69, 15720, 15722, 32768, 10910, 59, 32768, 10912, 512, 59, 69, 15730, 15732, 32768, 10909, 59, 32768, 10911, 101, 59, 32768, 8774, 108, 117, 115, 59, 32768, 10788, 97, 114, 114, 59, 32768, 10610, 97, 114, 114, 59, 32768, 8592, 1024, 97, 101, 105, 116, 15766, 15788, 15796, 15808, 512, 108, 115, 15771, 15783, 108, 115, 101, 116, 109, 105, 110, 117, 115, 59, 32768, 8726, 104, 112, 59, 32768, 10803, 112, 97, 114, 115, 108, 59, 32768, 10724, 512, 100, 108, 15801, 15804, 59, 32768, 8739, 101, 59, 32768, 8995, 512, 59, 101, 15813, 15815, 32768, 10922, 512, 59, 115, 15820, 15822, 32768, 10924, 59, 32896, 10924, 65024, 768, 102, 108, 112, 15833, 15839, 15857, 116, 99, 121, 59, 32768, 1100, 512, 59, 98, 15844, 15846, 32768, 47, 512, 59, 97, 15851, 15853, 32768, 10692, 114, 59, 32768, 9023, 102, 59, 32896, 55349, 56676, 97, 512, 100, 114, 15868, 15882, 101, 115, 512, 59, 117, 15875, 15877, 32768, 9824, 105, 116, 59, 32768, 9824, 59, 32768, 8741, 768, 99, 115, 117, 15892, 15921, 15977, 512, 97, 117, 15897, 15909, 112, 512, 59, 115, 15903, 15905, 32768, 8851, 59, 32896, 8851, 65024, 112, 512, 59, 115, 15915, 15917, 32768, 8852, 59, 32896, 8852, 65024, 117, 512, 98, 112, 15927, 15952, 768, 59, 101, 115, 15934, 15936, 15939, 32768, 8847, 59, 32768, 8849, 101, 116, 512, 59, 101, 15946, 15948, 32768, 8847, 113, 59, 32768, 8849, 768, 59, 101, 115, 15959, 15961, 15964, 32768, 8848, 59, 32768, 8850, 101, 116, 512, 59, 101, 15971, 15973, 32768, 8848, 113, 59, 32768, 8850, 768, 59, 97, 102, 15984, 15986, 15996, 32768, 9633, 114, 566, 15991, 15994, 59, 32768, 9633, 59, 32768, 9642, 59, 32768, 9642, 97, 114, 114, 59, 32768, 8594, 1024, 99, 101, 109, 116, 16014, 16019, 16025, 16031, 114, 59, 32896, 55349, 56520, 116, 109, 110, 59, 32768, 8726, 105, 108, 101, 59, 32768, 8995, 97, 114, 102, 59, 32768, 8902, 512, 97, 114, 16042, 16053, 114, 512, 59, 102, 16048, 16050, 32768, 9734, 59, 32768, 9733, 512, 97, 110, 16058, 16081, 105, 103, 104, 116, 512, 101, 112, 16067, 16076, 112, 115, 105, 108, 111, 110, 59, 32768, 1013, 104, 105, 59, 32768, 981, 115, 59, 32768, 175, 1280, 98, 99, 109, 110, 112, 16096, 16221, 16288, 16291, 16295, 2304, 59, 69, 100, 101, 109, 110, 112, 114, 115, 16115, 16117, 16120, 16125, 16137, 16143, 16154, 16160, 16166, 32768, 8834, 59, 32768, 10949, 111, 116, 59, 32768, 10941, 512, 59, 100, 16130, 16132, 32768, 8838, 111, 116, 59, 32768, 10947, 117, 108, 116, 59, 32768, 10945, 512, 69, 101, 16148, 16151, 59, 32768, 10955, 59, 32768, 8842, 108, 117, 115, 59, 32768, 10943, 97, 114, 114, 59, 32768, 10617, 768, 101, 105, 117, 16173, 16206, 16210, 116, 768, 59, 101, 110, 16181, 16183, 16194, 32768, 8834, 113, 512, 59, 113, 16189, 16191, 32768, 8838, 59, 32768, 10949, 101, 113, 512, 59, 113, 16201, 16203, 32768, 8842, 59, 32768, 10955, 109, 59, 32768, 10951, 512, 98, 112, 16215, 16218, 59, 32768, 10965, 59, 32768, 10963, 99, 1536, 59, 97, 99, 101, 110, 115, 16235, 16237, 16245, 16254, 16258, 16283, 32768, 8827, 112, 112, 114, 111, 120, 59, 32768, 10936, 117, 114, 108, 121, 101, 113, 59, 32768, 8829, 113, 59, 32768, 10928, 768, 97, 101, 115, 16265, 16273, 16278, 112, 112, 114, 111, 120, 59, 32768, 10938, 113, 113, 59, 32768, 10934, 105, 109, 59, 32768, 8937, 105, 109, 59, 32768, 8831, 59, 32768, 8721, 103, 59, 32768, 9834, 3328, 49, 50, 51, 59, 69, 100, 101, 104, 108, 109, 110, 112, 115, 16322, 16327, 16332, 16337, 16339, 16342, 16356, 16368, 16382, 16388, 16394, 16405, 16411, 33024, 185, 59, 32768, 185, 33024, 178, 59, 32768, 178, 33024, 179, 59, 32768, 179, 32768, 8835, 59, 32768, 10950, 512, 111, 115, 16347, 16351, 116, 59, 32768, 10942, 117, 98, 59, 32768, 10968, 512, 59, 100, 16361, 16363, 32768, 8839, 111, 116, 59, 32768, 10948, 115, 512, 111, 117, 16374, 16378, 108, 59, 32768, 10185, 98, 59, 32768, 10967, 97, 114, 114, 59, 32768, 10619, 117, 108, 116, 59, 32768, 10946, 512, 69, 101, 16399, 16402, 59, 32768, 10956, 59, 32768, 8843, 108, 117, 115, 59, 32768, 10944, 768, 101, 105, 117, 16418, 16451, 16455, 116, 768, 59, 101, 110, 16426, 16428, 16439, 32768, 8835, 113, 512, 59, 113, 16434, 16436, 32768, 8839, 59, 32768, 10950, 101, 113, 512, 59, 113, 16446, 16448, 32768, 8843, 59, 32768, 10956, 109, 59, 32768, 10952, 512, 98, 112, 16460, 16463, 59, 32768, 10964, 59, 32768, 10966, 768, 65, 97, 110, 16473, 16478, 16499, 114, 114, 59, 32768, 8665, 114, 512, 104, 114, 16484, 16488, 107, 59, 32768, 10534, 512, 59, 111, 16493, 16495, 32768, 8601, 119, 59, 32768, 8601, 119, 97, 114, 59, 32768, 10538, 108, 105, 103, 33024, 223, 59, 32768, 223, 5938, 16538, 16552, 16557, 16579, 16584, 16591, 0, 16596, 16692, 0, 0, 0, 0, 0, 16731, 16780, 0, 16787, 16908, 0, 0, 0, 16938, 1091, 16543, 0, 0, 16549, 103, 101, 116, 59, 32768, 8982, 59, 32768, 964, 114, 107, 59, 32768, 9140, 768, 97, 101, 121, 16563, 16569, 16575, 114, 111, 110, 59, 32768, 357, 100, 105, 108, 59, 32768, 355, 59, 32768, 1090, 111, 116, 59, 32768, 8411, 108, 114, 101, 99, 59, 32768, 8981, 114, 59, 32896, 55349, 56625, 1024, 101, 105, 107, 111, 16604, 16641, 16670, 16684, 835, 16609, 0, 16624, 101, 512, 52, 102, 16614, 16617, 59, 32768, 8756, 111, 114, 101, 59, 32768, 8756, 97, 768, 59, 115, 118, 16631, 16633, 16638, 32768, 952, 121, 109, 59, 32768, 977, 59, 32768, 977, 512, 99, 110, 16646, 16665, 107, 512, 97, 115, 16652, 16660, 112, 112, 114, 111, 120, 59, 32768, 8776, 105, 109, 59, 32768, 8764, 115, 112, 59, 32768, 8201, 512, 97, 115, 16675, 16679, 112, 59, 32768, 8776, 105, 109, 59, 32768, 8764, 114, 110, 33024, 254, 59, 32768, 254, 829, 16696, 16701, 16727, 100, 101, 59, 32768, 732, 101, 115, 33536, 215, 59, 98, 100, 16710, 16712, 16723, 32768, 215, 512, 59, 97, 16717, 16719, 32768, 8864, 114, 59, 32768, 10801, 59, 32768, 10800, 116, 59, 32768, 8749, 768, 101, 112, 115, 16737, 16741, 16775, 97, 59, 32768, 10536, 1024, 59, 98, 99, 102, 16750, 16752, 16757, 16762, 32768, 8868, 111, 116, 59, 32768, 9014, 105, 114, 59, 32768, 10993, 512, 59, 111, 16767, 16770, 32896, 55349, 56677, 114, 107, 59, 32768, 10970, 97, 59, 32768, 10537, 114, 105, 109, 101, 59, 32768, 8244, 768, 97, 105, 112, 16793, 16798, 16899, 100, 101, 59, 32768, 8482, 1792, 97, 100, 101, 109, 112, 115, 116, 16813, 16868, 16873, 16876, 16883, 16889, 16893, 110, 103, 108, 101, 1280, 59, 100, 108, 113, 114, 16828, 16830, 16836, 16850, 16853, 32768, 9653, 111, 119, 110, 59, 32768, 9663, 101, 102, 116, 512, 59, 101, 16844, 16846, 32768, 9667, 113, 59, 32768, 8884, 59, 32768, 8796, 105, 103, 104, 116, 512, 59, 101, 16862, 16864, 32768, 9657, 113, 59, 32768, 8885, 111, 116, 59, 32768, 9708, 59, 32768, 8796, 105, 110, 117, 115, 59, 32768, 10810, 108, 117, 115, 59, 32768, 10809, 98, 59, 32768, 10701, 105, 109, 101, 59, 32768, 10811, 101, 122, 105, 117, 109, 59, 32768, 9186, 768, 99, 104, 116, 16914, 16926, 16931, 512, 114, 121, 16919, 16923, 59, 32896, 55349, 56521, 59, 32768, 1094, 99, 121, 59, 32768, 1115, 114, 111, 107, 59, 32768, 359, 512, 105, 111, 16942, 16947, 120, 116, 59, 32768, 8812, 104, 101, 97, 100, 512, 108, 114, 16956, 16967, 101, 102, 116, 97, 114, 114, 111, 119, 59, 32768, 8606, 105, 103, 104, 116, 97, 114, 114, 111, 119, 59, 32768, 8608, 4608, 65, 72, 97, 98, 99, 100, 102, 103, 104, 108, 109, 111, 112, 114, 115, 116, 117, 119, 17016, 17021, 17026, 17043, 17057, 17072, 17095, 17110, 17119, 17139, 17172, 17187, 17202, 17290, 17330, 17336, 17365, 17381, 114, 114, 59, 32768, 8657, 97, 114, 59, 32768, 10595, 512, 99, 114, 17031, 17039, 117, 116, 101, 33024, 250, 59, 32768, 250, 114, 59, 32768, 8593, 114, 820, 17049, 0, 17053, 121, 59, 32768, 1118, 118, 101, 59, 32768, 365, 512, 105, 121, 17062, 17069, 114, 99, 33024, 251, 59, 32768, 251, 59, 32768, 1091, 768, 97, 98, 104, 17079, 17084, 17090, 114, 114, 59, 32768, 8645, 108, 97, 99, 59, 32768, 369, 97, 114, 59, 32768, 10606, 512, 105, 114, 17100, 17106, 115, 104, 116, 59, 32768, 10622, 59, 32896, 55349, 56626, 114, 97, 118, 101, 33024, 249, 59, 32768, 249, 562, 17123, 17135, 114, 512, 108, 114, 17128, 17131, 59, 32768, 8639, 59, 32768, 8638, 108, 107, 59, 32768, 9600, 512, 99, 116, 17144, 17167, 1088, 17150, 0, 0, 17163, 114, 110, 512, 59, 101, 17156, 17158, 32768, 8988, 114, 59, 32768, 8988, 111, 112, 59, 32768, 8975, 114, 105, 59, 32768, 9720, 512, 97, 108, 17177, 17182, 99, 114, 59, 32768, 363, 33024, 168, 59, 32768, 168, 512, 103, 112, 17192, 17197, 111, 110, 59, 32768, 371, 102, 59, 32896, 55349, 56678, 1536, 97, 100, 104, 108, 115, 117, 17215, 17222, 17233, 17257, 17262, 17280, 114, 114, 111, 119, 59, 32768, 8593, 111, 119, 110, 97, 114, 114, 111, 119, 59, 32768, 8597, 97, 114, 112, 111, 111, 110, 512, 108, 114, 17244, 17250, 101, 102, 116, 59, 32768, 8639, 105, 103, 104, 116, 59, 32768, 8638, 117, 115, 59, 32768, 8846, 105, 768, 59, 104, 108, 17270, 17272, 17275, 32768, 965, 59, 32768, 978, 111, 110, 59, 32768, 965, 112, 97, 114, 114, 111, 119, 115, 59, 32768, 8648, 768, 99, 105, 116, 17297, 17320, 17325, 1088, 17303, 0, 0, 17316, 114, 110, 512, 59, 101, 17309, 17311, 32768, 8989, 114, 59, 32768, 8989, 111, 112, 59, 32768, 8974, 110, 103, 59, 32768, 367, 114, 105, 59, 32768, 9721, 99, 114, 59, 32896, 55349, 56522, 768, 100, 105, 114, 17343, 17348, 17354, 111, 116, 59, 32768, 8944, 108, 100, 101, 59, 32768, 361, 105, 512, 59, 102, 17360, 17362, 32768, 9653, 59, 32768, 9652, 512, 97, 109, 17370, 17375, 114, 114, 59, 32768, 8648, 108, 33024, 252, 59, 32768, 252, 97, 110, 103, 108, 101, 59, 32768, 10663, 3840, 65, 66, 68, 97, 99, 100, 101, 102, 108, 110, 111, 112, 114, 115, 122, 17420, 17425, 17437, 17443, 17613, 17617, 17623, 17667, 17672, 17678, 17693, 17699, 17705, 17711, 17754, 114, 114, 59, 32768, 8661, 97, 114, 512, 59, 118, 17432, 17434, 32768, 10984, 59, 32768, 10985, 97, 115, 104, 59, 32768, 8872, 512, 110, 114, 17448, 17454, 103, 114, 116, 59, 32768, 10652, 1792, 101, 107, 110, 112, 114, 115, 116, 17469, 17478, 17485, 17494, 17515, 17526, 17578, 112, 115, 105, 108, 111, 110, 59, 32768, 1013, 97, 112, 112, 97, 59, 32768, 1008, 111, 116, 104, 105, 110, 103, 59, 32768, 8709, 768, 104, 105, 114, 17501, 17505, 17508, 105, 59, 32768, 981, 59, 32768, 982, 111, 112, 116, 111, 59, 32768, 8733, 512, 59, 104, 17520, 17522, 32768, 8597, 111, 59, 32768, 1009, 512, 105, 117, 17531, 17537, 103, 109, 97, 59, 32768, 962, 512, 98, 112, 17542, 17560, 115, 101, 116, 110, 101, 113, 512, 59, 113, 17553, 17556, 32896, 8842, 65024, 59, 32896, 10955, 65024, 115, 101, 116, 110, 101, 113, 512, 59, 113, 17571, 17574, 32896, 8843, 65024, 59, 32896, 10956, 65024, 512, 104, 114, 17583, 17589, 101, 116, 97, 59, 32768, 977, 105, 97, 110, 103, 108, 101, 512, 108, 114, 17600, 17606, 101, 102, 116, 59, 32768, 8882, 105, 103, 104, 116, 59, 32768, 8883, 121, 59, 32768, 1074, 97, 115, 104, 59, 32768, 8866, 768, 101, 108, 114, 17630, 17648, 17654, 768, 59, 98, 101, 17637, 17639, 17644, 32768, 8744, 97, 114, 59, 32768, 8891, 113, 59, 32768, 8794, 108, 105, 112, 59, 32768, 8942, 512, 98, 116, 17659, 17664, 97, 114, 59, 32768, 124, 59, 32768, 124, 114, 59, 32896, 55349, 56627, 116, 114, 105, 59, 32768, 8882, 115, 117, 512, 98, 112, 17685, 17689, 59, 32896, 8834, 8402, 59, 32896, 8835, 8402, 112, 102, 59, 32896, 55349, 56679, 114, 111, 112, 59, 32768, 8733, 116, 114, 105, 59, 32768, 8883, 512, 99, 117, 17716, 17721, 114, 59, 32896, 55349, 56523, 512, 98, 112, 17726, 17740, 110, 512, 69, 101, 17732, 17736, 59, 32896, 10955, 65024, 59, 32896, 8842, 65024, 110, 512, 69, 101, 17746, 17750, 59, 32896, 10956, 65024, 59, 32896, 8843, 65024, 105, 103, 122, 97, 103, 59, 32768, 10650, 1792, 99, 101, 102, 111, 112, 114, 115, 17777, 17783, 17815, 17820, 17826, 17829, 17842, 105, 114, 99, 59, 32768, 373, 512, 100, 105, 17788, 17809, 512, 98, 103, 17793, 17798, 97, 114, 59, 32768, 10847, 101, 512, 59, 113, 17804, 17806, 32768, 8743, 59, 32768, 8793, 101, 114, 112, 59, 32768, 8472, 114, 59, 32896, 55349, 56628, 112, 102, 59, 32896, 55349, 56680, 59, 32768, 8472, 512, 59, 101, 17834, 17836, 32768, 8768, 97, 116, 104, 59, 32768, 8768, 99, 114, 59, 32896, 55349, 56524, 5428, 17871, 17891, 0, 17897, 0, 17902, 17917, 0, 0, 17920, 17935, 17940, 17945, 0, 0, 17977, 17992, 0, 18008, 18024, 18029, 768, 97, 105, 117, 17877, 17881, 17886, 112, 59, 32768, 8898, 114, 99, 59, 32768, 9711, 112, 59, 32768, 8899, 116, 114, 105, 59, 32768, 9661, 114, 59, 32896, 55349, 56629, 512, 65, 97, 17906, 17911, 114, 114, 59, 32768, 10234, 114, 114, 59, 32768, 10231, 59, 32768, 958, 512, 65, 97, 17924, 17929, 114, 114, 59, 32768, 10232, 114, 114, 59, 32768, 10229, 97, 112, 59, 32768, 10236, 105, 115, 59, 32768, 8955, 768, 100, 112, 116, 17951, 17956, 17970, 111, 116, 59, 32768, 10752, 512, 102, 108, 17961, 17965, 59, 32896, 55349, 56681, 117, 115, 59, 32768, 10753, 105, 109, 101, 59, 32768, 10754, 512, 65, 97, 17981, 17986, 114, 114, 59, 32768, 10233, 114, 114, 59, 32768, 10230, 512, 99, 113, 17996, 18001, 114, 59, 32896, 55349, 56525, 99, 117, 112, 59, 32768, 10758, 512, 112, 116, 18012, 18018, 108, 117, 115, 59, 32768, 10756, 114, 105, 59, 32768, 9651, 101, 101, 59, 32768, 8897, 101, 100, 103, 101, 59, 32768, 8896, 2048, 97, 99, 101, 102, 105, 111, 115, 117, 18052, 18068, 18081, 18087, 18092, 18097, 18103, 18109, 99, 512, 117, 121, 18058, 18065, 116, 101, 33024, 253, 59, 32768, 253, 59, 32768, 1103, 512, 105, 121, 18073, 18078, 114, 99, 59, 32768, 375, 59, 32768, 1099, 110, 33024, 165, 59, 32768, 165, 114, 59, 32896, 55349, 56630, 99, 121, 59, 32768, 1111, 112, 102, 59, 32896, 55349, 56682, 99, 114, 59, 32896, 55349, 56526, 512, 99, 109, 18114, 18118, 121, 59, 32768, 1102, 108, 33024, 255, 59, 32768, 255, 2560, 97, 99, 100, 101, 102, 104, 105, 111, 115, 119, 18145, 18152, 18166, 18171, 18186, 18191, 18196, 18204, 18210, 18216, 99, 117, 116, 101, 59, 32768, 378, 512, 97, 121, 18157, 18163, 114, 111, 110, 59, 32768, 382, 59, 32768, 1079, 111, 116, 59, 32768, 380, 512, 101, 116, 18176, 18182, 116, 114, 102, 59, 32768, 8488, 97, 59, 32768, 950, 114, 59, 32896, 55349, 56631, 99, 121, 59, 32768, 1078, 103, 114, 97, 114, 114, 59, 32768, 8669, 112, 102, 59, 32896, 55349, 56683, 99, 114, 59, 32896, 55349, 56527, 512, 106, 110, 18221, 18224, 59, 32768, 8205, 106, 59, 32768, 8204]);
    }
  });

  // node_modules/.pnpm/entities@3.0.1/node_modules/entities/lib/generated/decode-data-xml.js
  var require_decode_data_xml = __commonJS({
    "node_modules/.pnpm/entities@3.0.1/node_modules/entities/lib/generated/decode-data-xml.js"(exports) {
      "use strict";
      init_env();
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.default = new Uint16Array([1024, 97, 103, 108, 113, 9, 23, 27, 31, 1086, 15, 0, 0, 19, 112, 59, 32768, 38, 111, 115, 59, 32768, 39, 116, 59, 32768, 62, 116, 59, 32768, 60, 117, 111, 116, 59, 32768, 34]);
    }
  });

  // node_modules/.pnpm/entities@3.0.1/node_modules/entities/lib/decode.js
  var require_decode = __commonJS({
    "node_modules/.pnpm/entities@3.0.1/node_modules/entities/lib/decode.js"(exports) {
      "use strict";
      init_env();
      var __importDefault2 = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.decodeXML = exports.decodeHTMLStrict = exports.decodeHTML = exports.determineBranch = exports.JUMP_OFFSET_BASE = exports.BinTrieFlags = exports.xmlDecodeTree = exports.htmlDecodeTree = void 0;
      var decode_data_html_1 = __importDefault2(require_decode_data_html());
      exports.htmlDecodeTree = decode_data_html_1.default;
      var decode_data_xml_1 = __importDefault2(require_decode_data_xml());
      exports.xmlDecodeTree = decode_data_xml_1.default;
      var decode_codepoint_1 = __importDefault2(require_decode_codepoint());
      var BinTrieFlags;
      (function(BinTrieFlags2) {
        BinTrieFlags2[BinTrieFlags2["HAS_VALUE"] = 32768] = "HAS_VALUE";
        BinTrieFlags2[BinTrieFlags2["BRANCH_LENGTH"] = 32512] = "BRANCH_LENGTH";
        BinTrieFlags2[BinTrieFlags2["MULTI_BYTE"] = 128] = "MULTI_BYTE";
        BinTrieFlags2[BinTrieFlags2["JUMP_TABLE"] = 127] = "JUMP_TABLE";
      })(BinTrieFlags = exports.BinTrieFlags || (exports.BinTrieFlags = {}));
      exports.JUMP_OFFSET_BASE = 48 - 1;
      function getDecoder(decodeTree) {
        return function decodeHTMLBinary(str, strict) {
          var ret = "";
          var lastIdx = 0;
          var strIdx = 0;
          while ((strIdx = str.indexOf("&", strIdx)) >= 0) {
            ret += str.slice(lastIdx, strIdx);
            lastIdx = strIdx;
            strIdx += 1;
            if (str.charCodeAt(strIdx) === 35) {
              var start = strIdx + 1;
              var base2 = 10;
              var cp = str.charCodeAt(start);
              if ((cp | 32) === 120) {
                base2 = 16;
                strIdx += 1;
                start += 1;
              }
              while ((cp = str.charCodeAt(++strIdx)) >= 48 && cp <= 57 || base2 === 16 && (cp | 32) >= 97 && (cp | 32) <= 102)
                ;
              if (start !== strIdx) {
                var entity = str.substring(start, strIdx);
                var parsed = parseInt(entity, base2);
                if (str.charCodeAt(strIdx) === 59) {
                  strIdx += 1;
                } else if (strict) {
                  continue;
                }
                ret += decode_codepoint_1.default(parsed);
                lastIdx = strIdx;
              }
              continue;
            }
            var result = null;
            var excess = 1;
            var treeIdx = 0;
            var current = decodeTree[treeIdx];
            for (; strIdx < str.length; strIdx++, excess++) {
              treeIdx = determineBranch(decodeTree, current, treeIdx + 1, str.charCodeAt(strIdx));
              if (treeIdx < 0)
                break;
              current = decodeTree[treeIdx];
              if (current & BinTrieFlags.HAS_VALUE) {
                if (strict && str.charCodeAt(strIdx) !== 59) {
                  treeIdx += 1;
                } else {
                  result = current & BinTrieFlags.MULTI_BYTE ? String.fromCharCode(decodeTree[++treeIdx], decodeTree[++treeIdx]) : String.fromCharCode(decodeTree[++treeIdx]);
                  excess = 0;
                }
              }
            }
            if (result != null) {
              ret += result;
              lastIdx = strIdx - excess + 1;
            }
          }
          return ret + str.slice(lastIdx);
        };
      }
      function determineBranch(decodeTree, current, nodeIdx, char) {
        if (current <= 128) {
          return char === current ? nodeIdx : -1;
        }
        var branchCount = (current & BinTrieFlags.BRANCH_LENGTH) >> 8;
        if (branchCount === 0) {
          return -1;
        }
        if (branchCount === 1) {
          return char === decodeTree[nodeIdx] ? nodeIdx + 1 : -1;
        }
        var jumpOffset = current & BinTrieFlags.JUMP_TABLE;
        if (jumpOffset) {
          var value = char - exports.JUMP_OFFSET_BASE - jumpOffset;
          return value < 0 || value > branchCount ? -1 : decodeTree[nodeIdx + value] - 1;
        }
        var lo = nodeIdx;
        var hi = lo + branchCount - 1;
        while (lo <= hi) {
          var mid = lo + hi >>> 1;
          var midVal = decodeTree[mid];
          if (midVal < char) {
            lo = mid + 1;
          } else if (midVal > char) {
            hi = mid - 1;
          } else {
            return decodeTree[mid + branchCount];
          }
        }
        return -1;
      }
      exports.determineBranch = determineBranch;
      var htmlDecoder = getDecoder(decode_data_html_1.default);
      var xmlDecoder = getDecoder(decode_data_xml_1.default);
      function decodeHTML(str) {
        return htmlDecoder(str, false);
      }
      exports.decodeHTML = decodeHTML;
      function decodeHTMLStrict(str) {
        return htmlDecoder(str, true);
      }
      exports.decodeHTMLStrict = decodeHTMLStrict;
      function decodeXML(str) {
        return xmlDecoder(str, true);
      }
      exports.decodeXML = decodeXML;
    }
  });

  // node_modules/.pnpm/htmlparser2@7.2.0/node_modules/htmlparser2/lib/Tokenizer.js
  var require_Tokenizer = __commonJS({
    "node_modules/.pnpm/htmlparser2@7.2.0/node_modules/htmlparser2/lib/Tokenizer.js"(exports) {
      "use strict";
      init_env();
      var __importDefault2 = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      var decode_codepoint_1 = __importDefault2(require_decode_codepoint());
      var decode_1 = require_decode();
      function isWhitespace(c2) {
        return c2 === 32 || c2 === 10 || c2 === 9 || c2 === 12 || c2 === 13;
      }
      function isEndOfTagSection(c2) {
        return c2 === 47 || c2 === 62 || isWhitespace(c2);
      }
      function isNumber(c2) {
        return c2 >= 48 && c2 <= 57;
      }
      function isASCIIAlpha(c2) {
        return c2 >= 97 && c2 <= 122 || c2 >= 65 && c2 <= 90;
      }
      var Sequences = {
        Cdata: new Uint16Array([67, 68, 65, 84, 65, 91]),
        CdataEnd: new Uint16Array([93, 93, 62]),
        CommentEnd: new Uint16Array([45, 45, 62]),
        ScriptEnd: new Uint16Array([
          60,
          47,
          115,
          99,
          114,
          105,
          112,
          116
        ]),
        StyleEnd: new Uint16Array([60, 47, 115, 116, 121, 108, 101]),
        TitleEnd: new Uint16Array([60, 47, 116, 105, 116, 108, 101])
      };
      var Tokenizer = function() {
        function Tokenizer2(_a8, cbs) {
          var _b3 = _a8.xmlMode, xmlMode = _b3 === void 0 ? false : _b3, _c = _a8.decodeEntities, decodeEntities = _c === void 0 ? true : _c;
          this.cbs = cbs;
          this._state = 1;
          this.buffer = "";
          this.sectionStart = 0;
          this._index = 0;
          this.bufferOffset = 0;
          this.baseState = 1;
          this.isSpecial = false;
          this.running = true;
          this.ended = false;
          this.sequenceIndex = 0;
          this.trieIndex = 0;
          this.trieCurrent = 0;
          this.trieResult = null;
          this.entityExcess = 0;
          this.xmlMode = xmlMode;
          this.decodeEntities = decodeEntities;
          this.entityTrie = xmlMode ? decode_1.xmlDecodeTree : decode_1.htmlDecodeTree;
        }
        Tokenizer2.prototype.reset = function() {
          this._state = 1;
          this.buffer = "";
          this.sectionStart = 0;
          this._index = 0;
          this.bufferOffset = 0;
          this.baseState = 1;
          this.currentSequence = void 0;
          this.running = true;
          this.ended = false;
        };
        Tokenizer2.prototype.write = function(chunk) {
          if (this.ended)
            return this.cbs.onerror(Error(".write() after done!"));
          this.buffer += chunk;
          this.parse();
        };
        Tokenizer2.prototype.end = function(chunk) {
          if (this.ended)
            return this.cbs.onerror(Error(".end() after done!"));
          if (chunk)
            this.write(chunk);
          this.ended = true;
          if (this.running)
            this.finish();
        };
        Tokenizer2.prototype.pause = function() {
          this.running = false;
        };
        Tokenizer2.prototype.resume = function() {
          this.running = true;
          if (this._index < this.buffer.length) {
            this.parse();
          }
          if (this.ended) {
            this.finish();
          }
        };
        Tokenizer2.prototype.getAbsoluteSectionStart = function() {
          return this.sectionStart + this.bufferOffset;
        };
        Tokenizer2.prototype.getAbsoluteIndex = function() {
          return this.bufferOffset + this._index;
        };
        Tokenizer2.prototype.stateText = function(c2) {
          if (c2 === 60 || !this.decodeEntities && this.fastForwardTo(60)) {
            if (this._index > this.sectionStart) {
              this.cbs.ontext(this.getSection());
            }
            this._state = 2;
            this.sectionStart = this._index;
          } else if (this.decodeEntities && c2 === 38) {
            this._state = 25;
          }
        };
        Tokenizer2.prototype.stateSpecialStartSequence = function(c2) {
          var isEnd = this.sequenceIndex === this.currentSequence.length;
          var isMatch = isEnd ? isEndOfTagSection(c2) : (c2 | 32) === this.currentSequence[this.sequenceIndex];
          if (!isMatch) {
            this.isSpecial = false;
          } else if (!isEnd) {
            this.sequenceIndex++;
            return;
          }
          this.sequenceIndex = 0;
          this._state = 3;
          this.stateInTagName(c2);
        };
        Tokenizer2.prototype.stateInSpecialTag = function(c2) {
          if (this.sequenceIndex === this.currentSequence.length) {
            if (c2 === 62 || isWhitespace(c2)) {
              var endOfText = this._index - this.currentSequence.length;
              if (this.sectionStart < endOfText) {
                var actualIndex = this._index;
                this._index = endOfText;
                this.cbs.ontext(this.getSection());
                this._index = actualIndex;
              }
              this.isSpecial = false;
              this.sectionStart = endOfText + 2;
              this.stateInClosingTagName(c2);
              return;
            }
            this.sequenceIndex = 0;
          }
          if ((c2 | 32) === this.currentSequence[this.sequenceIndex]) {
            this.sequenceIndex += 1;
          } else if (this.sequenceIndex === 0) {
            if (this.currentSequence === Sequences.TitleEnd) {
              if (this.decodeEntities && c2 === 38) {
                this._state = 25;
              }
            } else if (this.fastForwardTo(60)) {
              this.sequenceIndex = 1;
            }
          } else {
            this.sequenceIndex = Number(c2 === 60);
          }
        };
        Tokenizer2.prototype.stateCDATASequence = function(c2) {
          if (c2 === Sequences.Cdata[this.sequenceIndex]) {
            if (++this.sequenceIndex === Sequences.Cdata.length) {
              this._state = 21;
              this.currentSequence = Sequences.CdataEnd;
              this.sequenceIndex = 0;
              this.sectionStart = this._index + 1;
            }
          } else {
            this.sequenceIndex = 0;
            this._state = 16;
            this.stateInDeclaration(c2);
          }
        };
        Tokenizer2.prototype.fastForwardTo = function(c2) {
          while (++this._index < this.buffer.length) {
            if (this.buffer.charCodeAt(this._index) === c2) {
              return true;
            }
          }
          this._index = this.buffer.length - 1;
          return false;
        };
        Tokenizer2.prototype.stateInCommentLike = function(c2) {
          if (c2 === this.currentSequence[this.sequenceIndex]) {
            if (++this.sequenceIndex === this.currentSequence.length) {
              var section = this.buffer.slice(this.sectionStart, this._index - 2);
              if (this.currentSequence === Sequences.CdataEnd) {
                this.cbs.oncdata(section);
              } else {
                this.cbs.oncomment(section);
              }
              this.sequenceIndex = 0;
              this.sectionStart = this._index + 1;
              this._state = 1;
            }
          } else if (this.sequenceIndex === 0) {
            if (this.fastForwardTo(this.currentSequence[0])) {
              this.sequenceIndex = 1;
            }
          } else if (c2 !== this.currentSequence[this.sequenceIndex - 1]) {
            this.sequenceIndex = 0;
          }
        };
        Tokenizer2.prototype.isTagStartChar = function(c2) {
          return this.xmlMode ? !isEndOfTagSection(c2) : isASCIIAlpha(c2);
        };
        Tokenizer2.prototype.startSpecial = function(sequence, offset) {
          this.isSpecial = true;
          this.currentSequence = sequence;
          this.sequenceIndex = offset;
          this._state = 23;
        };
        Tokenizer2.prototype.stateBeforeTagName = function(c2) {
          if (c2 === 33) {
            this._state = 15;
            this.sectionStart = this._index + 1;
          } else if (c2 === 63) {
            this._state = 17;
            this.sectionStart = this._index + 1;
          } else if (this.isTagStartChar(c2)) {
            var lower = c2 | 32;
            this.sectionStart = this._index;
            if (!this.xmlMode && lower === Sequences.TitleEnd[2]) {
              this.startSpecial(Sequences.TitleEnd, 3);
            } else {
              this._state = !this.xmlMode && lower === Sequences.ScriptEnd[2] ? 22 : 3;
            }
          } else if (c2 === 47) {
            this._state = 5;
          } else {
            this._state = 1;
            this.stateText(c2);
          }
        };
        Tokenizer2.prototype.stateInTagName = function(c2) {
          if (isEndOfTagSection(c2)) {
            this.cbs.onopentagname(this.getSection());
            this.sectionStart = -1;
            this._state = 8;
            this.stateBeforeAttributeName(c2);
          }
        };
        Tokenizer2.prototype.stateBeforeClosingTagName = function(c2) {
          if (isWhitespace(c2)) {
          } else if (c2 === 62) {
            this._state = 1;
          } else {
            this._state = this.isTagStartChar(c2) ? 6 : 20;
            this.sectionStart = this._index;
          }
        };
        Tokenizer2.prototype.stateInClosingTagName = function(c2) {
          if (c2 === 62 || isWhitespace(c2)) {
            this.cbs.onclosetag(this.getSection());
            this.sectionStart = -1;
            this._state = 7;
            this.stateAfterClosingTagName(c2);
          }
        };
        Tokenizer2.prototype.stateAfterClosingTagName = function(c2) {
          if (c2 === 62 || this.fastForwardTo(62)) {
            this._state = 1;
            this.sectionStart = this._index + 1;
          }
        };
        Tokenizer2.prototype.stateBeforeAttributeName = function(c2) {
          if (c2 === 62) {
            this.cbs.onopentagend();
            if (this.isSpecial) {
              this._state = 24;
              this.sequenceIndex = 0;
            } else {
              this._state = 1;
            }
            this.baseState = this._state;
            this.sectionStart = this._index + 1;
          } else if (c2 === 47) {
            this._state = 4;
          } else if (!isWhitespace(c2)) {
            this._state = 9;
            this.sectionStart = this._index;
          }
        };
        Tokenizer2.prototype.stateInSelfClosingTag = function(c2) {
          if (c2 === 62) {
            this.cbs.onselfclosingtag();
            this._state = 1;
            this.baseState = 1;
            this.sectionStart = this._index + 1;
            this.isSpecial = false;
          } else if (!isWhitespace(c2)) {
            this._state = 8;
            this.stateBeforeAttributeName(c2);
          }
        };
        Tokenizer2.prototype.stateInAttributeName = function(c2) {
          if (c2 === 61 || isEndOfTagSection(c2)) {
            this.cbs.onattribname(this.getSection());
            this.sectionStart = -1;
            this._state = 10;
            this.stateAfterAttributeName(c2);
          }
        };
        Tokenizer2.prototype.stateAfterAttributeName = function(c2) {
          if (c2 === 61) {
            this._state = 11;
          } else if (c2 === 47 || c2 === 62) {
            this.cbs.onattribend(void 0);
            this._state = 8;
            this.stateBeforeAttributeName(c2);
          } else if (!isWhitespace(c2)) {
            this.cbs.onattribend(void 0);
            this._state = 9;
            this.sectionStart = this._index;
          }
        };
        Tokenizer2.prototype.stateBeforeAttributeValue = function(c2) {
          if (c2 === 34) {
            this._state = 12;
            this.sectionStart = this._index + 1;
          } else if (c2 === 39) {
            this._state = 13;
            this.sectionStart = this._index + 1;
          } else if (!isWhitespace(c2)) {
            this.sectionStart = this._index;
            this._state = 14;
            this.stateInAttributeValueNoQuotes(c2);
          }
        };
        Tokenizer2.prototype.handleInAttributeValue = function(c2, quote) {
          if (c2 === quote || !this.decodeEntities && this.fastForwardTo(quote)) {
            this.cbs.onattribdata(this.getSection());
            this.sectionStart = -1;
            this.cbs.onattribend(String.fromCharCode(quote));
            this._state = 8;
          } else if (this.decodeEntities && c2 === 38) {
            this.baseState = this._state;
            this._state = 25;
          }
        };
        Tokenizer2.prototype.stateInAttributeValueDoubleQuotes = function(c2) {
          this.handleInAttributeValue(c2, 34);
        };
        Tokenizer2.prototype.stateInAttributeValueSingleQuotes = function(c2) {
          this.handleInAttributeValue(c2, 39);
        };
        Tokenizer2.prototype.stateInAttributeValueNoQuotes = function(c2) {
          if (isWhitespace(c2) || c2 === 62) {
            this.cbs.onattribdata(this.getSection());
            this.sectionStart = -1;
            this.cbs.onattribend(null);
            this._state = 8;
            this.stateBeforeAttributeName(c2);
          } else if (this.decodeEntities && c2 === 38) {
            this.baseState = this._state;
            this._state = 25;
          }
        };
        Tokenizer2.prototype.stateBeforeDeclaration = function(c2) {
          if (c2 === 91) {
            this._state = 19;
            this.sequenceIndex = 0;
          } else {
            this._state = c2 === 45 ? 18 : 16;
          }
        };
        Tokenizer2.prototype.stateInDeclaration = function(c2) {
          if (c2 === 62 || this.fastForwardTo(62)) {
            this.cbs.ondeclaration(this.getSection());
            this._state = 1;
            this.sectionStart = this._index + 1;
          }
        };
        Tokenizer2.prototype.stateInProcessingInstruction = function(c2) {
          if (c2 === 62 || this.fastForwardTo(62)) {
            this.cbs.onprocessinginstruction(this.getSection());
            this._state = 1;
            this.sectionStart = this._index + 1;
          }
        };
        Tokenizer2.prototype.stateBeforeComment = function(c2) {
          if (c2 === 45) {
            this._state = 21;
            this.currentSequence = Sequences.CommentEnd;
            this.sequenceIndex = 2;
            this.sectionStart = this._index + 1;
          } else {
            this._state = 16;
          }
        };
        Tokenizer2.prototype.stateInSpecialComment = function(c2) {
          if (c2 === 62 || this.fastForwardTo(62)) {
            this.cbs.oncomment(this.getSection());
            this._state = 1;
            this.sectionStart = this._index + 1;
          }
        };
        Tokenizer2.prototype.stateBeforeSpecialS = function(c2) {
          var lower = c2 | 32;
          if (lower === Sequences.ScriptEnd[3]) {
            this.startSpecial(Sequences.ScriptEnd, 4);
          } else if (lower === Sequences.StyleEnd[3]) {
            this.startSpecial(Sequences.StyleEnd, 4);
          } else {
            this._state = 3;
            this.stateInTagName(c2);
          }
        };
        Tokenizer2.prototype.stateBeforeEntity = function(c2) {
          this.entityExcess = 1;
          if (c2 === 35) {
            this._state = 26;
          } else if (c2 === 38) {
          } else {
            this.trieIndex = 0;
            this.trieCurrent = this.entityTrie[0];
            this.trieResult = null;
            this._state = 27;
            this.stateInNamedEntity(c2);
          }
        };
        Tokenizer2.prototype.stateInNamedEntity = function(c2) {
          this.entityExcess += 1;
          this.trieIndex = (0, decode_1.determineBranch)(this.entityTrie, this.trieCurrent, this.trieIndex + 1, c2);
          if (this.trieIndex < 0) {
            this.emitNamedEntity();
            this._index--;
            return;
          }
          this.trieCurrent = this.entityTrie[this.trieIndex];
          if (this.trieCurrent & decode_1.BinTrieFlags.HAS_VALUE) {
            if (!this.allowLegacyEntity() && c2 !== 59) {
              this.trieIndex += 1;
            } else {
              var entityStart = this._index - this.entityExcess + 1;
              if (entityStart > this.sectionStart) {
                this.emitPartial(this.buffer.substring(this.sectionStart, entityStart));
              }
              this.trieResult = this.trieCurrent & decode_1.BinTrieFlags.MULTI_BYTE ? String.fromCharCode(this.entityTrie[++this.trieIndex], this.entityTrie[++this.trieIndex]) : String.fromCharCode(this.entityTrie[++this.trieIndex]);
              this.entityExcess = 0;
              this.sectionStart = this._index + 1;
            }
          }
        };
        Tokenizer2.prototype.emitNamedEntity = function() {
          if (this.trieResult) {
            this.emitPartial(this.trieResult);
          }
          this._state = this.baseState;
        };
        Tokenizer2.prototype.stateBeforeNumericEntity = function(c2) {
          if ((c2 | 32) === 120) {
            this.entityExcess++;
            this._state = 29;
          } else {
            this._state = 28;
            this.stateInNumericEntity(c2);
          }
        };
        Tokenizer2.prototype.decodeNumericEntity = function(base2, strict) {
          var entityStart = this._index - this.entityExcess - 1;
          var numberStart = entityStart + 2 + (base2 >> 4);
          if (numberStart !== this._index) {
            if (entityStart > this.sectionStart) {
              this.emitPartial(this.buffer.substring(this.sectionStart, entityStart));
            }
            var entity = this.buffer.substring(numberStart, this._index);
            var parsed = parseInt(entity, base2);
            this.emitPartial((0, decode_codepoint_1.default)(parsed));
            this.sectionStart = this._index + Number(strict);
          }
          this._state = this.baseState;
        };
        Tokenizer2.prototype.stateInNumericEntity = function(c2) {
          if (c2 === 59) {
            this.decodeNumericEntity(10, true);
          } else if (!isNumber(c2)) {
            if (this.allowLegacyEntity()) {
              this.decodeNumericEntity(10, false);
            } else {
              this._state = this.baseState;
            }
            this._index--;
          } else {
            this.entityExcess++;
          }
        };
        Tokenizer2.prototype.stateInHexEntity = function(c2) {
          if (c2 === 59) {
            this.decodeNumericEntity(16, true);
          } else if ((c2 < 97 || c2 > 102) && (c2 < 65 || c2 > 70) && !isNumber(c2)) {
            if (this.allowLegacyEntity()) {
              this.decodeNumericEntity(16, false);
            } else {
              this._state = this.baseState;
            }
            this._index--;
          } else {
            this.entityExcess++;
          }
        };
        Tokenizer2.prototype.allowLegacyEntity = function() {
          return !this.xmlMode && (this.baseState === 1 || this.baseState === 24);
        };
        Tokenizer2.prototype.cleanup = function() {
          if (this.running && this.sectionStart !== this._index && (this._state === 1 || this._state === 24 && this.sequenceIndex === 0)) {
            this.cbs.ontext(this.buffer.substr(this.sectionStart));
            this.sectionStart = this._index;
          }
          var start = this.sectionStart < 0 ? this._index : this.sectionStart;
          this.buffer = start === this.buffer.length ? "" : this.buffer.substr(start);
          this._index -= start;
          this.bufferOffset += start;
          if (this.sectionStart > 0) {
            this.sectionStart = 0;
          }
        };
        Tokenizer2.prototype.shouldContinue = function() {
          return this._index < this.buffer.length && this.running;
        };
        Tokenizer2.prototype.parse = function() {
          while (this.shouldContinue()) {
            var c2 = this.buffer.charCodeAt(this._index);
            if (this._state === 1) {
              this.stateText(c2);
            } else if (this._state === 23) {
              this.stateSpecialStartSequence(c2);
            } else if (this._state === 24) {
              this.stateInSpecialTag(c2);
            } else if (this._state === 19) {
              this.stateCDATASequence(c2);
            } else if (this._state === 12) {
              this.stateInAttributeValueDoubleQuotes(c2);
            } else if (this._state === 9) {
              this.stateInAttributeName(c2);
            } else if (this._state === 21) {
              this.stateInCommentLike(c2);
            } else if (this._state === 20) {
              this.stateInSpecialComment(c2);
            } else if (this._state === 8) {
              this.stateBeforeAttributeName(c2);
            } else if (this._state === 3) {
              this.stateInTagName(c2);
            } else if (this._state === 6) {
              this.stateInClosingTagName(c2);
            } else if (this._state === 2) {
              this.stateBeforeTagName(c2);
            } else if (this._state === 10) {
              this.stateAfterAttributeName(c2);
            } else if (this._state === 13) {
              this.stateInAttributeValueSingleQuotes(c2);
            } else if (this._state === 11) {
              this.stateBeforeAttributeValue(c2);
            } else if (this._state === 5) {
              this.stateBeforeClosingTagName(c2);
            } else if (this._state === 7) {
              this.stateAfterClosingTagName(c2);
            } else if (this._state === 22) {
              this.stateBeforeSpecialS(c2);
            } else if (this._state === 14) {
              this.stateInAttributeValueNoQuotes(c2);
            } else if (this._state === 4) {
              this.stateInSelfClosingTag(c2);
            } else if (this._state === 16) {
              this.stateInDeclaration(c2);
            } else if (this._state === 15) {
              this.stateBeforeDeclaration(c2);
            } else if (this._state === 18) {
              this.stateBeforeComment(c2);
            } else if (this._state === 17) {
              this.stateInProcessingInstruction(c2);
            } else if (this._state === 27) {
              this.stateInNamedEntity(c2);
            } else if (this._state === 25) {
              this.stateBeforeEntity(c2);
            } else if (this._state === 29) {
              this.stateInHexEntity(c2);
            } else if (this._state === 28) {
              this.stateInNumericEntity(c2);
            } else {
              this.stateBeforeNumericEntity(c2);
            }
            this._index++;
          }
          this.cleanup();
        };
        Tokenizer2.prototype.finish = function() {
          if (this._state === 27) {
            this.emitNamedEntity();
          }
          if (this.sectionStart < this._index) {
            this.handleTrailingData();
          }
          this.cbs.onend();
        };
        Tokenizer2.prototype.handleTrailingData = function() {
          var data = this.buffer.substr(this.sectionStart);
          if (this._state === 21) {
            if (this.currentSequence === Sequences.CdataEnd) {
              this.cbs.oncdata(data);
            } else {
              this.cbs.oncomment(data);
            }
          } else if (this._state === 28 && this.allowLegacyEntity()) {
            this.decodeNumericEntity(10, false);
          } else if (this._state === 29 && this.allowLegacyEntity()) {
            this.decodeNumericEntity(16, false);
          } else if (this._state === 3 || this._state === 8 || this._state === 11 || this._state === 10 || this._state === 9 || this._state === 13 || this._state === 12 || this._state === 14 || this._state === 6) {
          } else {
            this.cbs.ontext(data);
          }
        };
        Tokenizer2.prototype.getSection = function() {
          return this.buffer.substring(this.sectionStart, this._index);
        };
        Tokenizer2.prototype.emitPartial = function(value) {
          if (this.baseState !== 1 && this.baseState !== 24) {
            this.cbs.onattribdata(value);
          } else {
            this.cbs.ontext(value);
          }
        };
        return Tokenizer2;
      }();
      exports.default = Tokenizer;
    }
  });

  // node_modules/.pnpm/htmlparser2@7.2.0/node_modules/htmlparser2/lib/Parser.js
  var require_Parser = __commonJS({
    "node_modules/.pnpm/htmlparser2@7.2.0/node_modules/htmlparser2/lib/Parser.js"(exports) {
      "use strict";
      init_env();
      var __importDefault2 = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.Parser = void 0;
      var Tokenizer_1 = __importDefault2(require_Tokenizer());
      var formTags = /* @__PURE__ */ new Set([
        "input",
        "option",
        "optgroup",
        "select",
        "button",
        "datalist",
        "textarea"
      ]);
      var pTag = /* @__PURE__ */ new Set(["p"]);
      var tableSectionTags = /* @__PURE__ */ new Set(["thead", "tbody"]);
      var ddtTags = /* @__PURE__ */ new Set(["dd", "dt"]);
      var rtpTags = /* @__PURE__ */ new Set(["rt", "rp"]);
      var openImpliesClose = /* @__PURE__ */ new Map([
        ["tr", /* @__PURE__ */ new Set(["tr", "th", "td"])],
        ["th", /* @__PURE__ */ new Set(["th"])],
        ["td", /* @__PURE__ */ new Set(["thead", "th", "td"])],
        ["body", /* @__PURE__ */ new Set(["head", "link", "script"])],
        ["li", /* @__PURE__ */ new Set(["li"])],
        ["p", pTag],
        ["h1", pTag],
        ["h2", pTag],
        ["h3", pTag],
        ["h4", pTag],
        ["h5", pTag],
        ["h6", pTag],
        ["select", formTags],
        ["input", formTags],
        ["output", formTags],
        ["button", formTags],
        ["datalist", formTags],
        ["textarea", formTags],
        ["option", /* @__PURE__ */ new Set(["option"])],
        ["optgroup", /* @__PURE__ */ new Set(["optgroup", "option"])],
        ["dd", ddtTags],
        ["dt", ddtTags],
        ["address", pTag],
        ["article", pTag],
        ["aside", pTag],
        ["blockquote", pTag],
        ["details", pTag],
        ["div", pTag],
        ["dl", pTag],
        ["fieldset", pTag],
        ["figcaption", pTag],
        ["figure", pTag],
        ["footer", pTag],
        ["form", pTag],
        ["header", pTag],
        ["hr", pTag],
        ["main", pTag],
        ["nav", pTag],
        ["ol", pTag],
        ["pre", pTag],
        ["section", pTag],
        ["table", pTag],
        ["ul", pTag],
        ["rt", rtpTags],
        ["rp", rtpTags],
        ["tbody", tableSectionTags],
        ["tfoot", tableSectionTags]
      ]);
      var voidElements2 = /* @__PURE__ */ new Set([
        "area",
        "base",
        "basefont",
        "br",
        "col",
        "command",
        "embed",
        "frame",
        "hr",
        "img",
        "input",
        "isindex",
        "keygen",
        "link",
        "meta",
        "param",
        "source",
        "track",
        "wbr"
      ]);
      var foreignContextElements = /* @__PURE__ */ new Set(["math", "svg"]);
      var htmlIntegrationElements = /* @__PURE__ */ new Set([
        "mi",
        "mo",
        "mn",
        "ms",
        "mtext",
        "annotation-xml",
        "foreignobject",
        "desc",
        "title"
      ]);
      var reNameEnd = /\s|\//;
      var Parser3 = function() {
        function Parser4(cbs, options) {
          if (options === void 0) {
            options = {};
          }
          var _a8, _b3, _c, _d, _e;
          this.options = options;
          this.startIndex = 0;
          this.endIndex = 0;
          this.openTagStart = 0;
          this.tagname = "";
          this.attribname = "";
          this.attribvalue = "";
          this.attribs = null;
          this.stack = [];
          this.foreignContext = [];
          this.cbs = cbs !== null && cbs !== void 0 ? cbs : {};
          this.lowerCaseTagNames = (_a8 = options.lowerCaseTags) !== null && _a8 !== void 0 ? _a8 : !options.xmlMode;
          this.lowerCaseAttributeNames = (_b3 = options.lowerCaseAttributeNames) !== null && _b3 !== void 0 ? _b3 : !options.xmlMode;
          this.tokenizer = new ((_c = options.Tokenizer) !== null && _c !== void 0 ? _c : Tokenizer_1.default)(this.options, this);
          (_e = (_d = this.cbs).onparserinit) === null || _e === void 0 ? void 0 : _e.call(_d, this);
        }
        Parser4.prototype.ontext = function(data) {
          var _a8, _b3;
          var idx = this.tokenizer.getAbsoluteIndex();
          this.endIndex = idx - 1;
          (_b3 = (_a8 = this.cbs).ontext) === null || _b3 === void 0 ? void 0 : _b3.call(_a8, data);
          this.startIndex = idx;
        };
        Parser4.prototype.isVoidElement = function(name) {
          return !this.options.xmlMode && voidElements2.has(name);
        };
        Parser4.prototype.onopentagname = function(name) {
          this.endIndex = this.tokenizer.getAbsoluteIndex();
          if (this.lowerCaseTagNames) {
            name = name.toLowerCase();
          }
          this.emitOpenTag(name);
        };
        Parser4.prototype.emitOpenTag = function(name) {
          var _a8, _b3, _c, _d;
          this.openTagStart = this.startIndex;
          this.tagname = name;
          var impliesClose = !this.options.xmlMode && openImpliesClose.get(name);
          if (impliesClose) {
            while (this.stack.length > 0 && impliesClose.has(this.stack[this.stack.length - 1])) {
              var el = this.stack.pop();
              (_b3 = (_a8 = this.cbs).onclosetag) === null || _b3 === void 0 ? void 0 : _b3.call(_a8, el, true);
            }
          }
          if (!this.isVoidElement(name)) {
            this.stack.push(name);
            if (foreignContextElements.has(name)) {
              this.foreignContext.push(true);
            } else if (htmlIntegrationElements.has(name)) {
              this.foreignContext.push(false);
            }
          }
          (_d = (_c = this.cbs).onopentagname) === null || _d === void 0 ? void 0 : _d.call(_c, name);
          if (this.cbs.onopentag)
            this.attribs = {};
        };
        Parser4.prototype.endOpenTag = function(isImplied) {
          var _a8, _b3;
          this.startIndex = this.openTagStart;
          this.endIndex = this.tokenizer.getAbsoluteIndex();
          if (this.attribs) {
            (_b3 = (_a8 = this.cbs).onopentag) === null || _b3 === void 0 ? void 0 : _b3.call(_a8, this.tagname, this.attribs, isImplied);
            this.attribs = null;
          }
          if (this.cbs.onclosetag && this.isVoidElement(this.tagname)) {
            this.cbs.onclosetag(this.tagname, true);
          }
          this.tagname = "";
        };
        Parser4.prototype.onopentagend = function() {
          this.endOpenTag(false);
          this.startIndex = this.endIndex + 1;
        };
        Parser4.prototype.onclosetag = function(name) {
          var _a8, _b3, _c, _d, _e, _f;
          this.endIndex = this.tokenizer.getAbsoluteIndex();
          if (this.lowerCaseTagNames) {
            name = name.toLowerCase();
          }
          if (foreignContextElements.has(name) || htmlIntegrationElements.has(name)) {
            this.foreignContext.pop();
          }
          if (!this.isVoidElement(name)) {
            var pos = this.stack.lastIndexOf(name);
            if (pos !== -1) {
              if (this.cbs.onclosetag) {
                var count = this.stack.length - pos;
                while (count--) {
                  this.cbs.onclosetag(this.stack.pop(), count !== 0);
                }
              } else
                this.stack.length = pos;
            } else if (!this.options.xmlMode && name === "p") {
              this.emitOpenTag(name);
              this.closeCurrentTag(true);
            }
          } else if (!this.options.xmlMode && name === "br") {
            (_b3 = (_a8 = this.cbs).onopentagname) === null || _b3 === void 0 ? void 0 : _b3.call(_a8, name);
            (_d = (_c = this.cbs).onopentag) === null || _d === void 0 ? void 0 : _d.call(_c, name, {}, true);
            (_f = (_e = this.cbs).onclosetag) === null || _f === void 0 ? void 0 : _f.call(_e, name, false);
          }
          this.startIndex = this.endIndex + 1;
        };
        Parser4.prototype.onselfclosingtag = function() {
          if (this.options.xmlMode || this.options.recognizeSelfClosing || this.foreignContext[this.foreignContext.length - 1]) {
            this.closeCurrentTag(false);
            this.startIndex = this.endIndex + 1;
          } else {
            this.onopentagend();
          }
        };
        Parser4.prototype.closeCurrentTag = function(isOpenImplied) {
          var _a8, _b3;
          var name = this.tagname;
          this.endOpenTag(isOpenImplied);
          if (this.stack[this.stack.length - 1] === name) {
            (_b3 = (_a8 = this.cbs).onclosetag) === null || _b3 === void 0 ? void 0 : _b3.call(_a8, name, !isOpenImplied);
            this.stack.pop();
          }
        };
        Parser4.prototype.onattribname = function(name) {
          this.startIndex = this.tokenizer.getAbsoluteSectionStart();
          if (this.lowerCaseAttributeNames) {
            name = name.toLowerCase();
          }
          this.attribname = name;
        };
        Parser4.prototype.onattribdata = function(value) {
          this.attribvalue += value;
        };
        Parser4.prototype.onattribend = function(quote) {
          var _a8, _b3;
          this.endIndex = this.tokenizer.getAbsoluteIndex();
          (_b3 = (_a8 = this.cbs).onattribute) === null || _b3 === void 0 ? void 0 : _b3.call(_a8, this.attribname, this.attribvalue, quote);
          if (this.attribs && !Object.prototype.hasOwnProperty.call(this.attribs, this.attribname)) {
            this.attribs[this.attribname] = this.attribvalue;
          }
          this.attribname = "";
          this.attribvalue = "";
        };
        Parser4.prototype.getInstructionName = function(value) {
          var idx = value.search(reNameEnd);
          var name = idx < 0 ? value : value.substr(0, idx);
          if (this.lowerCaseTagNames) {
            name = name.toLowerCase();
          }
          return name;
        };
        Parser4.prototype.ondeclaration = function(value) {
          this.endIndex = this.tokenizer.getAbsoluteIndex();
          if (this.cbs.onprocessinginstruction) {
            var name_1 = this.getInstructionName(value);
            this.cbs.onprocessinginstruction("!" + name_1, "!" + value);
          }
          this.startIndex = this.endIndex + 1;
        };
        Parser4.prototype.onprocessinginstruction = function(value) {
          this.endIndex = this.tokenizer.getAbsoluteIndex();
          if (this.cbs.onprocessinginstruction) {
            var name_2 = this.getInstructionName(value);
            this.cbs.onprocessinginstruction("?" + name_2, "?" + value);
          }
          this.startIndex = this.endIndex + 1;
        };
        Parser4.prototype.oncomment = function(value) {
          var _a8, _b3, _c, _d;
          this.endIndex = this.tokenizer.getAbsoluteIndex();
          (_b3 = (_a8 = this.cbs).oncomment) === null || _b3 === void 0 ? void 0 : _b3.call(_a8, value);
          (_d = (_c = this.cbs).oncommentend) === null || _d === void 0 ? void 0 : _d.call(_c);
          this.startIndex = this.endIndex + 1;
        };
        Parser4.prototype.oncdata = function(value) {
          var _a8, _b3, _c, _d, _e, _f, _g, _h, _j, _k;
          this.endIndex = this.tokenizer.getAbsoluteIndex();
          if (this.options.xmlMode || this.options.recognizeCDATA) {
            (_b3 = (_a8 = this.cbs).oncdatastart) === null || _b3 === void 0 ? void 0 : _b3.call(_a8);
            (_d = (_c = this.cbs).ontext) === null || _d === void 0 ? void 0 : _d.call(_c, value);
            (_f = (_e = this.cbs).oncdataend) === null || _f === void 0 ? void 0 : _f.call(_e);
          } else {
            (_h = (_g = this.cbs).oncomment) === null || _h === void 0 ? void 0 : _h.call(_g, "[CDATA[" + value + "]]");
            (_k = (_j = this.cbs).oncommentend) === null || _k === void 0 ? void 0 : _k.call(_j);
          }
          this.startIndex = this.endIndex + 1;
        };
        Parser4.prototype.onerror = function(err) {
          var _a8, _b3;
          (_b3 = (_a8 = this.cbs).onerror) === null || _b3 === void 0 ? void 0 : _b3.call(_a8, err);
        };
        Parser4.prototype.onend = function() {
          var _a8, _b3;
          if (this.cbs.onclosetag) {
            this.endIndex = this.startIndex;
            for (var i = this.stack.length; i > 0; this.cbs.onclosetag(this.stack[--i], true))
              ;
          }
          (_b3 = (_a8 = this.cbs).onend) === null || _b3 === void 0 ? void 0 : _b3.call(_a8);
        };
        Parser4.prototype.reset = function() {
          var _a8, _b3, _c, _d;
          (_b3 = (_a8 = this.cbs).onreset) === null || _b3 === void 0 ? void 0 : _b3.call(_a8);
          this.tokenizer.reset();
          this.tagname = "";
          this.attribname = "";
          this.attribs = null;
          this.stack = [];
          this.startIndex = 0;
          this.endIndex = 0;
          (_d = (_c = this.cbs).onparserinit) === null || _d === void 0 ? void 0 : _d.call(_c, this);
        };
        Parser4.prototype.parseComplete = function(data) {
          this.reset();
          this.end(data);
        };
        Parser4.prototype.write = function(chunk) {
          this.tokenizer.write(chunk);
        };
        Parser4.prototype.end = function(chunk) {
          this.tokenizer.end(chunk);
        };
        Parser4.prototype.pause = function() {
          this.tokenizer.pause();
        };
        Parser4.prototype.resume = function() {
          this.tokenizer.resume();
        };
        Parser4.prototype.parseChunk = function(chunk) {
          this.write(chunk);
        };
        Parser4.prototype.done = function(chunk) {
          this.end(chunk);
        };
        return Parser4;
      }();
      exports.Parser = Parser3;
    }
  });

  // node_modules/.pnpm/domelementtype@2.3.0/node_modules/domelementtype/lib/index.js
  var require_lib2 = __commonJS({
    "node_modules/.pnpm/domelementtype@2.3.0/node_modules/domelementtype/lib/index.js"(exports) {
      "use strict";
      init_env();
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.Doctype = exports.CDATA = exports.Tag = exports.Style = exports.Script = exports.Comment = exports.Directive = exports.Text = exports.Root = exports.isTag = exports.ElementType = void 0;
      var ElementType;
      (function(ElementType2) {
        ElementType2["Root"] = "root";
        ElementType2["Text"] = "text";
        ElementType2["Directive"] = "directive";
        ElementType2["Comment"] = "comment";
        ElementType2["Script"] = "script";
        ElementType2["Style"] = "style";
        ElementType2["Tag"] = "tag";
        ElementType2["CDATA"] = "cdata";
        ElementType2["Doctype"] = "doctype";
      })(ElementType = exports.ElementType || (exports.ElementType = {}));
      function isTag2(elem) {
        return elem.type === ElementType.Tag || elem.type === ElementType.Script || elem.type === ElementType.Style;
      }
      exports.isTag = isTag2;
      exports.Root = ElementType.Root;
      exports.Text = ElementType.Text;
      exports.Directive = ElementType.Directive;
      exports.Comment = ElementType.Comment;
      exports.Script = ElementType.Script;
      exports.Style = ElementType.Style;
      exports.Tag = ElementType.Tag;
      exports.CDATA = ElementType.CDATA;
      exports.Doctype = ElementType.Doctype;
    }
  });

  // node_modules/.pnpm/domhandler@4.3.1/node_modules/domhandler/lib/node.js
  var require_node = __commonJS({
    "node_modules/.pnpm/domhandler@4.3.1/node_modules/domhandler/lib/node.js"(exports) {
      "use strict";
      init_env();
      var __extends2 = exports && exports.__extends || function() {
        var extendStatics = function(d, b) {
          extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
            d2.__proto__ = b2;
          } || function(d2, b2) {
            for (var p in b2)
              if (Object.prototype.hasOwnProperty.call(b2, p))
                d2[p] = b2[p];
          };
          return extendStatics(d, b);
        };
        return function(d, b) {
          if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
          extendStatics(d, b);
          function __() {
            this.constructor = d;
          }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
      }();
      var __assign2 = exports && exports.__assign || function() {
        __assign2 = Object.assign || function(t) {
          for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s)
              if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
          }
          return t;
        };
        return __assign2.apply(this, arguments);
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.cloneNode = exports.hasChildren = exports.isDocument = exports.isDirective = exports.isComment = exports.isText = exports.isCDATA = exports.isTag = exports.Element = exports.Document = exports.NodeWithChildren = exports.ProcessingInstruction = exports.Comment = exports.Text = exports.DataNode = exports.Node = void 0;
      var domelementtype_1 = require_lib2();
      var nodeTypes = /* @__PURE__ */ new Map([
        [domelementtype_1.ElementType.Tag, 1],
        [domelementtype_1.ElementType.Script, 1],
        [domelementtype_1.ElementType.Style, 1],
        [domelementtype_1.ElementType.Directive, 1],
        [domelementtype_1.ElementType.Text, 3],
        [domelementtype_1.ElementType.CDATA, 4],
        [domelementtype_1.ElementType.Comment, 8],
        [domelementtype_1.ElementType.Root, 9]
      ]);
      var Node3 = function() {
        function Node4(type) {
          this.type = type;
          this.parent = null;
          this.prev = null;
          this.next = null;
          this.startIndex = null;
          this.endIndex = null;
        }
        Object.defineProperty(Node4.prototype, "nodeType", {
          get: function() {
            var _a8;
            return (_a8 = nodeTypes.get(this.type)) !== null && _a8 !== void 0 ? _a8 : 1;
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(Node4.prototype, "parentNode", {
          get: function() {
            return this.parent;
          },
          set: function(parent) {
            this.parent = parent;
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(Node4.prototype, "previousSibling", {
          get: function() {
            return this.prev;
          },
          set: function(prev) {
            this.prev = prev;
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(Node4.prototype, "nextSibling", {
          get: function() {
            return this.next;
          },
          set: function(next) {
            this.next = next;
          },
          enumerable: false,
          configurable: true
        });
        Node4.prototype.cloneNode = function(recursive) {
          if (recursive === void 0) {
            recursive = false;
          }
          return cloneNode(this, recursive);
        };
        return Node4;
      }();
      exports.Node = Node3;
      var DataNode = function(_super) {
        __extends2(DataNode2, _super);
        function DataNode2(type, data) {
          var _this = _super.call(this, type) || this;
          _this.data = data;
          return _this;
        }
        Object.defineProperty(DataNode2.prototype, "nodeValue", {
          get: function() {
            return this.data;
          },
          set: function(data) {
            this.data = data;
          },
          enumerable: false,
          configurable: true
        });
        return DataNode2;
      }(Node3);
      exports.DataNode = DataNode;
      var Text3 = function(_super) {
        __extends2(Text4, _super);
        function Text4(data) {
          return _super.call(this, domelementtype_1.ElementType.Text, data) || this;
        }
        return Text4;
      }(DataNode);
      exports.Text = Text3;
      var Comment4 = function(_super) {
        __extends2(Comment5, _super);
        function Comment5(data) {
          return _super.call(this, domelementtype_1.ElementType.Comment, data) || this;
        }
        return Comment5;
      }(DataNode);
      exports.Comment = Comment4;
      var ProcessingInstruction = function(_super) {
        __extends2(ProcessingInstruction2, _super);
        function ProcessingInstruction2(name, data) {
          var _this = _super.call(this, domelementtype_1.ElementType.Directive, data) || this;
          _this.name = name;
          return _this;
        }
        return ProcessingInstruction2;
      }(DataNode);
      exports.ProcessingInstruction = ProcessingInstruction;
      var NodeWithChildren = function(_super) {
        __extends2(NodeWithChildren2, _super);
        function NodeWithChildren2(type, children) {
          var _this = _super.call(this, type) || this;
          _this.children = children;
          return _this;
        }
        Object.defineProperty(NodeWithChildren2.prototype, "firstChild", {
          get: function() {
            var _a8;
            return (_a8 = this.children[0]) !== null && _a8 !== void 0 ? _a8 : null;
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(NodeWithChildren2.prototype, "lastChild", {
          get: function() {
            return this.children.length > 0 ? this.children[this.children.length - 1] : null;
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(NodeWithChildren2.prototype, "childNodes", {
          get: function() {
            return this.children;
          },
          set: function(children) {
            this.children = children;
          },
          enumerable: false,
          configurable: true
        });
        return NodeWithChildren2;
      }(Node3);
      exports.NodeWithChildren = NodeWithChildren;
      var Document4 = function(_super) {
        __extends2(Document5, _super);
        function Document5(children) {
          return _super.call(this, domelementtype_1.ElementType.Root, children) || this;
        }
        return Document5;
      }(NodeWithChildren);
      exports.Document = Document4;
      var Element4 = function(_super) {
        __extends2(Element5, _super);
        function Element5(name, attribs, children, type) {
          if (children === void 0) {
            children = [];
          }
          if (type === void 0) {
            type = name === "script" ? domelementtype_1.ElementType.Script : name === "style" ? domelementtype_1.ElementType.Style : domelementtype_1.ElementType.Tag;
          }
          var _this = _super.call(this, type, children) || this;
          _this.name = name;
          _this.attribs = attribs;
          return _this;
        }
        Object.defineProperty(Element5.prototype, "tagName", {
          get: function() {
            return this.name;
          },
          set: function(name) {
            this.name = name;
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(Element5.prototype, "attributes", {
          get: function() {
            var _this = this;
            return Object.keys(this.attribs).map(function(name) {
              var _a8, _b3;
              return {
                name,
                value: _this.attribs[name],
                namespace: (_a8 = _this["x-attribsNamespace"]) === null || _a8 === void 0 ? void 0 : _a8[name],
                prefix: (_b3 = _this["x-attribsPrefix"]) === null || _b3 === void 0 ? void 0 : _b3[name]
              };
            });
          },
          enumerable: false,
          configurable: true
        });
        return Element5;
      }(NodeWithChildren);
      exports.Element = Element4;
      function isTag2(node) {
        return (0, domelementtype_1.isTag)(node);
      }
      exports.isTag = isTag2;
      function isCDATA(node) {
        return node.type === domelementtype_1.ElementType.CDATA;
      }
      exports.isCDATA = isCDATA;
      function isText(node) {
        return node.type === domelementtype_1.ElementType.Text;
      }
      exports.isText = isText;
      function isComment(node) {
        return node.type === domelementtype_1.ElementType.Comment;
      }
      exports.isComment = isComment;
      function isDirective(node) {
        return node.type === domelementtype_1.ElementType.Directive;
      }
      exports.isDirective = isDirective;
      function isDocument(node) {
        return node.type === domelementtype_1.ElementType.Root;
      }
      exports.isDocument = isDocument;
      function hasChildren(node) {
        return Object.prototype.hasOwnProperty.call(node, "children");
      }
      exports.hasChildren = hasChildren;
      function cloneNode(node, recursive) {
        if (recursive === void 0) {
          recursive = false;
        }
        var result;
        if (isText(node)) {
          result = new Text3(node.data);
        } else if (isComment(node)) {
          result = new Comment4(node.data);
        } else if (isTag2(node)) {
          var children = recursive ? cloneChildren(node.children) : [];
          var clone_1 = new Element4(node.name, __assign2({}, node.attribs), children);
          children.forEach(function(child) {
            return child.parent = clone_1;
          });
          if (node.namespace != null) {
            clone_1.namespace = node.namespace;
          }
          if (node["x-attribsNamespace"]) {
            clone_1["x-attribsNamespace"] = __assign2({}, node["x-attribsNamespace"]);
          }
          if (node["x-attribsPrefix"]) {
            clone_1["x-attribsPrefix"] = __assign2({}, node["x-attribsPrefix"]);
          }
          result = clone_1;
        } else if (isCDATA(node)) {
          var children = recursive ? cloneChildren(node.children) : [];
          var clone_2 = new NodeWithChildren(domelementtype_1.ElementType.CDATA, children);
          children.forEach(function(child) {
            return child.parent = clone_2;
          });
          result = clone_2;
        } else if (isDocument(node)) {
          var children = recursive ? cloneChildren(node.children) : [];
          var clone_3 = new Document4(children);
          children.forEach(function(child) {
            return child.parent = clone_3;
          });
          if (node["x-mode"]) {
            clone_3["x-mode"] = node["x-mode"];
          }
          result = clone_3;
        } else if (isDirective(node)) {
          var instruction = new ProcessingInstruction(node.name, node.data);
          if (node["x-name"] != null) {
            instruction["x-name"] = node["x-name"];
            instruction["x-publicId"] = node["x-publicId"];
            instruction["x-systemId"] = node["x-systemId"];
          }
          result = instruction;
        } else {
          throw new Error("Not implemented yet: ".concat(node.type));
        }
        result.startIndex = node.startIndex;
        result.endIndex = node.endIndex;
        if (node.sourceCodeLocation != null) {
          result.sourceCodeLocation = node.sourceCodeLocation;
        }
        return result;
      }
      exports.cloneNode = cloneNode;
      function cloneChildren(childs) {
        var children = childs.map(function(child) {
          return cloneNode(child, true);
        });
        for (var i = 1; i < children.length; i++) {
          children[i].prev = children[i - 1];
          children[i - 1].next = children[i];
        }
        return children;
      }
    }
  });

  // node_modules/.pnpm/domhandler@4.3.1/node_modules/domhandler/lib/index.js
  var require_lib3 = __commonJS({
    "node_modules/.pnpm/domhandler@4.3.1/node_modules/domhandler/lib/index.js"(exports) {
      "use strict";
      init_env();
      var __createBinding2 = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __exportStar2 = exports && exports.__exportStar || function(m, exports2) {
        for (var p in m)
          if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
            __createBinding2(exports2, m, p);
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.DomHandler = void 0;
      var domelementtype_1 = require_lib2();
      var node_1 = require_node();
      __exportStar2(require_node(), exports);
      var reWhitespace = /\s+/g;
      var defaultOpts = {
        normalizeWhitespace: false,
        withStartIndices: false,
        withEndIndices: false,
        xmlMode: false
      };
      var DomHandler = function() {
        function DomHandler2(callback, options, elementCB) {
          this.dom = [];
          this.root = new node_1.Document(this.dom);
          this.done = false;
          this.tagStack = [this.root];
          this.lastNode = null;
          this.parser = null;
          if (typeof options === "function") {
            elementCB = options;
            options = defaultOpts;
          }
          if (typeof callback === "object") {
            options = callback;
            callback = void 0;
          }
          this.callback = callback !== null && callback !== void 0 ? callback : null;
          this.options = options !== null && options !== void 0 ? options : defaultOpts;
          this.elementCB = elementCB !== null && elementCB !== void 0 ? elementCB : null;
        }
        DomHandler2.prototype.onparserinit = function(parser) {
          this.parser = parser;
        };
        DomHandler2.prototype.onreset = function() {
          this.dom = [];
          this.root = new node_1.Document(this.dom);
          this.done = false;
          this.tagStack = [this.root];
          this.lastNode = null;
          this.parser = null;
        };
        DomHandler2.prototype.onend = function() {
          if (this.done)
            return;
          this.done = true;
          this.parser = null;
          this.handleCallback(null);
        };
        DomHandler2.prototype.onerror = function(error) {
          this.handleCallback(error);
        };
        DomHandler2.prototype.onclosetag = function() {
          this.lastNode = null;
          var elem = this.tagStack.pop();
          if (this.options.withEndIndices) {
            elem.endIndex = this.parser.endIndex;
          }
          if (this.elementCB)
            this.elementCB(elem);
        };
        DomHandler2.prototype.onopentag = function(name, attribs) {
          var type = this.options.xmlMode ? domelementtype_1.ElementType.Tag : void 0;
          var element = new node_1.Element(name, attribs, void 0, type);
          this.addNode(element);
          this.tagStack.push(element);
        };
        DomHandler2.prototype.ontext = function(data) {
          var normalizeWhitespace = this.options.normalizeWhitespace;
          var lastNode = this.lastNode;
          if (lastNode && lastNode.type === domelementtype_1.ElementType.Text) {
            if (normalizeWhitespace) {
              lastNode.data = (lastNode.data + data).replace(reWhitespace, " ");
            } else {
              lastNode.data += data;
            }
            if (this.options.withEndIndices) {
              lastNode.endIndex = this.parser.endIndex;
            }
          } else {
            if (normalizeWhitespace) {
              data = data.replace(reWhitespace, " ");
            }
            var node = new node_1.Text(data);
            this.addNode(node);
            this.lastNode = node;
          }
        };
        DomHandler2.prototype.oncomment = function(data) {
          if (this.lastNode && this.lastNode.type === domelementtype_1.ElementType.Comment) {
            this.lastNode.data += data;
            return;
          }
          var node = new node_1.Comment(data);
          this.addNode(node);
          this.lastNode = node;
        };
        DomHandler2.prototype.oncommentend = function() {
          this.lastNode = null;
        };
        DomHandler2.prototype.oncdatastart = function() {
          var text = new node_1.Text("");
          var node = new node_1.NodeWithChildren(domelementtype_1.ElementType.CDATA, [text]);
          this.addNode(node);
          text.parent = node;
          this.lastNode = text;
        };
        DomHandler2.prototype.oncdataend = function() {
          this.lastNode = null;
        };
        DomHandler2.prototype.onprocessinginstruction = function(name, data) {
          var node = new node_1.ProcessingInstruction(name, data);
          this.addNode(node);
        };
        DomHandler2.prototype.handleCallback = function(error) {
          if (typeof this.callback === "function") {
            this.callback(error, this.dom);
          } else if (error) {
            throw error;
          }
        };
        DomHandler2.prototype.addNode = function(node) {
          var parent = this.tagStack[this.tagStack.length - 1];
          var previousSibling2 = parent.children[parent.children.length - 1];
          if (this.options.withStartIndices) {
            node.startIndex = this.parser.startIndex;
          }
          if (this.options.withEndIndices) {
            node.endIndex = this.parser.endIndex;
          }
          parent.children.push(node);
          if (previousSibling2) {
            node.prev = previousSibling2;
            previousSibling2.next = node;
          }
          node.parent = parent;
          this.lastNode = null;
        };
        return DomHandler2;
      }();
      exports.DomHandler = DomHandler;
      exports.default = DomHandler;
    }
  });

  // node_modules/.pnpm/entities@2.2.0/node_modules/entities/lib/maps/entities.json
  var require_entities = __commonJS({
    "node_modules/.pnpm/entities@2.2.0/node_modules/entities/lib/maps/entities.json"(exports, module) {
      module.exports = { Aacute: "\xC1", aacute: "\xE1", Abreve: "\u0102", abreve: "\u0103", ac: "\u223E", acd: "\u223F", acE: "\u223E\u0333", Acirc: "\xC2", acirc: "\xE2", acute: "\xB4", Acy: "\u0410", acy: "\u0430", AElig: "\xC6", aelig: "\xE6", af: "\u2061", Afr: "\u{1D504}", afr: "\u{1D51E}", Agrave: "\xC0", agrave: "\xE0", alefsym: "\u2135", aleph: "\u2135", Alpha: "\u0391", alpha: "\u03B1", Amacr: "\u0100", amacr: "\u0101", amalg: "\u2A3F", amp: "&", AMP: "&", andand: "\u2A55", And: "\u2A53", and: "\u2227", andd: "\u2A5C", andslope: "\u2A58", andv: "\u2A5A", ang: "\u2220", ange: "\u29A4", angle: "\u2220", angmsdaa: "\u29A8", angmsdab: "\u29A9", angmsdac: "\u29AA", angmsdad: "\u29AB", angmsdae: "\u29AC", angmsdaf: "\u29AD", angmsdag: "\u29AE", angmsdah: "\u29AF", angmsd: "\u2221", angrt: "\u221F", angrtvb: "\u22BE", angrtvbd: "\u299D", angsph: "\u2222", angst: "\xC5", angzarr: "\u237C", Aogon: "\u0104", aogon: "\u0105", Aopf: "\u{1D538}", aopf: "\u{1D552}", apacir: "\u2A6F", ap: "\u2248", apE: "\u2A70", ape: "\u224A", apid: "\u224B", apos: "'", ApplyFunction: "\u2061", approx: "\u2248", approxeq: "\u224A", Aring: "\xC5", aring: "\xE5", Ascr: "\u{1D49C}", ascr: "\u{1D4B6}", Assign: "\u2254", ast: "*", asymp: "\u2248", asympeq: "\u224D", Atilde: "\xC3", atilde: "\xE3", Auml: "\xC4", auml: "\xE4", awconint: "\u2233", awint: "\u2A11", backcong: "\u224C", backepsilon: "\u03F6", backprime: "\u2035", backsim: "\u223D", backsimeq: "\u22CD", Backslash: "\u2216", Barv: "\u2AE7", barvee: "\u22BD", barwed: "\u2305", Barwed: "\u2306", barwedge: "\u2305", bbrk: "\u23B5", bbrktbrk: "\u23B6", bcong: "\u224C", Bcy: "\u0411", bcy: "\u0431", bdquo: "\u201E", becaus: "\u2235", because: "\u2235", Because: "\u2235", bemptyv: "\u29B0", bepsi: "\u03F6", bernou: "\u212C", Bernoullis: "\u212C", Beta: "\u0392", beta: "\u03B2", beth: "\u2136", between: "\u226C", Bfr: "\u{1D505}", bfr: "\u{1D51F}", bigcap: "\u22C2", bigcirc: "\u25EF", bigcup: "\u22C3", bigodot: "\u2A00", bigoplus: "\u2A01", bigotimes: "\u2A02", bigsqcup: "\u2A06", bigstar: "\u2605", bigtriangledown: "\u25BD", bigtriangleup: "\u25B3", biguplus: "\u2A04", bigvee: "\u22C1", bigwedge: "\u22C0", bkarow: "\u290D", blacklozenge: "\u29EB", blacksquare: "\u25AA", blacktriangle: "\u25B4", blacktriangledown: "\u25BE", blacktriangleleft: "\u25C2", blacktriangleright: "\u25B8", blank: "\u2423", blk12: "\u2592", blk14: "\u2591", blk34: "\u2593", block: "\u2588", bne: "=\u20E5", bnequiv: "\u2261\u20E5", bNot: "\u2AED", bnot: "\u2310", Bopf: "\u{1D539}", bopf: "\u{1D553}", bot: "\u22A5", bottom: "\u22A5", bowtie: "\u22C8", boxbox: "\u29C9", boxdl: "\u2510", boxdL: "\u2555", boxDl: "\u2556", boxDL: "\u2557", boxdr: "\u250C", boxdR: "\u2552", boxDr: "\u2553", boxDR: "\u2554", boxh: "\u2500", boxH: "\u2550", boxhd: "\u252C", boxHd: "\u2564", boxhD: "\u2565", boxHD: "\u2566", boxhu: "\u2534", boxHu: "\u2567", boxhU: "\u2568", boxHU: "\u2569", boxminus: "\u229F", boxplus: "\u229E", boxtimes: "\u22A0", boxul: "\u2518", boxuL: "\u255B", boxUl: "\u255C", boxUL: "\u255D", boxur: "\u2514", boxuR: "\u2558", boxUr: "\u2559", boxUR: "\u255A", boxv: "\u2502", boxV: "\u2551", boxvh: "\u253C", boxvH: "\u256A", boxVh: "\u256B", boxVH: "\u256C", boxvl: "\u2524", boxvL: "\u2561", boxVl: "\u2562", boxVL: "\u2563", boxvr: "\u251C", boxvR: "\u255E", boxVr: "\u255F", boxVR: "\u2560", bprime: "\u2035", breve: "\u02D8", Breve: "\u02D8", brvbar: "\xA6", bscr: "\u{1D4B7}", Bscr: "\u212C", bsemi: "\u204F", bsim: "\u223D", bsime: "\u22CD", bsolb: "\u29C5", bsol: "\\", bsolhsub: "\u27C8", bull: "\u2022", bullet: "\u2022", bump: "\u224E", bumpE: "\u2AAE", bumpe: "\u224F", Bumpeq: "\u224E", bumpeq: "\u224F", Cacute: "\u0106", cacute: "\u0107", capand: "\u2A44", capbrcup: "\u2A49", capcap: "\u2A4B", cap: "\u2229", Cap: "\u22D2", capcup: "\u2A47", capdot: "\u2A40", CapitalDifferentialD: "\u2145", caps: "\u2229\uFE00", caret: "\u2041", caron: "\u02C7", Cayleys: "\u212D", ccaps: "\u2A4D", Ccaron: "\u010C", ccaron: "\u010D", Ccedil: "\xC7", ccedil: "\xE7", Ccirc: "\u0108", ccirc: "\u0109", Cconint: "\u2230", ccups: "\u2A4C", ccupssm: "\u2A50", Cdot: "\u010A", cdot: "\u010B", cedil: "\xB8", Cedilla: "\xB8", cemptyv: "\u29B2", cent: "\xA2", centerdot: "\xB7", CenterDot: "\xB7", cfr: "\u{1D520}", Cfr: "\u212D", CHcy: "\u0427", chcy: "\u0447", check: "\u2713", checkmark: "\u2713", Chi: "\u03A7", chi: "\u03C7", circ: "\u02C6", circeq: "\u2257", circlearrowleft: "\u21BA", circlearrowright: "\u21BB", circledast: "\u229B", circledcirc: "\u229A", circleddash: "\u229D", CircleDot: "\u2299", circledR: "\xAE", circledS: "\u24C8", CircleMinus: "\u2296", CirclePlus: "\u2295", CircleTimes: "\u2297", cir: "\u25CB", cirE: "\u29C3", cire: "\u2257", cirfnint: "\u2A10", cirmid: "\u2AEF", cirscir: "\u29C2", ClockwiseContourIntegral: "\u2232", CloseCurlyDoubleQuote: "\u201D", CloseCurlyQuote: "\u2019", clubs: "\u2663", clubsuit: "\u2663", colon: ":", Colon: "\u2237", Colone: "\u2A74", colone: "\u2254", coloneq: "\u2254", comma: ",", commat: "@", comp: "\u2201", compfn: "\u2218", complement: "\u2201", complexes: "\u2102", cong: "\u2245", congdot: "\u2A6D", Congruent: "\u2261", conint: "\u222E", Conint: "\u222F", ContourIntegral: "\u222E", copf: "\u{1D554}", Copf: "\u2102", coprod: "\u2210", Coproduct: "\u2210", copy: "\xA9", COPY: "\xA9", copysr: "\u2117", CounterClockwiseContourIntegral: "\u2233", crarr: "\u21B5", cross: "\u2717", Cross: "\u2A2F", Cscr: "\u{1D49E}", cscr: "\u{1D4B8}", csub: "\u2ACF", csube: "\u2AD1", csup: "\u2AD0", csupe: "\u2AD2", ctdot: "\u22EF", cudarrl: "\u2938", cudarrr: "\u2935", cuepr: "\u22DE", cuesc: "\u22DF", cularr: "\u21B6", cularrp: "\u293D", cupbrcap: "\u2A48", cupcap: "\u2A46", CupCap: "\u224D", cup: "\u222A", Cup: "\u22D3", cupcup: "\u2A4A", cupdot: "\u228D", cupor: "\u2A45", cups: "\u222A\uFE00", curarr: "\u21B7", curarrm: "\u293C", curlyeqprec: "\u22DE", curlyeqsucc: "\u22DF", curlyvee: "\u22CE", curlywedge: "\u22CF", curren: "\xA4", curvearrowleft: "\u21B6", curvearrowright: "\u21B7", cuvee: "\u22CE", cuwed: "\u22CF", cwconint: "\u2232", cwint: "\u2231", cylcty: "\u232D", dagger: "\u2020", Dagger: "\u2021", daleth: "\u2138", darr: "\u2193", Darr: "\u21A1", dArr: "\u21D3", dash: "\u2010", Dashv: "\u2AE4", dashv: "\u22A3", dbkarow: "\u290F", dblac: "\u02DD", Dcaron: "\u010E", dcaron: "\u010F", Dcy: "\u0414", dcy: "\u0434", ddagger: "\u2021", ddarr: "\u21CA", DD: "\u2145", dd: "\u2146", DDotrahd: "\u2911", ddotseq: "\u2A77", deg: "\xB0", Del: "\u2207", Delta: "\u0394", delta: "\u03B4", demptyv: "\u29B1", dfisht: "\u297F", Dfr: "\u{1D507}", dfr: "\u{1D521}", dHar: "\u2965", dharl: "\u21C3", dharr: "\u21C2", DiacriticalAcute: "\xB4", DiacriticalDot: "\u02D9", DiacriticalDoubleAcute: "\u02DD", DiacriticalGrave: "`", DiacriticalTilde: "\u02DC", diam: "\u22C4", diamond: "\u22C4", Diamond: "\u22C4", diamondsuit: "\u2666", diams: "\u2666", die: "\xA8", DifferentialD: "\u2146", digamma: "\u03DD", disin: "\u22F2", div: "\xF7", divide: "\xF7", divideontimes: "\u22C7", divonx: "\u22C7", DJcy: "\u0402", djcy: "\u0452", dlcorn: "\u231E", dlcrop: "\u230D", dollar: "$", Dopf: "\u{1D53B}", dopf: "\u{1D555}", Dot: "\xA8", dot: "\u02D9", DotDot: "\u20DC", doteq: "\u2250", doteqdot: "\u2251", DotEqual: "\u2250", dotminus: "\u2238", dotplus: "\u2214", dotsquare: "\u22A1", doublebarwedge: "\u2306", DoubleContourIntegral: "\u222F", DoubleDot: "\xA8", DoubleDownArrow: "\u21D3", DoubleLeftArrow: "\u21D0", DoubleLeftRightArrow: "\u21D4", DoubleLeftTee: "\u2AE4", DoubleLongLeftArrow: "\u27F8", DoubleLongLeftRightArrow: "\u27FA", DoubleLongRightArrow: "\u27F9", DoubleRightArrow: "\u21D2", DoubleRightTee: "\u22A8", DoubleUpArrow: "\u21D1", DoubleUpDownArrow: "\u21D5", DoubleVerticalBar: "\u2225", DownArrowBar: "\u2913", downarrow: "\u2193", DownArrow: "\u2193", Downarrow: "\u21D3", DownArrowUpArrow: "\u21F5", DownBreve: "\u0311", downdownarrows: "\u21CA", downharpoonleft: "\u21C3", downharpoonright: "\u21C2", DownLeftRightVector: "\u2950", DownLeftTeeVector: "\u295E", DownLeftVectorBar: "\u2956", DownLeftVector: "\u21BD", DownRightTeeVector: "\u295F", DownRightVectorBar: "\u2957", DownRightVector: "\u21C1", DownTeeArrow: "\u21A7", DownTee: "\u22A4", drbkarow: "\u2910", drcorn: "\u231F", drcrop: "\u230C", Dscr: "\u{1D49F}", dscr: "\u{1D4B9}", DScy: "\u0405", dscy: "\u0455", dsol: "\u29F6", Dstrok: "\u0110", dstrok: "\u0111", dtdot: "\u22F1", dtri: "\u25BF", dtrif: "\u25BE", duarr: "\u21F5", duhar: "\u296F", dwangle: "\u29A6", DZcy: "\u040F", dzcy: "\u045F", dzigrarr: "\u27FF", Eacute: "\xC9", eacute: "\xE9", easter: "\u2A6E", Ecaron: "\u011A", ecaron: "\u011B", Ecirc: "\xCA", ecirc: "\xEA", ecir: "\u2256", ecolon: "\u2255", Ecy: "\u042D", ecy: "\u044D", eDDot: "\u2A77", Edot: "\u0116", edot: "\u0117", eDot: "\u2251", ee: "\u2147", efDot: "\u2252", Efr: "\u{1D508}", efr: "\u{1D522}", eg: "\u2A9A", Egrave: "\xC8", egrave: "\xE8", egs: "\u2A96", egsdot: "\u2A98", el: "\u2A99", Element: "\u2208", elinters: "\u23E7", ell: "\u2113", els: "\u2A95", elsdot: "\u2A97", Emacr: "\u0112", emacr: "\u0113", empty: "\u2205", emptyset: "\u2205", EmptySmallSquare: "\u25FB", emptyv: "\u2205", EmptyVerySmallSquare: "\u25AB", emsp13: "\u2004", emsp14: "\u2005", emsp: "\u2003", ENG: "\u014A", eng: "\u014B", ensp: "\u2002", Eogon: "\u0118", eogon: "\u0119", Eopf: "\u{1D53C}", eopf: "\u{1D556}", epar: "\u22D5", eparsl: "\u29E3", eplus: "\u2A71", epsi: "\u03B5", Epsilon: "\u0395", epsilon: "\u03B5", epsiv: "\u03F5", eqcirc: "\u2256", eqcolon: "\u2255", eqsim: "\u2242", eqslantgtr: "\u2A96", eqslantless: "\u2A95", Equal: "\u2A75", equals: "=", EqualTilde: "\u2242", equest: "\u225F", Equilibrium: "\u21CC", equiv: "\u2261", equivDD: "\u2A78", eqvparsl: "\u29E5", erarr: "\u2971", erDot: "\u2253", escr: "\u212F", Escr: "\u2130", esdot: "\u2250", Esim: "\u2A73", esim: "\u2242", Eta: "\u0397", eta: "\u03B7", ETH: "\xD0", eth: "\xF0", Euml: "\xCB", euml: "\xEB", euro: "\u20AC", excl: "!", exist: "\u2203", Exists: "\u2203", expectation: "\u2130", exponentiale: "\u2147", ExponentialE: "\u2147", fallingdotseq: "\u2252", Fcy: "\u0424", fcy: "\u0444", female: "\u2640", ffilig: "\uFB03", fflig: "\uFB00", ffllig: "\uFB04", Ffr: "\u{1D509}", ffr: "\u{1D523}", filig: "\uFB01", FilledSmallSquare: "\u25FC", FilledVerySmallSquare: "\u25AA", fjlig: "fj", flat: "\u266D", fllig: "\uFB02", fltns: "\u25B1", fnof: "\u0192", Fopf: "\u{1D53D}", fopf: "\u{1D557}", forall: "\u2200", ForAll: "\u2200", fork: "\u22D4", forkv: "\u2AD9", Fouriertrf: "\u2131", fpartint: "\u2A0D", frac12: "\xBD", frac13: "\u2153", frac14: "\xBC", frac15: "\u2155", frac16: "\u2159", frac18: "\u215B", frac23: "\u2154", frac25: "\u2156", frac34: "\xBE", frac35: "\u2157", frac38: "\u215C", frac45: "\u2158", frac56: "\u215A", frac58: "\u215D", frac78: "\u215E", frasl: "\u2044", frown: "\u2322", fscr: "\u{1D4BB}", Fscr: "\u2131", gacute: "\u01F5", Gamma: "\u0393", gamma: "\u03B3", Gammad: "\u03DC", gammad: "\u03DD", gap: "\u2A86", Gbreve: "\u011E", gbreve: "\u011F", Gcedil: "\u0122", Gcirc: "\u011C", gcirc: "\u011D", Gcy: "\u0413", gcy: "\u0433", Gdot: "\u0120", gdot: "\u0121", ge: "\u2265", gE: "\u2267", gEl: "\u2A8C", gel: "\u22DB", geq: "\u2265", geqq: "\u2267", geqslant: "\u2A7E", gescc: "\u2AA9", ges: "\u2A7E", gesdot: "\u2A80", gesdoto: "\u2A82", gesdotol: "\u2A84", gesl: "\u22DB\uFE00", gesles: "\u2A94", Gfr: "\u{1D50A}", gfr: "\u{1D524}", gg: "\u226B", Gg: "\u22D9", ggg: "\u22D9", gimel: "\u2137", GJcy: "\u0403", gjcy: "\u0453", gla: "\u2AA5", gl: "\u2277", glE: "\u2A92", glj: "\u2AA4", gnap: "\u2A8A", gnapprox: "\u2A8A", gne: "\u2A88", gnE: "\u2269", gneq: "\u2A88", gneqq: "\u2269", gnsim: "\u22E7", Gopf: "\u{1D53E}", gopf: "\u{1D558}", grave: "`", GreaterEqual: "\u2265", GreaterEqualLess: "\u22DB", GreaterFullEqual: "\u2267", GreaterGreater: "\u2AA2", GreaterLess: "\u2277", GreaterSlantEqual: "\u2A7E", GreaterTilde: "\u2273", Gscr: "\u{1D4A2}", gscr: "\u210A", gsim: "\u2273", gsime: "\u2A8E", gsiml: "\u2A90", gtcc: "\u2AA7", gtcir: "\u2A7A", gt: ">", GT: ">", Gt: "\u226B", gtdot: "\u22D7", gtlPar: "\u2995", gtquest: "\u2A7C", gtrapprox: "\u2A86", gtrarr: "\u2978", gtrdot: "\u22D7", gtreqless: "\u22DB", gtreqqless: "\u2A8C", gtrless: "\u2277", gtrsim: "\u2273", gvertneqq: "\u2269\uFE00", gvnE: "\u2269\uFE00", Hacek: "\u02C7", hairsp: "\u200A", half: "\xBD", hamilt: "\u210B", HARDcy: "\u042A", hardcy: "\u044A", harrcir: "\u2948", harr: "\u2194", hArr: "\u21D4", harrw: "\u21AD", Hat: "^", hbar: "\u210F", Hcirc: "\u0124", hcirc: "\u0125", hearts: "\u2665", heartsuit: "\u2665", hellip: "\u2026", hercon: "\u22B9", hfr: "\u{1D525}", Hfr: "\u210C", HilbertSpace: "\u210B", hksearow: "\u2925", hkswarow: "\u2926", hoarr: "\u21FF", homtht: "\u223B", hookleftarrow: "\u21A9", hookrightarrow: "\u21AA", hopf: "\u{1D559}", Hopf: "\u210D", horbar: "\u2015", HorizontalLine: "\u2500", hscr: "\u{1D4BD}", Hscr: "\u210B", hslash: "\u210F", Hstrok: "\u0126", hstrok: "\u0127", HumpDownHump: "\u224E", HumpEqual: "\u224F", hybull: "\u2043", hyphen: "\u2010", Iacute: "\xCD", iacute: "\xED", ic: "\u2063", Icirc: "\xCE", icirc: "\xEE", Icy: "\u0418", icy: "\u0438", Idot: "\u0130", IEcy: "\u0415", iecy: "\u0435", iexcl: "\xA1", iff: "\u21D4", ifr: "\u{1D526}", Ifr: "\u2111", Igrave: "\xCC", igrave: "\xEC", ii: "\u2148", iiiint: "\u2A0C", iiint: "\u222D", iinfin: "\u29DC", iiota: "\u2129", IJlig: "\u0132", ijlig: "\u0133", Imacr: "\u012A", imacr: "\u012B", image: "\u2111", ImaginaryI: "\u2148", imagline: "\u2110", imagpart: "\u2111", imath: "\u0131", Im: "\u2111", imof: "\u22B7", imped: "\u01B5", Implies: "\u21D2", incare: "\u2105", in: "\u2208", infin: "\u221E", infintie: "\u29DD", inodot: "\u0131", intcal: "\u22BA", int: "\u222B", Int: "\u222C", integers: "\u2124", Integral: "\u222B", intercal: "\u22BA", Intersection: "\u22C2", intlarhk: "\u2A17", intprod: "\u2A3C", InvisibleComma: "\u2063", InvisibleTimes: "\u2062", IOcy: "\u0401", iocy: "\u0451", Iogon: "\u012E", iogon: "\u012F", Iopf: "\u{1D540}", iopf: "\u{1D55A}", Iota: "\u0399", iota: "\u03B9", iprod: "\u2A3C", iquest: "\xBF", iscr: "\u{1D4BE}", Iscr: "\u2110", isin: "\u2208", isindot: "\u22F5", isinE: "\u22F9", isins: "\u22F4", isinsv: "\u22F3", isinv: "\u2208", it: "\u2062", Itilde: "\u0128", itilde: "\u0129", Iukcy: "\u0406", iukcy: "\u0456", Iuml: "\xCF", iuml: "\xEF", Jcirc: "\u0134", jcirc: "\u0135", Jcy: "\u0419", jcy: "\u0439", Jfr: "\u{1D50D}", jfr: "\u{1D527}", jmath: "\u0237", Jopf: "\u{1D541}", jopf: "\u{1D55B}", Jscr: "\u{1D4A5}", jscr: "\u{1D4BF}", Jsercy: "\u0408", jsercy: "\u0458", Jukcy: "\u0404", jukcy: "\u0454", Kappa: "\u039A", kappa: "\u03BA", kappav: "\u03F0", Kcedil: "\u0136", kcedil: "\u0137", Kcy: "\u041A", kcy: "\u043A", Kfr: "\u{1D50E}", kfr: "\u{1D528}", kgreen: "\u0138", KHcy: "\u0425", khcy: "\u0445", KJcy: "\u040C", kjcy: "\u045C", Kopf: "\u{1D542}", kopf: "\u{1D55C}", Kscr: "\u{1D4A6}", kscr: "\u{1D4C0}", lAarr: "\u21DA", Lacute: "\u0139", lacute: "\u013A", laemptyv: "\u29B4", lagran: "\u2112", Lambda: "\u039B", lambda: "\u03BB", lang: "\u27E8", Lang: "\u27EA", langd: "\u2991", langle: "\u27E8", lap: "\u2A85", Laplacetrf: "\u2112", laquo: "\xAB", larrb: "\u21E4", larrbfs: "\u291F", larr: "\u2190", Larr: "\u219E", lArr: "\u21D0", larrfs: "\u291D", larrhk: "\u21A9", larrlp: "\u21AB", larrpl: "\u2939", larrsim: "\u2973", larrtl: "\u21A2", latail: "\u2919", lAtail: "\u291B", lat: "\u2AAB", late: "\u2AAD", lates: "\u2AAD\uFE00", lbarr: "\u290C", lBarr: "\u290E", lbbrk: "\u2772", lbrace: "{", lbrack: "[", lbrke: "\u298B", lbrksld: "\u298F", lbrkslu: "\u298D", Lcaron: "\u013D", lcaron: "\u013E", Lcedil: "\u013B", lcedil: "\u013C", lceil: "\u2308", lcub: "{", Lcy: "\u041B", lcy: "\u043B", ldca: "\u2936", ldquo: "\u201C", ldquor: "\u201E", ldrdhar: "\u2967", ldrushar: "\u294B", ldsh: "\u21B2", le: "\u2264", lE: "\u2266", LeftAngleBracket: "\u27E8", LeftArrowBar: "\u21E4", leftarrow: "\u2190", LeftArrow: "\u2190", Leftarrow: "\u21D0", LeftArrowRightArrow: "\u21C6", leftarrowtail: "\u21A2", LeftCeiling: "\u2308", LeftDoubleBracket: "\u27E6", LeftDownTeeVector: "\u2961", LeftDownVectorBar: "\u2959", LeftDownVector: "\u21C3", LeftFloor: "\u230A", leftharpoondown: "\u21BD", leftharpoonup: "\u21BC", leftleftarrows: "\u21C7", leftrightarrow: "\u2194", LeftRightArrow: "\u2194", Leftrightarrow: "\u21D4", leftrightarrows: "\u21C6", leftrightharpoons: "\u21CB", leftrightsquigarrow: "\u21AD", LeftRightVector: "\u294E", LeftTeeArrow: "\u21A4", LeftTee: "\u22A3", LeftTeeVector: "\u295A", leftthreetimes: "\u22CB", LeftTriangleBar: "\u29CF", LeftTriangle: "\u22B2", LeftTriangleEqual: "\u22B4", LeftUpDownVector: "\u2951", LeftUpTeeVector: "\u2960", LeftUpVectorBar: "\u2958", LeftUpVector: "\u21BF", LeftVectorBar: "\u2952", LeftVector: "\u21BC", lEg: "\u2A8B", leg: "\u22DA", leq: "\u2264", leqq: "\u2266", leqslant: "\u2A7D", lescc: "\u2AA8", les: "\u2A7D", lesdot: "\u2A7F", lesdoto: "\u2A81", lesdotor: "\u2A83", lesg: "\u22DA\uFE00", lesges: "\u2A93", lessapprox: "\u2A85", lessdot: "\u22D6", lesseqgtr: "\u22DA", lesseqqgtr: "\u2A8B", LessEqualGreater: "\u22DA", LessFullEqual: "\u2266", LessGreater: "\u2276", lessgtr: "\u2276", LessLess: "\u2AA1", lesssim: "\u2272", LessSlantEqual: "\u2A7D", LessTilde: "\u2272", lfisht: "\u297C", lfloor: "\u230A", Lfr: "\u{1D50F}", lfr: "\u{1D529}", lg: "\u2276", lgE: "\u2A91", lHar: "\u2962", lhard: "\u21BD", lharu: "\u21BC", lharul: "\u296A", lhblk: "\u2584", LJcy: "\u0409", ljcy: "\u0459", llarr: "\u21C7", ll: "\u226A", Ll: "\u22D8", llcorner: "\u231E", Lleftarrow: "\u21DA", llhard: "\u296B", lltri: "\u25FA", Lmidot: "\u013F", lmidot: "\u0140", lmoustache: "\u23B0", lmoust: "\u23B0", lnap: "\u2A89", lnapprox: "\u2A89", lne: "\u2A87", lnE: "\u2268", lneq: "\u2A87", lneqq: "\u2268", lnsim: "\u22E6", loang: "\u27EC", loarr: "\u21FD", lobrk: "\u27E6", longleftarrow: "\u27F5", LongLeftArrow: "\u27F5", Longleftarrow: "\u27F8", longleftrightarrow: "\u27F7", LongLeftRightArrow: "\u27F7", Longleftrightarrow: "\u27FA", longmapsto: "\u27FC", longrightarrow: "\u27F6", LongRightArrow: "\u27F6", Longrightarrow: "\u27F9", looparrowleft: "\u21AB", looparrowright: "\u21AC", lopar: "\u2985", Lopf: "\u{1D543}", lopf: "\u{1D55D}", loplus: "\u2A2D", lotimes: "\u2A34", lowast: "\u2217", lowbar: "_", LowerLeftArrow: "\u2199", LowerRightArrow: "\u2198", loz: "\u25CA", lozenge: "\u25CA", lozf: "\u29EB", lpar: "(", lparlt: "\u2993", lrarr: "\u21C6", lrcorner: "\u231F", lrhar: "\u21CB", lrhard: "\u296D", lrm: "\u200E", lrtri: "\u22BF", lsaquo: "\u2039", lscr: "\u{1D4C1}", Lscr: "\u2112", lsh: "\u21B0", Lsh: "\u21B0", lsim: "\u2272", lsime: "\u2A8D", lsimg: "\u2A8F", lsqb: "[", lsquo: "\u2018", lsquor: "\u201A", Lstrok: "\u0141", lstrok: "\u0142", ltcc: "\u2AA6", ltcir: "\u2A79", lt: "<", LT: "<", Lt: "\u226A", ltdot: "\u22D6", lthree: "\u22CB", ltimes: "\u22C9", ltlarr: "\u2976", ltquest: "\u2A7B", ltri: "\u25C3", ltrie: "\u22B4", ltrif: "\u25C2", ltrPar: "\u2996", lurdshar: "\u294A", luruhar: "\u2966", lvertneqq: "\u2268\uFE00", lvnE: "\u2268\uFE00", macr: "\xAF", male: "\u2642", malt: "\u2720", maltese: "\u2720", Map: "\u2905", map: "\u21A6", mapsto: "\u21A6", mapstodown: "\u21A7", mapstoleft: "\u21A4", mapstoup: "\u21A5", marker: "\u25AE", mcomma: "\u2A29", Mcy: "\u041C", mcy: "\u043C", mdash: "\u2014", mDDot: "\u223A", measuredangle: "\u2221", MediumSpace: "\u205F", Mellintrf: "\u2133", Mfr: "\u{1D510}", mfr: "\u{1D52A}", mho: "\u2127", micro: "\xB5", midast: "*", midcir: "\u2AF0", mid: "\u2223", middot: "\xB7", minusb: "\u229F", minus: "\u2212", minusd: "\u2238", minusdu: "\u2A2A", MinusPlus: "\u2213", mlcp: "\u2ADB", mldr: "\u2026", mnplus: "\u2213", models: "\u22A7", Mopf: "\u{1D544}", mopf: "\u{1D55E}", mp: "\u2213", mscr: "\u{1D4C2}", Mscr: "\u2133", mstpos: "\u223E", Mu: "\u039C", mu: "\u03BC", multimap: "\u22B8", mumap: "\u22B8", nabla: "\u2207", Nacute: "\u0143", nacute: "\u0144", nang: "\u2220\u20D2", nap: "\u2249", napE: "\u2A70\u0338", napid: "\u224B\u0338", napos: "\u0149", napprox: "\u2249", natural: "\u266E", naturals: "\u2115", natur: "\u266E", nbsp: "\xA0", nbump: "\u224E\u0338", nbumpe: "\u224F\u0338", ncap: "\u2A43", Ncaron: "\u0147", ncaron: "\u0148", Ncedil: "\u0145", ncedil: "\u0146", ncong: "\u2247", ncongdot: "\u2A6D\u0338", ncup: "\u2A42", Ncy: "\u041D", ncy: "\u043D", ndash: "\u2013", nearhk: "\u2924", nearr: "\u2197", neArr: "\u21D7", nearrow: "\u2197", ne: "\u2260", nedot: "\u2250\u0338", NegativeMediumSpace: "\u200B", NegativeThickSpace: "\u200B", NegativeThinSpace: "\u200B", NegativeVeryThinSpace: "\u200B", nequiv: "\u2262", nesear: "\u2928", nesim: "\u2242\u0338", NestedGreaterGreater: "\u226B", NestedLessLess: "\u226A", NewLine: "\n", nexist: "\u2204", nexists: "\u2204", Nfr: "\u{1D511}", nfr: "\u{1D52B}", ngE: "\u2267\u0338", nge: "\u2271", ngeq: "\u2271", ngeqq: "\u2267\u0338", ngeqslant: "\u2A7E\u0338", nges: "\u2A7E\u0338", nGg: "\u22D9\u0338", ngsim: "\u2275", nGt: "\u226B\u20D2", ngt: "\u226F", ngtr: "\u226F", nGtv: "\u226B\u0338", nharr: "\u21AE", nhArr: "\u21CE", nhpar: "\u2AF2", ni: "\u220B", nis: "\u22FC", nisd: "\u22FA", niv: "\u220B", NJcy: "\u040A", njcy: "\u045A", nlarr: "\u219A", nlArr: "\u21CD", nldr: "\u2025", nlE: "\u2266\u0338", nle: "\u2270", nleftarrow: "\u219A", nLeftarrow: "\u21CD", nleftrightarrow: "\u21AE", nLeftrightarrow: "\u21CE", nleq: "\u2270", nleqq: "\u2266\u0338", nleqslant: "\u2A7D\u0338", nles: "\u2A7D\u0338", nless: "\u226E", nLl: "\u22D8\u0338", nlsim: "\u2274", nLt: "\u226A\u20D2", nlt: "\u226E", nltri: "\u22EA", nltrie: "\u22EC", nLtv: "\u226A\u0338", nmid: "\u2224", NoBreak: "\u2060", NonBreakingSpace: "\xA0", nopf: "\u{1D55F}", Nopf: "\u2115", Not: "\u2AEC", not: "\xAC", NotCongruent: "\u2262", NotCupCap: "\u226D", NotDoubleVerticalBar: "\u2226", NotElement: "\u2209", NotEqual: "\u2260", NotEqualTilde: "\u2242\u0338", NotExists: "\u2204", NotGreater: "\u226F", NotGreaterEqual: "\u2271", NotGreaterFullEqual: "\u2267\u0338", NotGreaterGreater: "\u226B\u0338", NotGreaterLess: "\u2279", NotGreaterSlantEqual: "\u2A7E\u0338", NotGreaterTilde: "\u2275", NotHumpDownHump: "\u224E\u0338", NotHumpEqual: "\u224F\u0338", notin: "\u2209", notindot: "\u22F5\u0338", notinE: "\u22F9\u0338", notinva: "\u2209", notinvb: "\u22F7", notinvc: "\u22F6", NotLeftTriangleBar: "\u29CF\u0338", NotLeftTriangle: "\u22EA", NotLeftTriangleEqual: "\u22EC", NotLess: "\u226E", NotLessEqual: "\u2270", NotLessGreater: "\u2278", NotLessLess: "\u226A\u0338", NotLessSlantEqual: "\u2A7D\u0338", NotLessTilde: "\u2274", NotNestedGreaterGreater: "\u2AA2\u0338", NotNestedLessLess: "\u2AA1\u0338", notni: "\u220C", notniva: "\u220C", notnivb: "\u22FE", notnivc: "\u22FD", NotPrecedes: "\u2280", NotPrecedesEqual: "\u2AAF\u0338", NotPrecedesSlantEqual: "\u22E0", NotReverseElement: "\u220C", NotRightTriangleBar: "\u29D0\u0338", NotRightTriangle: "\u22EB", NotRightTriangleEqual: "\u22ED", NotSquareSubset: "\u228F\u0338", NotSquareSubsetEqual: "\u22E2", NotSquareSuperset: "\u2290\u0338", NotSquareSupersetEqual: "\u22E3", NotSubset: "\u2282\u20D2", NotSubsetEqual: "\u2288", NotSucceeds: "\u2281", NotSucceedsEqual: "\u2AB0\u0338", NotSucceedsSlantEqual: "\u22E1", NotSucceedsTilde: "\u227F\u0338", NotSuperset: "\u2283\u20D2", NotSupersetEqual: "\u2289", NotTilde: "\u2241", NotTildeEqual: "\u2244", NotTildeFullEqual: "\u2247", NotTildeTilde: "\u2249", NotVerticalBar: "\u2224", nparallel: "\u2226", npar: "\u2226", nparsl: "\u2AFD\u20E5", npart: "\u2202\u0338", npolint: "\u2A14", npr: "\u2280", nprcue: "\u22E0", nprec: "\u2280", npreceq: "\u2AAF\u0338", npre: "\u2AAF\u0338", nrarrc: "\u2933\u0338", nrarr: "\u219B", nrArr: "\u21CF", nrarrw: "\u219D\u0338", nrightarrow: "\u219B", nRightarrow: "\u21CF", nrtri: "\u22EB", nrtrie: "\u22ED", nsc: "\u2281", nsccue: "\u22E1", nsce: "\u2AB0\u0338", Nscr: "\u{1D4A9}", nscr: "\u{1D4C3}", nshortmid: "\u2224", nshortparallel: "\u2226", nsim: "\u2241", nsime: "\u2244", nsimeq: "\u2244", nsmid: "\u2224", nspar: "\u2226", nsqsube: "\u22E2", nsqsupe: "\u22E3", nsub: "\u2284", nsubE: "\u2AC5\u0338", nsube: "\u2288", nsubset: "\u2282\u20D2", nsubseteq: "\u2288", nsubseteqq: "\u2AC5\u0338", nsucc: "\u2281", nsucceq: "\u2AB0\u0338", nsup: "\u2285", nsupE: "\u2AC6\u0338", nsupe: "\u2289", nsupset: "\u2283\u20D2", nsupseteq: "\u2289", nsupseteqq: "\u2AC6\u0338", ntgl: "\u2279", Ntilde: "\xD1", ntilde: "\xF1", ntlg: "\u2278", ntriangleleft: "\u22EA", ntrianglelefteq: "\u22EC", ntriangleright: "\u22EB", ntrianglerighteq: "\u22ED", Nu: "\u039D", nu: "\u03BD", num: "#", numero: "\u2116", numsp: "\u2007", nvap: "\u224D\u20D2", nvdash: "\u22AC", nvDash: "\u22AD", nVdash: "\u22AE", nVDash: "\u22AF", nvge: "\u2265\u20D2", nvgt: ">\u20D2", nvHarr: "\u2904", nvinfin: "\u29DE", nvlArr: "\u2902", nvle: "\u2264\u20D2", nvlt: "<\u20D2", nvltrie: "\u22B4\u20D2", nvrArr: "\u2903", nvrtrie: "\u22B5\u20D2", nvsim: "\u223C\u20D2", nwarhk: "\u2923", nwarr: "\u2196", nwArr: "\u21D6", nwarrow: "\u2196", nwnear: "\u2927", Oacute: "\xD3", oacute: "\xF3", oast: "\u229B", Ocirc: "\xD4", ocirc: "\xF4", ocir: "\u229A", Ocy: "\u041E", ocy: "\u043E", odash: "\u229D", Odblac: "\u0150", odblac: "\u0151", odiv: "\u2A38", odot: "\u2299", odsold: "\u29BC", OElig: "\u0152", oelig: "\u0153", ofcir: "\u29BF", Ofr: "\u{1D512}", ofr: "\u{1D52C}", ogon: "\u02DB", Ograve: "\xD2", ograve: "\xF2", ogt: "\u29C1", ohbar: "\u29B5", ohm: "\u03A9", oint: "\u222E", olarr: "\u21BA", olcir: "\u29BE", olcross: "\u29BB", oline: "\u203E", olt: "\u29C0", Omacr: "\u014C", omacr: "\u014D", Omega: "\u03A9", omega: "\u03C9", Omicron: "\u039F", omicron: "\u03BF", omid: "\u29B6", ominus: "\u2296", Oopf: "\u{1D546}", oopf: "\u{1D560}", opar: "\u29B7", OpenCurlyDoubleQuote: "\u201C", OpenCurlyQuote: "\u2018", operp: "\u29B9", oplus: "\u2295", orarr: "\u21BB", Or: "\u2A54", or: "\u2228", ord: "\u2A5D", order: "\u2134", orderof: "\u2134", ordf: "\xAA", ordm: "\xBA", origof: "\u22B6", oror: "\u2A56", orslope: "\u2A57", orv: "\u2A5B", oS: "\u24C8", Oscr: "\u{1D4AA}", oscr: "\u2134", Oslash: "\xD8", oslash: "\xF8", osol: "\u2298", Otilde: "\xD5", otilde: "\xF5", otimesas: "\u2A36", Otimes: "\u2A37", otimes: "\u2297", Ouml: "\xD6", ouml: "\xF6", ovbar: "\u233D", OverBar: "\u203E", OverBrace: "\u23DE", OverBracket: "\u23B4", OverParenthesis: "\u23DC", para: "\xB6", parallel: "\u2225", par: "\u2225", parsim: "\u2AF3", parsl: "\u2AFD", part: "\u2202", PartialD: "\u2202", Pcy: "\u041F", pcy: "\u043F", percnt: "%", period: ".", permil: "\u2030", perp: "\u22A5", pertenk: "\u2031", Pfr: "\u{1D513}", pfr: "\u{1D52D}", Phi: "\u03A6", phi: "\u03C6", phiv: "\u03D5", phmmat: "\u2133", phone: "\u260E", Pi: "\u03A0", pi: "\u03C0", pitchfork: "\u22D4", piv: "\u03D6", planck: "\u210F", planckh: "\u210E", plankv: "\u210F", plusacir: "\u2A23", plusb: "\u229E", pluscir: "\u2A22", plus: "+", plusdo: "\u2214", plusdu: "\u2A25", pluse: "\u2A72", PlusMinus: "\xB1", plusmn: "\xB1", plussim: "\u2A26", plustwo: "\u2A27", pm: "\xB1", Poincareplane: "\u210C", pointint: "\u2A15", popf: "\u{1D561}", Popf: "\u2119", pound: "\xA3", prap: "\u2AB7", Pr: "\u2ABB", pr: "\u227A", prcue: "\u227C", precapprox: "\u2AB7", prec: "\u227A", preccurlyeq: "\u227C", Precedes: "\u227A", PrecedesEqual: "\u2AAF", PrecedesSlantEqual: "\u227C", PrecedesTilde: "\u227E", preceq: "\u2AAF", precnapprox: "\u2AB9", precneqq: "\u2AB5", precnsim: "\u22E8", pre: "\u2AAF", prE: "\u2AB3", precsim: "\u227E", prime: "\u2032", Prime: "\u2033", primes: "\u2119", prnap: "\u2AB9", prnE: "\u2AB5", prnsim: "\u22E8", prod: "\u220F", Product: "\u220F", profalar: "\u232E", profline: "\u2312", profsurf: "\u2313", prop: "\u221D", Proportional: "\u221D", Proportion: "\u2237", propto: "\u221D", prsim: "\u227E", prurel: "\u22B0", Pscr: "\u{1D4AB}", pscr: "\u{1D4C5}", Psi: "\u03A8", psi: "\u03C8", puncsp: "\u2008", Qfr: "\u{1D514}", qfr: "\u{1D52E}", qint: "\u2A0C", qopf: "\u{1D562}", Qopf: "\u211A", qprime: "\u2057", Qscr: "\u{1D4AC}", qscr: "\u{1D4C6}", quaternions: "\u210D", quatint: "\u2A16", quest: "?", questeq: "\u225F", quot: '"', QUOT: '"', rAarr: "\u21DB", race: "\u223D\u0331", Racute: "\u0154", racute: "\u0155", radic: "\u221A", raemptyv: "\u29B3", rang: "\u27E9", Rang: "\u27EB", rangd: "\u2992", range: "\u29A5", rangle: "\u27E9", raquo: "\xBB", rarrap: "\u2975", rarrb: "\u21E5", rarrbfs: "\u2920", rarrc: "\u2933", rarr: "\u2192", Rarr: "\u21A0", rArr: "\u21D2", rarrfs: "\u291E", rarrhk: "\u21AA", rarrlp: "\u21AC", rarrpl: "\u2945", rarrsim: "\u2974", Rarrtl: "\u2916", rarrtl: "\u21A3", rarrw: "\u219D", ratail: "\u291A", rAtail: "\u291C", ratio: "\u2236", rationals: "\u211A", rbarr: "\u290D", rBarr: "\u290F", RBarr: "\u2910", rbbrk: "\u2773", rbrace: "}", rbrack: "]", rbrke: "\u298C", rbrksld: "\u298E", rbrkslu: "\u2990", Rcaron: "\u0158", rcaron: "\u0159", Rcedil: "\u0156", rcedil: "\u0157", rceil: "\u2309", rcub: "}", Rcy: "\u0420", rcy: "\u0440", rdca: "\u2937", rdldhar: "\u2969", rdquo: "\u201D", rdquor: "\u201D", rdsh: "\u21B3", real: "\u211C", realine: "\u211B", realpart: "\u211C", reals: "\u211D", Re: "\u211C", rect: "\u25AD", reg: "\xAE", REG: "\xAE", ReverseElement: "\u220B", ReverseEquilibrium: "\u21CB", ReverseUpEquilibrium: "\u296F", rfisht: "\u297D", rfloor: "\u230B", rfr: "\u{1D52F}", Rfr: "\u211C", rHar: "\u2964", rhard: "\u21C1", rharu: "\u21C0", rharul: "\u296C", Rho: "\u03A1", rho: "\u03C1", rhov: "\u03F1", RightAngleBracket: "\u27E9", RightArrowBar: "\u21E5", rightarrow: "\u2192", RightArrow: "\u2192", Rightarrow: "\u21D2", RightArrowLeftArrow: "\u21C4", rightarrowtail: "\u21A3", RightCeiling: "\u2309", RightDoubleBracket: "\u27E7", RightDownTeeVector: "\u295D", RightDownVectorBar: "\u2955", RightDownVector: "\u21C2", RightFloor: "\u230B", rightharpoondown: "\u21C1", rightharpoonup: "\u21C0", rightleftarrows: "\u21C4", rightleftharpoons: "\u21CC", rightrightarrows: "\u21C9", rightsquigarrow: "\u219D", RightTeeArrow: "\u21A6", RightTee: "\u22A2", RightTeeVector: "\u295B", rightthreetimes: "\u22CC", RightTriangleBar: "\u29D0", RightTriangle: "\u22B3", RightTriangleEqual: "\u22B5", RightUpDownVector: "\u294F", RightUpTeeVector: "\u295C", RightUpVectorBar: "\u2954", RightUpVector: "\u21BE", RightVectorBar: "\u2953", RightVector: "\u21C0", ring: "\u02DA", risingdotseq: "\u2253", rlarr: "\u21C4", rlhar: "\u21CC", rlm: "\u200F", rmoustache: "\u23B1", rmoust: "\u23B1", rnmid: "\u2AEE", roang: "\u27ED", roarr: "\u21FE", robrk: "\u27E7", ropar: "\u2986", ropf: "\u{1D563}", Ropf: "\u211D", roplus: "\u2A2E", rotimes: "\u2A35", RoundImplies: "\u2970", rpar: ")", rpargt: "\u2994", rppolint: "\u2A12", rrarr: "\u21C9", Rrightarrow: "\u21DB", rsaquo: "\u203A", rscr: "\u{1D4C7}", Rscr: "\u211B", rsh: "\u21B1", Rsh: "\u21B1", rsqb: "]", rsquo: "\u2019", rsquor: "\u2019", rthree: "\u22CC", rtimes: "\u22CA", rtri: "\u25B9", rtrie: "\u22B5", rtrif: "\u25B8", rtriltri: "\u29CE", RuleDelayed: "\u29F4", ruluhar: "\u2968", rx: "\u211E", Sacute: "\u015A", sacute: "\u015B", sbquo: "\u201A", scap: "\u2AB8", Scaron: "\u0160", scaron: "\u0161", Sc: "\u2ABC", sc: "\u227B", sccue: "\u227D", sce: "\u2AB0", scE: "\u2AB4", Scedil: "\u015E", scedil: "\u015F", Scirc: "\u015C", scirc: "\u015D", scnap: "\u2ABA", scnE: "\u2AB6", scnsim: "\u22E9", scpolint: "\u2A13", scsim: "\u227F", Scy: "\u0421", scy: "\u0441", sdotb: "\u22A1", sdot: "\u22C5", sdote: "\u2A66", searhk: "\u2925", searr: "\u2198", seArr: "\u21D8", searrow: "\u2198", sect: "\xA7", semi: ";", seswar: "\u2929", setminus: "\u2216", setmn: "\u2216", sext: "\u2736", Sfr: "\u{1D516}", sfr: "\u{1D530}", sfrown: "\u2322", sharp: "\u266F", SHCHcy: "\u0429", shchcy: "\u0449", SHcy: "\u0428", shcy: "\u0448", ShortDownArrow: "\u2193", ShortLeftArrow: "\u2190", shortmid: "\u2223", shortparallel: "\u2225", ShortRightArrow: "\u2192", ShortUpArrow: "\u2191", shy: "\xAD", Sigma: "\u03A3", sigma: "\u03C3", sigmaf: "\u03C2", sigmav: "\u03C2", sim: "\u223C", simdot: "\u2A6A", sime: "\u2243", simeq: "\u2243", simg: "\u2A9E", simgE: "\u2AA0", siml: "\u2A9D", simlE: "\u2A9F", simne: "\u2246", simplus: "\u2A24", simrarr: "\u2972", slarr: "\u2190", SmallCircle: "\u2218", smallsetminus: "\u2216", smashp: "\u2A33", smeparsl: "\u29E4", smid: "\u2223", smile: "\u2323", smt: "\u2AAA", smte: "\u2AAC", smtes: "\u2AAC\uFE00", SOFTcy: "\u042C", softcy: "\u044C", solbar: "\u233F", solb: "\u29C4", sol: "/", Sopf: "\u{1D54A}", sopf: "\u{1D564}", spades: "\u2660", spadesuit: "\u2660", spar: "\u2225", sqcap: "\u2293", sqcaps: "\u2293\uFE00", sqcup: "\u2294", sqcups: "\u2294\uFE00", Sqrt: "\u221A", sqsub: "\u228F", sqsube: "\u2291", sqsubset: "\u228F", sqsubseteq: "\u2291", sqsup: "\u2290", sqsupe: "\u2292", sqsupset: "\u2290", sqsupseteq: "\u2292", square: "\u25A1", Square: "\u25A1", SquareIntersection: "\u2293", SquareSubset: "\u228F", SquareSubsetEqual: "\u2291", SquareSuperset: "\u2290", SquareSupersetEqual: "\u2292", SquareUnion: "\u2294", squarf: "\u25AA", squ: "\u25A1", squf: "\u25AA", srarr: "\u2192", Sscr: "\u{1D4AE}", sscr: "\u{1D4C8}", ssetmn: "\u2216", ssmile: "\u2323", sstarf: "\u22C6", Star: "\u22C6", star: "\u2606", starf: "\u2605", straightepsilon: "\u03F5", straightphi: "\u03D5", strns: "\xAF", sub: "\u2282", Sub: "\u22D0", subdot: "\u2ABD", subE: "\u2AC5", sube: "\u2286", subedot: "\u2AC3", submult: "\u2AC1", subnE: "\u2ACB", subne: "\u228A", subplus: "\u2ABF", subrarr: "\u2979", subset: "\u2282", Subset: "\u22D0", subseteq: "\u2286", subseteqq: "\u2AC5", SubsetEqual: "\u2286", subsetneq: "\u228A", subsetneqq: "\u2ACB", subsim: "\u2AC7", subsub: "\u2AD5", subsup: "\u2AD3", succapprox: "\u2AB8", succ: "\u227B", succcurlyeq: "\u227D", Succeeds: "\u227B", SucceedsEqual: "\u2AB0", SucceedsSlantEqual: "\u227D", SucceedsTilde: "\u227F", succeq: "\u2AB0", succnapprox: "\u2ABA", succneqq: "\u2AB6", succnsim: "\u22E9", succsim: "\u227F", SuchThat: "\u220B", sum: "\u2211", Sum: "\u2211", sung: "\u266A", sup1: "\xB9", sup2: "\xB2", sup3: "\xB3", sup: "\u2283", Sup: "\u22D1", supdot: "\u2ABE", supdsub: "\u2AD8", supE: "\u2AC6", supe: "\u2287", supedot: "\u2AC4", Superset: "\u2283", SupersetEqual: "\u2287", suphsol: "\u27C9", suphsub: "\u2AD7", suplarr: "\u297B", supmult: "\u2AC2", supnE: "\u2ACC", supne: "\u228B", supplus: "\u2AC0", supset: "\u2283", Supset: "\u22D1", supseteq: "\u2287", supseteqq: "\u2AC6", supsetneq: "\u228B", supsetneqq: "\u2ACC", supsim: "\u2AC8", supsub: "\u2AD4", supsup: "\u2AD6", swarhk: "\u2926", swarr: "\u2199", swArr: "\u21D9", swarrow: "\u2199", swnwar: "\u292A", szlig: "\xDF", Tab: "	", target: "\u2316", Tau: "\u03A4", tau: "\u03C4", tbrk: "\u23B4", Tcaron: "\u0164", tcaron: "\u0165", Tcedil: "\u0162", tcedil: "\u0163", Tcy: "\u0422", tcy: "\u0442", tdot: "\u20DB", telrec: "\u2315", Tfr: "\u{1D517}", tfr: "\u{1D531}", there4: "\u2234", therefore: "\u2234", Therefore: "\u2234", Theta: "\u0398", theta: "\u03B8", thetasym: "\u03D1", thetav: "\u03D1", thickapprox: "\u2248", thicksim: "\u223C", ThickSpace: "\u205F\u200A", ThinSpace: "\u2009", thinsp: "\u2009", thkap: "\u2248", thksim: "\u223C", THORN: "\xDE", thorn: "\xFE", tilde: "\u02DC", Tilde: "\u223C", TildeEqual: "\u2243", TildeFullEqual: "\u2245", TildeTilde: "\u2248", timesbar: "\u2A31", timesb: "\u22A0", times: "\xD7", timesd: "\u2A30", tint: "\u222D", toea: "\u2928", topbot: "\u2336", topcir: "\u2AF1", top: "\u22A4", Topf: "\u{1D54B}", topf: "\u{1D565}", topfork: "\u2ADA", tosa: "\u2929", tprime: "\u2034", trade: "\u2122", TRADE: "\u2122", triangle: "\u25B5", triangledown: "\u25BF", triangleleft: "\u25C3", trianglelefteq: "\u22B4", triangleq: "\u225C", triangleright: "\u25B9", trianglerighteq: "\u22B5", tridot: "\u25EC", trie: "\u225C", triminus: "\u2A3A", TripleDot: "\u20DB", triplus: "\u2A39", trisb: "\u29CD", tritime: "\u2A3B", trpezium: "\u23E2", Tscr: "\u{1D4AF}", tscr: "\u{1D4C9}", TScy: "\u0426", tscy: "\u0446", TSHcy: "\u040B", tshcy: "\u045B", Tstrok: "\u0166", tstrok: "\u0167", twixt: "\u226C", twoheadleftarrow: "\u219E", twoheadrightarrow: "\u21A0", Uacute: "\xDA", uacute: "\xFA", uarr: "\u2191", Uarr: "\u219F", uArr: "\u21D1", Uarrocir: "\u2949", Ubrcy: "\u040E", ubrcy: "\u045E", Ubreve: "\u016C", ubreve: "\u016D", Ucirc: "\xDB", ucirc: "\xFB", Ucy: "\u0423", ucy: "\u0443", udarr: "\u21C5", Udblac: "\u0170", udblac: "\u0171", udhar: "\u296E", ufisht: "\u297E", Ufr: "\u{1D518}", ufr: "\u{1D532}", Ugrave: "\xD9", ugrave: "\xF9", uHar: "\u2963", uharl: "\u21BF", uharr: "\u21BE", uhblk: "\u2580", ulcorn: "\u231C", ulcorner: "\u231C", ulcrop: "\u230F", ultri: "\u25F8", Umacr: "\u016A", umacr: "\u016B", uml: "\xA8", UnderBar: "_", UnderBrace: "\u23DF", UnderBracket: "\u23B5", UnderParenthesis: "\u23DD", Union: "\u22C3", UnionPlus: "\u228E", Uogon: "\u0172", uogon: "\u0173", Uopf: "\u{1D54C}", uopf: "\u{1D566}", UpArrowBar: "\u2912", uparrow: "\u2191", UpArrow: "\u2191", Uparrow: "\u21D1", UpArrowDownArrow: "\u21C5", updownarrow: "\u2195", UpDownArrow: "\u2195", Updownarrow: "\u21D5", UpEquilibrium: "\u296E", upharpoonleft: "\u21BF", upharpoonright: "\u21BE", uplus: "\u228E", UpperLeftArrow: "\u2196", UpperRightArrow: "\u2197", upsi: "\u03C5", Upsi: "\u03D2", upsih: "\u03D2", Upsilon: "\u03A5", upsilon: "\u03C5", UpTeeArrow: "\u21A5", UpTee: "\u22A5", upuparrows: "\u21C8", urcorn: "\u231D", urcorner: "\u231D", urcrop: "\u230E", Uring: "\u016E", uring: "\u016F", urtri: "\u25F9", Uscr: "\u{1D4B0}", uscr: "\u{1D4CA}", utdot: "\u22F0", Utilde: "\u0168", utilde: "\u0169", utri: "\u25B5", utrif: "\u25B4", uuarr: "\u21C8", Uuml: "\xDC", uuml: "\xFC", uwangle: "\u29A7", vangrt: "\u299C", varepsilon: "\u03F5", varkappa: "\u03F0", varnothing: "\u2205", varphi: "\u03D5", varpi: "\u03D6", varpropto: "\u221D", varr: "\u2195", vArr: "\u21D5", varrho: "\u03F1", varsigma: "\u03C2", varsubsetneq: "\u228A\uFE00", varsubsetneqq: "\u2ACB\uFE00", varsupsetneq: "\u228B\uFE00", varsupsetneqq: "\u2ACC\uFE00", vartheta: "\u03D1", vartriangleleft: "\u22B2", vartriangleright: "\u22B3", vBar: "\u2AE8", Vbar: "\u2AEB", vBarv: "\u2AE9", Vcy: "\u0412", vcy: "\u0432", vdash: "\u22A2", vDash: "\u22A8", Vdash: "\u22A9", VDash: "\u22AB", Vdashl: "\u2AE6", veebar: "\u22BB", vee: "\u2228", Vee: "\u22C1", veeeq: "\u225A", vellip: "\u22EE", verbar: "|", Verbar: "\u2016", vert: "|", Vert: "\u2016", VerticalBar: "\u2223", VerticalLine: "|", VerticalSeparator: "\u2758", VerticalTilde: "\u2240", VeryThinSpace: "\u200A", Vfr: "\u{1D519}", vfr: "\u{1D533}", vltri: "\u22B2", vnsub: "\u2282\u20D2", vnsup: "\u2283\u20D2", Vopf: "\u{1D54D}", vopf: "\u{1D567}", vprop: "\u221D", vrtri: "\u22B3", Vscr: "\u{1D4B1}", vscr: "\u{1D4CB}", vsubnE: "\u2ACB\uFE00", vsubne: "\u228A\uFE00", vsupnE: "\u2ACC\uFE00", vsupne: "\u228B\uFE00", Vvdash: "\u22AA", vzigzag: "\u299A", Wcirc: "\u0174", wcirc: "\u0175", wedbar: "\u2A5F", wedge: "\u2227", Wedge: "\u22C0", wedgeq: "\u2259", weierp: "\u2118", Wfr: "\u{1D51A}", wfr: "\u{1D534}", Wopf: "\u{1D54E}", wopf: "\u{1D568}", wp: "\u2118", wr: "\u2240", wreath: "\u2240", Wscr: "\u{1D4B2}", wscr: "\u{1D4CC}", xcap: "\u22C2", xcirc: "\u25EF", xcup: "\u22C3", xdtri: "\u25BD", Xfr: "\u{1D51B}", xfr: "\u{1D535}", xharr: "\u27F7", xhArr: "\u27FA", Xi: "\u039E", xi: "\u03BE", xlarr: "\u27F5", xlArr: "\u27F8", xmap: "\u27FC", xnis: "\u22FB", xodot: "\u2A00", Xopf: "\u{1D54F}", xopf: "\u{1D569}", xoplus: "\u2A01", xotime: "\u2A02", xrarr: "\u27F6", xrArr: "\u27F9", Xscr: "\u{1D4B3}", xscr: "\u{1D4CD}", xsqcup: "\u2A06", xuplus: "\u2A04", xutri: "\u25B3", xvee: "\u22C1", xwedge: "\u22C0", Yacute: "\xDD", yacute: "\xFD", YAcy: "\u042F", yacy: "\u044F", Ycirc: "\u0176", ycirc: "\u0177", Ycy: "\u042B", ycy: "\u044B", yen: "\xA5", Yfr: "\u{1D51C}", yfr: "\u{1D536}", YIcy: "\u0407", yicy: "\u0457", Yopf: "\u{1D550}", yopf: "\u{1D56A}", Yscr: "\u{1D4B4}", yscr: "\u{1D4CE}", YUcy: "\u042E", yucy: "\u044E", yuml: "\xFF", Yuml: "\u0178", Zacute: "\u0179", zacute: "\u017A", Zcaron: "\u017D", zcaron: "\u017E", Zcy: "\u0417", zcy: "\u0437", Zdot: "\u017B", zdot: "\u017C", zeetrf: "\u2128", ZeroWidthSpace: "\u200B", Zeta: "\u0396", zeta: "\u03B6", zfr: "\u{1D537}", Zfr: "\u2128", ZHcy: "\u0416", zhcy: "\u0436", zigrarr: "\u21DD", zopf: "\u{1D56B}", Zopf: "\u2124", Zscr: "\u{1D4B5}", zscr: "\u{1D4CF}", zwj: "\u200D", zwnj: "\u200C" };
    }
  });

  // node_modules/.pnpm/entities@2.2.0/node_modules/entities/lib/maps/legacy.json
  var require_legacy = __commonJS({
    "node_modules/.pnpm/entities@2.2.0/node_modules/entities/lib/maps/legacy.json"(exports, module) {
      module.exports = { Aacute: "\xC1", aacute: "\xE1", Acirc: "\xC2", acirc: "\xE2", acute: "\xB4", AElig: "\xC6", aelig: "\xE6", Agrave: "\xC0", agrave: "\xE0", amp: "&", AMP: "&", Aring: "\xC5", aring: "\xE5", Atilde: "\xC3", atilde: "\xE3", Auml: "\xC4", auml: "\xE4", brvbar: "\xA6", Ccedil: "\xC7", ccedil: "\xE7", cedil: "\xB8", cent: "\xA2", copy: "\xA9", COPY: "\xA9", curren: "\xA4", deg: "\xB0", divide: "\xF7", Eacute: "\xC9", eacute: "\xE9", Ecirc: "\xCA", ecirc: "\xEA", Egrave: "\xC8", egrave: "\xE8", ETH: "\xD0", eth: "\xF0", Euml: "\xCB", euml: "\xEB", frac12: "\xBD", frac14: "\xBC", frac34: "\xBE", gt: ">", GT: ">", Iacute: "\xCD", iacute: "\xED", Icirc: "\xCE", icirc: "\xEE", iexcl: "\xA1", Igrave: "\xCC", igrave: "\xEC", iquest: "\xBF", Iuml: "\xCF", iuml: "\xEF", laquo: "\xAB", lt: "<", LT: "<", macr: "\xAF", micro: "\xB5", middot: "\xB7", nbsp: "\xA0", not: "\xAC", Ntilde: "\xD1", ntilde: "\xF1", Oacute: "\xD3", oacute: "\xF3", Ocirc: "\xD4", ocirc: "\xF4", Ograve: "\xD2", ograve: "\xF2", ordf: "\xAA", ordm: "\xBA", Oslash: "\xD8", oslash: "\xF8", Otilde: "\xD5", otilde: "\xF5", Ouml: "\xD6", ouml: "\xF6", para: "\xB6", plusmn: "\xB1", pound: "\xA3", quot: '"', QUOT: '"', raquo: "\xBB", reg: "\xAE", REG: "\xAE", sect: "\xA7", shy: "\xAD", sup1: "\xB9", sup2: "\xB2", sup3: "\xB3", szlig: "\xDF", THORN: "\xDE", thorn: "\xFE", times: "\xD7", Uacute: "\xDA", uacute: "\xFA", Ucirc: "\xDB", ucirc: "\xFB", Ugrave: "\xD9", ugrave: "\xF9", uml: "\xA8", Uuml: "\xDC", uuml: "\xFC", Yacute: "\xDD", yacute: "\xFD", yen: "\xA5", yuml: "\xFF" };
    }
  });

  // node_modules/.pnpm/entities@2.2.0/node_modules/entities/lib/maps/xml.json
  var require_xml = __commonJS({
    "node_modules/.pnpm/entities@2.2.0/node_modules/entities/lib/maps/xml.json"(exports, module) {
      module.exports = { amp: "&", apos: "'", gt: ">", lt: "<", quot: '"' };
    }
  });

  // node_modules/.pnpm/entities@2.2.0/node_modules/entities/lib/maps/decode.json
  var require_decode2 = __commonJS({
    "node_modules/.pnpm/entities@2.2.0/node_modules/entities/lib/maps/decode.json"(exports, module) {
      module.exports = { "0": 65533, "128": 8364, "130": 8218, "131": 402, "132": 8222, "133": 8230, "134": 8224, "135": 8225, "136": 710, "137": 8240, "138": 352, "139": 8249, "140": 338, "142": 381, "145": 8216, "146": 8217, "147": 8220, "148": 8221, "149": 8226, "150": 8211, "151": 8212, "152": 732, "153": 8482, "154": 353, "155": 8250, "156": 339, "158": 382, "159": 376 };
    }
  });

  // node_modules/.pnpm/entities@2.2.0/node_modules/entities/lib/decode_codepoint.js
  var require_decode_codepoint2 = __commonJS({
    "node_modules/.pnpm/entities@2.2.0/node_modules/entities/lib/decode_codepoint.js"(exports) {
      "use strict";
      init_env();
      var __importDefault2 = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      var decode_json_1 = __importDefault2(require_decode2());
      var fromCodePoint = String.fromCodePoint || function(codePoint) {
        var output = "";
        if (codePoint > 65535) {
          codePoint -= 65536;
          output += String.fromCharCode(codePoint >>> 10 & 1023 | 55296);
          codePoint = 56320 | codePoint & 1023;
        }
        output += String.fromCharCode(codePoint);
        return output;
      };
      function decodeCodePoint(codePoint) {
        if (codePoint >= 55296 && codePoint <= 57343 || codePoint > 1114111) {
          return "\uFFFD";
        }
        if (codePoint in decode_json_1.default) {
          codePoint = decode_json_1.default[codePoint];
        }
        return fromCodePoint(codePoint);
      }
      exports.default = decodeCodePoint;
    }
  });

  // node_modules/.pnpm/entities@2.2.0/node_modules/entities/lib/decode.js
  var require_decode3 = __commonJS({
    "node_modules/.pnpm/entities@2.2.0/node_modules/entities/lib/decode.js"(exports) {
      "use strict";
      init_env();
      var __importDefault2 = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.decodeHTML = exports.decodeHTMLStrict = exports.decodeXML = void 0;
      var entities_json_1 = __importDefault2(require_entities());
      var legacy_json_1 = __importDefault2(require_legacy());
      var xml_json_1 = __importDefault2(require_xml());
      var decode_codepoint_1 = __importDefault2(require_decode_codepoint2());
      var strictEntityRe = /&(?:[a-zA-Z0-9]+|#[xX][\da-fA-F]+|#\d+);/g;
      exports.decodeXML = getStrictDecoder(xml_json_1.default);
      exports.decodeHTMLStrict = getStrictDecoder(entities_json_1.default);
      function getStrictDecoder(map) {
        var replace2 = getReplacer(map);
        return function(str) {
          return String(str).replace(strictEntityRe, replace2);
        };
      }
      var sorter = function(a, b) {
        return a < b ? 1 : -1;
      };
      exports.decodeHTML = function() {
        var legacy = Object.keys(legacy_json_1.default).sort(sorter);
        var keys2 = Object.keys(entities_json_1.default).sort(sorter);
        for (var i = 0, j = 0; i < keys2.length; i++) {
          if (legacy[j] === keys2[i]) {
            keys2[i] += ";?";
            j++;
          } else {
            keys2[i] += ";";
          }
        }
        var re = new RegExp("&(?:" + keys2.join("|") + "|#[xX][\\da-fA-F]+;?|#\\d+;?)", "g");
        var replace2 = getReplacer(entities_json_1.default);
        function replacer(str) {
          if (str.substr(-1) !== ";")
            str += ";";
          return replace2(str);
        }
        return function(str) {
          return String(str).replace(re, replacer);
        };
      }();
      function getReplacer(map) {
        return function replace2(str) {
          if (str.charAt(1) === "#") {
            var secondChar = str.charAt(2);
            if (secondChar === "X" || secondChar === "x") {
              return decode_codepoint_1.default(parseInt(str.substr(3), 16));
            }
            return decode_codepoint_1.default(parseInt(str.substr(2), 10));
          }
          return map[str.slice(1, -1)] || str;
        };
      }
    }
  });

  // node_modules/.pnpm/entities@2.2.0/node_modules/entities/lib/encode.js
  var require_encode = __commonJS({
    "node_modules/.pnpm/entities@2.2.0/node_modules/entities/lib/encode.js"(exports) {
      "use strict";
      init_env();
      var __importDefault2 = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.escapeUTF8 = exports.escape = exports.encodeNonAsciiHTML = exports.encodeHTML = exports.encodeXML = void 0;
      var xml_json_1 = __importDefault2(require_xml());
      var inverseXML = getInverseObj(xml_json_1.default);
      var xmlReplacer = getInverseReplacer(inverseXML);
      exports.encodeXML = getASCIIEncoder(inverseXML);
      var entities_json_1 = __importDefault2(require_entities());
      var inverseHTML = getInverseObj(entities_json_1.default);
      var htmlReplacer = getInverseReplacer(inverseHTML);
      exports.encodeHTML = getInverse(inverseHTML, htmlReplacer);
      exports.encodeNonAsciiHTML = getASCIIEncoder(inverseHTML);
      function getInverseObj(obj) {
        return Object.keys(obj).sort().reduce(function(inverse, name) {
          inverse[obj[name]] = "&" + name + ";";
          return inverse;
        }, {});
      }
      function getInverseReplacer(inverse) {
        var single = [];
        var multiple = [];
        for (var _i = 0, _a8 = Object.keys(inverse); _i < _a8.length; _i++) {
          var k = _a8[_i];
          if (k.length === 1) {
            single.push("\\" + k);
          } else {
            multiple.push(k);
          }
        }
        single.sort();
        for (var start = 0; start < single.length - 1; start++) {
          var end = start;
          while (end < single.length - 1 && single[end].charCodeAt(1) + 1 === single[end + 1].charCodeAt(1)) {
            end += 1;
          }
          var count = 1 + end - start;
          if (count < 3)
            continue;
          single.splice(start, count, single[start] + "-" + single[end]);
        }
        multiple.unshift("[" + single.join("") + "]");
        return new RegExp(multiple.join("|"), "g");
      }
      var reNonASCII = /(?:[\x80-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])/g;
      var getCodePoint = String.prototype.codePointAt != null ? function(str) {
        return str.codePointAt(0);
      } : function(c2) {
        return (c2.charCodeAt(0) - 55296) * 1024 + c2.charCodeAt(1) - 56320 + 65536;
      };
      function singleCharReplacer(c2) {
        return "&#x" + (c2.length > 1 ? getCodePoint(c2) : c2.charCodeAt(0)).toString(16).toUpperCase() + ";";
      }
      function getInverse(inverse, re) {
        return function(data) {
          return data.replace(re, function(name) {
            return inverse[name];
          }).replace(reNonASCII, singleCharReplacer);
        };
      }
      var reEscapeChars = new RegExp(xmlReplacer.source + "|" + reNonASCII.source, "g");
      function escape2(data) {
        return data.replace(reEscapeChars, singleCharReplacer);
      }
      exports.escape = escape2;
      function escapeUTF8(data) {
        return data.replace(xmlReplacer, singleCharReplacer);
      }
      exports.escapeUTF8 = escapeUTF8;
      function getASCIIEncoder(obj) {
        return function(data) {
          return data.replace(reEscapeChars, function(c2) {
            return obj[c2] || singleCharReplacer(c2);
          });
        };
      }
    }
  });

  // node_modules/.pnpm/entities@2.2.0/node_modules/entities/lib/index.js
  var require_lib4 = __commonJS({
    "node_modules/.pnpm/entities@2.2.0/node_modules/entities/lib/index.js"(exports) {
      "use strict";
      init_env();
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.decodeXMLStrict = exports.decodeHTML5Strict = exports.decodeHTML4Strict = exports.decodeHTML5 = exports.decodeHTML4 = exports.decodeHTMLStrict = exports.decodeHTML = exports.decodeXML = exports.encodeHTML5 = exports.encodeHTML4 = exports.escapeUTF8 = exports.escape = exports.encodeNonAsciiHTML = exports.encodeHTML = exports.encodeXML = exports.encode = exports.decodeStrict = exports.decode = void 0;
      var decode_1 = require_decode3();
      var encode_1 = require_encode();
      function decode3(data, level) {
        return (!level || level <= 0 ? decode_1.decodeXML : decode_1.decodeHTML)(data);
      }
      exports.decode = decode3;
      function decodeStrict(data, level) {
        return (!level || level <= 0 ? decode_1.decodeXML : decode_1.decodeHTMLStrict)(data);
      }
      exports.decodeStrict = decodeStrict;
      function encode2(data, level) {
        return (!level || level <= 0 ? encode_1.encodeXML : encode_1.encodeHTML)(data);
      }
      exports.encode = encode2;
      var encode_2 = require_encode();
      Object.defineProperty(exports, "encodeXML", { enumerable: true, get: function() {
        return encode_2.encodeXML;
      } });
      Object.defineProperty(exports, "encodeHTML", { enumerable: true, get: function() {
        return encode_2.encodeHTML;
      } });
      Object.defineProperty(exports, "encodeNonAsciiHTML", { enumerable: true, get: function() {
        return encode_2.encodeNonAsciiHTML;
      } });
      Object.defineProperty(exports, "escape", { enumerable: true, get: function() {
        return encode_2.escape;
      } });
      Object.defineProperty(exports, "escapeUTF8", { enumerable: true, get: function() {
        return encode_2.escapeUTF8;
      } });
      Object.defineProperty(exports, "encodeHTML4", { enumerable: true, get: function() {
        return encode_2.encodeHTML;
      } });
      Object.defineProperty(exports, "encodeHTML5", { enumerable: true, get: function() {
        return encode_2.encodeHTML;
      } });
      var decode_2 = require_decode3();
      Object.defineProperty(exports, "decodeXML", { enumerable: true, get: function() {
        return decode_2.decodeXML;
      } });
      Object.defineProperty(exports, "decodeHTML", { enumerable: true, get: function() {
        return decode_2.decodeHTML;
      } });
      Object.defineProperty(exports, "decodeHTMLStrict", { enumerable: true, get: function() {
        return decode_2.decodeHTMLStrict;
      } });
      Object.defineProperty(exports, "decodeHTML4", { enumerable: true, get: function() {
        return decode_2.decodeHTML;
      } });
      Object.defineProperty(exports, "decodeHTML5", { enumerable: true, get: function() {
        return decode_2.decodeHTML;
      } });
      Object.defineProperty(exports, "decodeHTML4Strict", { enumerable: true, get: function() {
        return decode_2.decodeHTMLStrict;
      } });
      Object.defineProperty(exports, "decodeHTML5Strict", { enumerable: true, get: function() {
        return decode_2.decodeHTMLStrict;
      } });
      Object.defineProperty(exports, "decodeXMLStrict", { enumerable: true, get: function() {
        return decode_2.decodeXML;
      } });
    }
  });

  // node_modules/.pnpm/dom-serializer@1.4.1/node_modules/dom-serializer/lib/foreignNames.js
  var require_foreignNames = __commonJS({
    "node_modules/.pnpm/dom-serializer@1.4.1/node_modules/dom-serializer/lib/foreignNames.js"(exports) {
      "use strict";
      init_env();
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.attributeNames = exports.elementNames = void 0;
      exports.elementNames = /* @__PURE__ */ new Map([
        ["altglyph", "altGlyph"],
        ["altglyphdef", "altGlyphDef"],
        ["altglyphitem", "altGlyphItem"],
        ["animatecolor", "animateColor"],
        ["animatemotion", "animateMotion"],
        ["animatetransform", "animateTransform"],
        ["clippath", "clipPath"],
        ["feblend", "feBlend"],
        ["fecolormatrix", "feColorMatrix"],
        ["fecomponenttransfer", "feComponentTransfer"],
        ["fecomposite", "feComposite"],
        ["feconvolvematrix", "feConvolveMatrix"],
        ["fediffuselighting", "feDiffuseLighting"],
        ["fedisplacementmap", "feDisplacementMap"],
        ["fedistantlight", "feDistantLight"],
        ["fedropshadow", "feDropShadow"],
        ["feflood", "feFlood"],
        ["fefunca", "feFuncA"],
        ["fefuncb", "feFuncB"],
        ["fefuncg", "feFuncG"],
        ["fefuncr", "feFuncR"],
        ["fegaussianblur", "feGaussianBlur"],
        ["feimage", "feImage"],
        ["femerge", "feMerge"],
        ["femergenode", "feMergeNode"],
        ["femorphology", "feMorphology"],
        ["feoffset", "feOffset"],
        ["fepointlight", "fePointLight"],
        ["fespecularlighting", "feSpecularLighting"],
        ["fespotlight", "feSpotLight"],
        ["fetile", "feTile"],
        ["feturbulence", "feTurbulence"],
        ["foreignobject", "foreignObject"],
        ["glyphref", "glyphRef"],
        ["lineargradient", "linearGradient"],
        ["radialgradient", "radialGradient"],
        ["textpath", "textPath"]
      ]);
      exports.attributeNames = /* @__PURE__ */ new Map([
        ["definitionurl", "definitionURL"],
        ["attributename", "attributeName"],
        ["attributetype", "attributeType"],
        ["basefrequency", "baseFrequency"],
        ["baseprofile", "baseProfile"],
        ["calcmode", "calcMode"],
        ["clippathunits", "clipPathUnits"],
        ["diffuseconstant", "diffuseConstant"],
        ["edgemode", "edgeMode"],
        ["filterunits", "filterUnits"],
        ["glyphref", "glyphRef"],
        ["gradienttransform", "gradientTransform"],
        ["gradientunits", "gradientUnits"],
        ["kernelmatrix", "kernelMatrix"],
        ["kernelunitlength", "kernelUnitLength"],
        ["keypoints", "keyPoints"],
        ["keysplines", "keySplines"],
        ["keytimes", "keyTimes"],
        ["lengthadjust", "lengthAdjust"],
        ["limitingconeangle", "limitingConeAngle"],
        ["markerheight", "markerHeight"],
        ["markerunits", "markerUnits"],
        ["markerwidth", "markerWidth"],
        ["maskcontentunits", "maskContentUnits"],
        ["maskunits", "maskUnits"],
        ["numoctaves", "numOctaves"],
        ["pathlength", "pathLength"],
        ["patterncontentunits", "patternContentUnits"],
        ["patterntransform", "patternTransform"],
        ["patternunits", "patternUnits"],
        ["pointsatx", "pointsAtX"],
        ["pointsaty", "pointsAtY"],
        ["pointsatz", "pointsAtZ"],
        ["preservealpha", "preserveAlpha"],
        ["preserveaspectratio", "preserveAspectRatio"],
        ["primitiveunits", "primitiveUnits"],
        ["refx", "refX"],
        ["refy", "refY"],
        ["repeatcount", "repeatCount"],
        ["repeatdur", "repeatDur"],
        ["requiredextensions", "requiredExtensions"],
        ["requiredfeatures", "requiredFeatures"],
        ["specularconstant", "specularConstant"],
        ["specularexponent", "specularExponent"],
        ["spreadmethod", "spreadMethod"],
        ["startoffset", "startOffset"],
        ["stddeviation", "stdDeviation"],
        ["stitchtiles", "stitchTiles"],
        ["surfacescale", "surfaceScale"],
        ["systemlanguage", "systemLanguage"],
        ["tablevalues", "tableValues"],
        ["targetx", "targetX"],
        ["targety", "targetY"],
        ["textlength", "textLength"],
        ["viewbox", "viewBox"],
        ["viewtarget", "viewTarget"],
        ["xchannelselector", "xChannelSelector"],
        ["ychannelselector", "yChannelSelector"],
        ["zoomandpan", "zoomAndPan"]
      ]);
    }
  });

  // node_modules/.pnpm/dom-serializer@1.4.1/node_modules/dom-serializer/lib/index.js
  var require_lib5 = __commonJS({
    "node_modules/.pnpm/dom-serializer@1.4.1/node_modules/dom-serializer/lib/index.js"(exports) {
      "use strict";
      init_env();
      var __assign2 = exports && exports.__assign || function() {
        __assign2 = Object.assign || function(t) {
          for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s)
              if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
          }
          return t;
        };
        return __assign2.apply(this, arguments);
      };
      var __createBinding2 = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function() {
          return m[k];
        } });
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v2) {
        Object.defineProperty(o, "default", { enumerable: true, value: v2 });
      } : function(o, v2) {
        o["default"] = v2;
      });
      var __importStar2 = exports && exports.__importStar || function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding2(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      var ElementType = __importStar2(require_lib2());
      var entities_1 = require_lib4();
      var foreignNames_1 = require_foreignNames();
      var unencodedElements = /* @__PURE__ */ new Set([
        "style",
        "script",
        "xmp",
        "iframe",
        "noembed",
        "noframes",
        "plaintext",
        "noscript"
      ]);
      function formatAttributes(attributes, opts) {
        if (!attributes)
          return;
        return Object.keys(attributes).map(function(key2) {
          var _a8, _b3;
          var value = (_a8 = attributes[key2]) !== null && _a8 !== void 0 ? _a8 : "";
          if (opts.xmlMode === "foreign") {
            key2 = (_b3 = foreignNames_1.attributeNames.get(key2)) !== null && _b3 !== void 0 ? _b3 : key2;
          }
          if (!opts.emptyAttrs && !opts.xmlMode && value === "") {
            return key2;
          }
          return key2 + '="' + (opts.decodeEntities !== false ? entities_1.encodeXML(value) : value.replace(/"/g, "&quot;")) + '"';
        }).join(" ");
      }
      var singleTag = /* @__PURE__ */ new Set([
        "area",
        "base",
        "basefont",
        "br",
        "col",
        "command",
        "embed",
        "frame",
        "hr",
        "img",
        "input",
        "isindex",
        "keygen",
        "link",
        "meta",
        "param",
        "source",
        "track",
        "wbr"
      ]);
      function render(node, options) {
        if (options === void 0) {
          options = {};
        }
        var nodes = "length" in node ? node : [node];
        var output = "";
        for (var i = 0; i < nodes.length; i++) {
          output += renderNode(nodes[i], options);
        }
        return output;
      }
      exports.default = render;
      function renderNode(node, options) {
        switch (node.type) {
          case ElementType.Root:
            return render(node.children, options);
          case ElementType.Directive:
          case ElementType.Doctype:
            return renderDirective(node);
          case ElementType.Comment:
            return renderComment(node);
          case ElementType.CDATA:
            return renderCdata(node);
          case ElementType.Script:
          case ElementType.Style:
          case ElementType.Tag:
            return renderTag(node, options);
          case ElementType.Text:
            return renderText(node, options);
        }
      }
      var foreignModeIntegrationPoints = /* @__PURE__ */ new Set([
        "mi",
        "mo",
        "mn",
        "ms",
        "mtext",
        "annotation-xml",
        "foreignObject",
        "desc",
        "title"
      ]);
      var foreignElements = /* @__PURE__ */ new Set(["svg", "math"]);
      function renderTag(elem, opts) {
        var _a8;
        if (opts.xmlMode === "foreign") {
          elem.name = (_a8 = foreignNames_1.elementNames.get(elem.name)) !== null && _a8 !== void 0 ? _a8 : elem.name;
          if (elem.parent && foreignModeIntegrationPoints.has(elem.parent.name)) {
            opts = __assign2(__assign2({}, opts), { xmlMode: false });
          }
        }
        if (!opts.xmlMode && foreignElements.has(elem.name)) {
          opts = __assign2(__assign2({}, opts), { xmlMode: "foreign" });
        }
        var tag = "<" + elem.name;
        var attribs = formatAttributes(elem.attribs, opts);
        if (attribs) {
          tag += " " + attribs;
        }
        if (elem.children.length === 0 && (opts.xmlMode ? opts.selfClosingTags !== false : opts.selfClosingTags && singleTag.has(elem.name))) {
          if (!opts.xmlMode)
            tag += " ";
          tag += "/>";
        } else {
          tag += ">";
          if (elem.children.length > 0) {
            tag += render(elem.children, opts);
          }
          if (opts.xmlMode || !singleTag.has(elem.name)) {
            tag += "</" + elem.name + ">";
          }
        }
        return tag;
      }
      function renderDirective(elem) {
        return "<" + elem.data + ">";
      }
      function renderText(elem, opts) {
        var data = elem.data || "";
        if (opts.decodeEntities !== false && !(!opts.xmlMode && elem.parent && unencodedElements.has(elem.parent.name))) {
          data = entities_1.encodeXML(data);
        }
        return data;
      }
      function renderCdata(elem) {
        return "<![CDATA[" + elem.children[0].data + "]]>";
      }
      function renderComment(elem) {
        return "<!--" + elem.data + "-->";
      }
    }
  });

  // node_modules/.pnpm/domutils@2.8.0/node_modules/domutils/lib/stringify.js
  var require_stringify = __commonJS({
    "node_modules/.pnpm/domutils@2.8.0/node_modules/domutils/lib/stringify.js"(exports) {
      "use strict";
      init_env();
      var __importDefault2 = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.innerText = exports.textContent = exports.getText = exports.getInnerHTML = exports.getOuterHTML = void 0;
      var domhandler_1 = require_lib3();
      var dom_serializer_1 = __importDefault2(require_lib5());
      var domelementtype_1 = require_lib2();
      function getOuterHTML(node, options) {
        return (0, dom_serializer_1.default)(node, options);
      }
      exports.getOuterHTML = getOuterHTML;
      function getInnerHTML(node, options) {
        return (0, domhandler_1.hasChildren)(node) ? node.children.map(function(node2) {
          return getOuterHTML(node2, options);
        }).join("") : "";
      }
      exports.getInnerHTML = getInnerHTML;
      function getText2(node) {
        if (Array.isArray(node))
          return node.map(getText2).join("");
        if ((0, domhandler_1.isTag)(node))
          return node.name === "br" ? "\n" : getText2(node.children);
        if ((0, domhandler_1.isCDATA)(node))
          return getText2(node.children);
        if ((0, domhandler_1.isText)(node))
          return node.data;
        return "";
      }
      exports.getText = getText2;
      function textContent(node) {
        if (Array.isArray(node))
          return node.map(textContent).join("");
        if ((0, domhandler_1.hasChildren)(node) && !(0, domhandler_1.isComment)(node)) {
          return textContent(node.children);
        }
        if ((0, domhandler_1.isText)(node))
          return node.data;
        return "";
      }
      exports.textContent = textContent;
      function innerText(node) {
        if (Array.isArray(node))
          return node.map(innerText).join("");
        if ((0, domhandler_1.hasChildren)(node) && (node.type === domelementtype_1.ElementType.Tag || (0, domhandler_1.isCDATA)(node))) {
          return innerText(node.children);
        }
        if ((0, domhandler_1.isText)(node))
          return node.data;
        return "";
      }
      exports.innerText = innerText;
    }
  });

  // node_modules/.pnpm/domutils@2.8.0/node_modules/domutils/lib/traversal.js
  var require_traversal = __commonJS({
    "node_modules/.pnpm/domutils@2.8.0/node_modules/domutils/lib/traversal.js"(exports) {
      "use strict";
      init_env();
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.prevElementSibling = exports.nextElementSibling = exports.getName = exports.hasAttrib = exports.getAttributeValue = exports.getSiblings = exports.getParent = exports.getChildren = void 0;
      var domhandler_1 = require_lib3();
      var emptyArray = [];
      function getChildren2(elem) {
        var _a8;
        return (_a8 = elem.children) !== null && _a8 !== void 0 ? _a8 : emptyArray;
      }
      exports.getChildren = getChildren2;
      function getParent2(elem) {
        return elem.parent || null;
      }
      exports.getParent = getParent2;
      function getSiblings2(elem) {
        var _a8, _b3;
        var parent = getParent2(elem);
        if (parent != null)
          return getChildren2(parent);
        var siblings = [elem];
        var prev = elem.prev, next = elem.next;
        while (prev != null) {
          siblings.unshift(prev);
          _a8 = prev, prev = _a8.prev;
        }
        while (next != null) {
          siblings.push(next);
          _b3 = next, next = _b3.next;
        }
        return siblings;
      }
      exports.getSiblings = getSiblings2;
      function getAttributeValue2(elem, name) {
        var _a8;
        return (_a8 = elem.attribs) === null || _a8 === void 0 ? void 0 : _a8[name];
      }
      exports.getAttributeValue = getAttributeValue2;
      function hasAttrib2(elem, name) {
        return elem.attribs != null && Object.prototype.hasOwnProperty.call(elem.attribs, name) && elem.attribs[name] != null;
      }
      exports.hasAttrib = hasAttrib2;
      function getName2(elem) {
        return elem.name;
      }
      exports.getName = getName2;
      function nextElementSibling2(elem) {
        var _a8;
        var next = elem.next;
        while (next !== null && !(0, domhandler_1.isTag)(next))
          _a8 = next, next = _a8.next;
        return next;
      }
      exports.nextElementSibling = nextElementSibling2;
      function prevElementSibling(elem) {
        var _a8;
        var prev = elem.prev;
        while (prev !== null && !(0, domhandler_1.isTag)(prev))
          _a8 = prev, prev = _a8.prev;
        return prev;
      }
      exports.prevElementSibling = prevElementSibling;
    }
  });

  // node_modules/.pnpm/domutils@2.8.0/node_modules/domutils/lib/manipulation.js
  var require_manipulation = __commonJS({
    "node_modules/.pnpm/domutils@2.8.0/node_modules/domutils/lib/manipulation.js"(exports) {
      "use strict";
      init_env();
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.prepend = exports.prependChild = exports.append = exports.appendChild = exports.replaceElement = exports.removeElement = void 0;
      function removeElement(elem) {
        if (elem.prev)
          elem.prev.next = elem.next;
        if (elem.next)
          elem.next.prev = elem.prev;
        if (elem.parent) {
          var childs = elem.parent.children;
          childs.splice(childs.lastIndexOf(elem), 1);
        }
      }
      exports.removeElement = removeElement;
      function replaceElement(elem, replacement) {
        var prev = replacement.prev = elem.prev;
        if (prev) {
          prev.next = replacement;
        }
        var next = replacement.next = elem.next;
        if (next) {
          next.prev = replacement;
        }
        var parent = replacement.parent = elem.parent;
        if (parent) {
          var childs = parent.children;
          childs[childs.lastIndexOf(elem)] = replacement;
        }
      }
      exports.replaceElement = replaceElement;
      function appendChild(elem, child) {
        removeElement(child);
        child.next = null;
        child.parent = elem;
        if (elem.children.push(child) > 1) {
          var sibling = elem.children[elem.children.length - 2];
          sibling.next = child;
          child.prev = sibling;
        } else {
          child.prev = null;
        }
      }
      exports.appendChild = appendChild;
      function append2(elem, next) {
        removeElement(next);
        var parent = elem.parent;
        var currNext = elem.next;
        next.next = currNext;
        next.prev = elem;
        elem.next = next;
        next.parent = parent;
        if (currNext) {
          currNext.prev = next;
          if (parent) {
            var childs = parent.children;
            childs.splice(childs.lastIndexOf(currNext), 0, next);
          }
        } else if (parent) {
          parent.children.push(next);
        }
      }
      exports.append = append2;
      function prependChild(elem, child) {
        removeElement(child);
        child.parent = elem;
        child.prev = null;
        if (elem.children.unshift(child) !== 1) {
          var sibling = elem.children[1];
          sibling.prev = child;
          child.next = sibling;
        } else {
          child.next = null;
        }
      }
      exports.prependChild = prependChild;
      function prepend(elem, prev) {
        removeElement(prev);
        var parent = elem.parent;
        if (parent) {
          var childs = parent.children;
          childs.splice(childs.indexOf(elem), 0, prev);
        }
        if (elem.prev) {
          elem.prev.next = prev;
        }
        prev.parent = parent;
        prev.prev = elem.prev;
        prev.next = elem;
        elem.prev = prev;
      }
      exports.prepend = prepend;
    }
  });

  // node_modules/.pnpm/domutils@2.8.0/node_modules/domutils/lib/querying.js
  var require_querying = __commonJS({
    "node_modules/.pnpm/domutils@2.8.0/node_modules/domutils/lib/querying.js"(exports) {
      "use strict";
      init_env();
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.findAll = exports.existsOne = exports.findOne = exports.findOneChild = exports.find = exports.filter = void 0;
      var domhandler_1 = require_lib3();
      function filter(test, node, recurse, limit) {
        if (recurse === void 0) {
          recurse = true;
        }
        if (limit === void 0) {
          limit = Infinity;
        }
        if (!Array.isArray(node))
          node = [node];
        return find(test, node, recurse, limit);
      }
      exports.filter = filter;
      function find(test, nodes, recurse, limit) {
        var result = [];
        for (var _i = 0, nodes_1 = nodes; _i < nodes_1.length; _i++) {
          var elem = nodes_1[_i];
          if (test(elem)) {
            result.push(elem);
            if (--limit <= 0)
              break;
          }
          if (recurse && (0, domhandler_1.hasChildren)(elem) && elem.children.length > 0) {
            var children = find(test, elem.children, recurse, limit);
            result.push.apply(result, children);
            limit -= children.length;
            if (limit <= 0)
              break;
          }
        }
        return result;
      }
      exports.find = find;
      function findOneChild(test, nodes) {
        return nodes.find(test);
      }
      exports.findOneChild = findOneChild;
      function findOne2(test, nodes, recurse) {
        if (recurse === void 0) {
          recurse = true;
        }
        var elem = null;
        for (var i = 0; i < nodes.length && !elem; i++) {
          var checked = nodes[i];
          if (!(0, domhandler_1.isTag)(checked)) {
            continue;
          } else if (test(checked)) {
            elem = checked;
          } else if (recurse && checked.children.length > 0) {
            elem = findOne2(test, checked.children);
          }
        }
        return elem;
      }
      exports.findOne = findOne2;
      function existsOne2(test, nodes) {
        return nodes.some(function(checked) {
          return (0, domhandler_1.isTag)(checked) && (test(checked) || checked.children.length > 0 && existsOne2(test, checked.children));
        });
      }
      exports.existsOne = existsOne2;
      function findAll2(test, nodes) {
        var _a8;
        var result = [];
        var stack = nodes.filter(domhandler_1.isTag);
        var elem;
        while (elem = stack.shift()) {
          var children = (_a8 = elem.children) === null || _a8 === void 0 ? void 0 : _a8.filter(domhandler_1.isTag);
          if (children && children.length > 0) {
            stack.unshift.apply(stack, children);
          }
          if (test(elem))
            result.push(elem);
        }
        return result;
      }
      exports.findAll = findAll2;
    }
  });

  // node_modules/.pnpm/domutils@2.8.0/node_modules/domutils/lib/legacy.js
  var require_legacy2 = __commonJS({
    "node_modules/.pnpm/domutils@2.8.0/node_modules/domutils/lib/legacy.js"(exports) {
      "use strict";
      init_env();
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.getElementsByTagType = exports.getElementsByTagName = exports.getElementById = exports.getElements = exports.testElement = void 0;
      var domhandler_1 = require_lib3();
      var querying_1 = require_querying();
      var Checks = {
        tag_name: function(name) {
          if (typeof name === "function") {
            return function(elem) {
              return (0, domhandler_1.isTag)(elem) && name(elem.name);
            };
          } else if (name === "*") {
            return domhandler_1.isTag;
          }
          return function(elem) {
            return (0, domhandler_1.isTag)(elem) && elem.name === name;
          };
        },
        tag_type: function(type) {
          if (typeof type === "function") {
            return function(elem) {
              return type(elem.type);
            };
          }
          return function(elem) {
            return elem.type === type;
          };
        },
        tag_contains: function(data) {
          if (typeof data === "function") {
            return function(elem) {
              return (0, domhandler_1.isText)(elem) && data(elem.data);
            };
          }
          return function(elem) {
            return (0, domhandler_1.isText)(elem) && elem.data === data;
          };
        }
      };
      function getAttribCheck(attrib, value) {
        if (typeof value === "function") {
          return function(elem) {
            return (0, domhandler_1.isTag)(elem) && value(elem.attribs[attrib]);
          };
        }
        return function(elem) {
          return (0, domhandler_1.isTag)(elem) && elem.attribs[attrib] === value;
        };
      }
      function combineFuncs(a, b) {
        return function(elem) {
          return a(elem) || b(elem);
        };
      }
      function compileTest(options) {
        var funcs = Object.keys(options).map(function(key2) {
          var value = options[key2];
          return Object.prototype.hasOwnProperty.call(Checks, key2) ? Checks[key2](value) : getAttribCheck(key2, value);
        });
        return funcs.length === 0 ? null : funcs.reduce(combineFuncs);
      }
      function testElement(options, node) {
        var test = compileTest(options);
        return test ? test(node) : true;
      }
      exports.testElement = testElement;
      function getElements(options, nodes, recurse, limit) {
        if (limit === void 0) {
          limit = Infinity;
        }
        var test = compileTest(options);
        return test ? (0, querying_1.filter)(test, nodes, recurse, limit) : [];
      }
      exports.getElements = getElements;
      function getElementById(id, nodes, recurse) {
        if (recurse === void 0) {
          recurse = true;
        }
        if (!Array.isArray(nodes))
          nodes = [nodes];
        return (0, querying_1.findOne)(getAttribCheck("id", id), nodes, recurse);
      }
      exports.getElementById = getElementById;
      function getElementsByTagName(tagName15, nodes, recurse, limit) {
        if (recurse === void 0) {
          recurse = true;
        }
        if (limit === void 0) {
          limit = Infinity;
        }
        return (0, querying_1.filter)(Checks.tag_name(tagName15), nodes, recurse, limit);
      }
      exports.getElementsByTagName = getElementsByTagName;
      function getElementsByTagType(type, nodes, recurse, limit) {
        if (recurse === void 0) {
          recurse = true;
        }
        if (limit === void 0) {
          limit = Infinity;
        }
        return (0, querying_1.filter)(Checks.tag_type(type), nodes, recurse, limit);
      }
      exports.getElementsByTagType = getElementsByTagType;
    }
  });

  // node_modules/.pnpm/domutils@2.8.0/node_modules/domutils/lib/helpers.js
  var require_helpers = __commonJS({
    "node_modules/.pnpm/domutils@2.8.0/node_modules/domutils/lib/helpers.js"(exports) {
      "use strict";
      init_env();
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.uniqueSort = exports.compareDocumentPosition = exports.removeSubsets = void 0;
      var domhandler_1 = require_lib3();
      function removeSubsets2(nodes) {
        var idx = nodes.length;
        while (--idx >= 0) {
          var node = nodes[idx];
          if (idx > 0 && nodes.lastIndexOf(node, idx - 1) >= 0) {
            nodes.splice(idx, 1);
            continue;
          }
          for (var ancestor = node.parent; ancestor; ancestor = ancestor.parent) {
            if (nodes.includes(ancestor)) {
              nodes.splice(idx, 1);
              break;
            }
          }
        }
        return nodes;
      }
      exports.removeSubsets = removeSubsets2;
      function compareDocumentPosition(nodeA, nodeB) {
        var aParents = [];
        var bParents = [];
        if (nodeA === nodeB) {
          return 0;
        }
        var current = (0, domhandler_1.hasChildren)(nodeA) ? nodeA : nodeA.parent;
        while (current) {
          aParents.unshift(current);
          current = current.parent;
        }
        current = (0, domhandler_1.hasChildren)(nodeB) ? nodeB : nodeB.parent;
        while (current) {
          bParents.unshift(current);
          current = current.parent;
        }
        var maxIdx = Math.min(aParents.length, bParents.length);
        var idx = 0;
        while (idx < maxIdx && aParents[idx] === bParents[idx]) {
          idx++;
        }
        if (idx === 0) {
          return 1;
        }
        var sharedParent = aParents[idx - 1];
        var siblings = sharedParent.children;
        var aSibling = aParents[idx];
        var bSibling = bParents[idx];
        if (siblings.indexOf(aSibling) > siblings.indexOf(bSibling)) {
          if (sharedParent === nodeB) {
            return 4 | 16;
          }
          return 4;
        }
        if (sharedParent === nodeA) {
          return 2 | 8;
        }
        return 2;
      }
      exports.compareDocumentPosition = compareDocumentPosition;
      function uniqueSort(nodes) {
        nodes = nodes.filter(function(node, i, arr) {
          return !arr.includes(node, i + 1);
        });
        nodes.sort(function(a, b) {
          var relative = compareDocumentPosition(a, b);
          if (relative & 2) {
            return -1;
          } else if (relative & 4) {
            return 1;
          }
          return 0;
        });
        return nodes;
      }
      exports.uniqueSort = uniqueSort;
    }
  });

  // node_modules/.pnpm/domutils@2.8.0/node_modules/domutils/lib/feeds.js
  var require_feeds = __commonJS({
    "node_modules/.pnpm/domutils@2.8.0/node_modules/domutils/lib/feeds.js"(exports) {
      "use strict";
      init_env();
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.getFeed = void 0;
      var stringify_1 = require_stringify();
      var legacy_1 = require_legacy2();
      function getFeed(doc) {
        var feedRoot = getOneElement(isValidFeed, doc);
        return !feedRoot ? null : feedRoot.name === "feed" ? getAtomFeed(feedRoot) : getRssFeed(feedRoot);
      }
      exports.getFeed = getFeed;
      function getAtomFeed(feedRoot) {
        var _a8;
        var childs = feedRoot.children;
        var feed = {
          type: "atom",
          items: (0, legacy_1.getElementsByTagName)("entry", childs).map(function(item) {
            var _a9;
            var children = item.children;
            var entry = { media: getMediaElements(children) };
            addConditionally(entry, "id", "id", children);
            addConditionally(entry, "title", "title", children);
            var href2 = (_a9 = getOneElement("link", children)) === null || _a9 === void 0 ? void 0 : _a9.attribs.href;
            if (href2) {
              entry.link = href2;
            }
            var description = fetch2("summary", children) || fetch2("content", children);
            if (description) {
              entry.description = description;
            }
            var pubDate = fetch2("updated", children);
            if (pubDate) {
              entry.pubDate = new Date(pubDate);
            }
            return entry;
          })
        };
        addConditionally(feed, "id", "id", childs);
        addConditionally(feed, "title", "title", childs);
        var href = (_a8 = getOneElement("link", childs)) === null || _a8 === void 0 ? void 0 : _a8.attribs.href;
        if (href) {
          feed.link = href;
        }
        addConditionally(feed, "description", "subtitle", childs);
        var updated = fetch2("updated", childs);
        if (updated) {
          feed.updated = new Date(updated);
        }
        addConditionally(feed, "author", "email", childs, true);
        return feed;
      }
      function getRssFeed(feedRoot) {
        var _a8, _b3;
        var childs = (_b3 = (_a8 = getOneElement("channel", feedRoot.children)) === null || _a8 === void 0 ? void 0 : _a8.children) !== null && _b3 !== void 0 ? _b3 : [];
        var feed = {
          type: feedRoot.name.substr(0, 3),
          id: "",
          items: (0, legacy_1.getElementsByTagName)("item", feedRoot.children).map(function(item) {
            var children = item.children;
            var entry = { media: getMediaElements(children) };
            addConditionally(entry, "id", "guid", children);
            addConditionally(entry, "title", "title", children);
            addConditionally(entry, "link", "link", children);
            addConditionally(entry, "description", "description", children);
            var pubDate = fetch2("pubDate", children);
            if (pubDate)
              entry.pubDate = new Date(pubDate);
            return entry;
          })
        };
        addConditionally(feed, "title", "title", childs);
        addConditionally(feed, "link", "link", childs);
        addConditionally(feed, "description", "description", childs);
        var updated = fetch2("lastBuildDate", childs);
        if (updated) {
          feed.updated = new Date(updated);
        }
        addConditionally(feed, "author", "managingEditor", childs, true);
        return feed;
      }
      var MEDIA_KEYS_STRING = ["url", "type", "lang"];
      var MEDIA_KEYS_INT = [
        "fileSize",
        "bitrate",
        "framerate",
        "samplingrate",
        "channels",
        "duration",
        "height",
        "width"
      ];
      function getMediaElements(where) {
        return (0, legacy_1.getElementsByTagName)("media:content", where).map(function(elem) {
          var attribs = elem.attribs;
          var media = {
            medium: attribs.medium,
            isDefault: !!attribs.isDefault
          };
          for (var _i = 0, MEDIA_KEYS_STRING_1 = MEDIA_KEYS_STRING; _i < MEDIA_KEYS_STRING_1.length; _i++) {
            var attrib = MEDIA_KEYS_STRING_1[_i];
            if (attribs[attrib]) {
              media[attrib] = attribs[attrib];
            }
          }
          for (var _a8 = 0, MEDIA_KEYS_INT_1 = MEDIA_KEYS_INT; _a8 < MEDIA_KEYS_INT_1.length; _a8++) {
            var attrib = MEDIA_KEYS_INT_1[_a8];
            if (attribs[attrib]) {
              media[attrib] = parseInt(attribs[attrib], 10);
            }
          }
          if (attribs.expression) {
            media.expression = attribs.expression;
          }
          return media;
        });
      }
      function getOneElement(tagName15, node) {
        return (0, legacy_1.getElementsByTagName)(tagName15, node, true, 1)[0];
      }
      function fetch2(tagName15, where, recurse) {
        if (recurse === void 0) {
          recurse = false;
        }
        return (0, stringify_1.textContent)((0, legacy_1.getElementsByTagName)(tagName15, where, recurse, 1)).trim();
      }
      function addConditionally(obj, prop2, tagName15, where, recurse) {
        if (recurse === void 0) {
          recurse = false;
        }
        var val = fetch2(tagName15, where, recurse);
        if (val)
          obj[prop2] = val;
      }
      function isValidFeed(value) {
        return value === "rss" || value === "feed" || value === "rdf:RDF";
      }
    }
  });

  // node_modules/.pnpm/domutils@2.8.0/node_modules/domutils/lib/index.js
  var require_lib6 = __commonJS({
    "node_modules/.pnpm/domutils@2.8.0/node_modules/domutils/lib/index.js"(exports) {
      "use strict";
      init_env();
      var __createBinding2 = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function() {
          return m[k];
        } });
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __exportStar2 = exports && exports.__exportStar || function(m, exports2) {
        for (var p in m)
          if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
            __createBinding2(exports2, m, p);
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.hasChildren = exports.isDocument = exports.isComment = exports.isText = exports.isCDATA = exports.isTag = void 0;
      __exportStar2(require_stringify(), exports);
      __exportStar2(require_traversal(), exports);
      __exportStar2(require_manipulation(), exports);
      __exportStar2(require_querying(), exports);
      __exportStar2(require_legacy2(), exports);
      __exportStar2(require_helpers(), exports);
      __exportStar2(require_feeds(), exports);
      var domhandler_1 = require_lib3();
      Object.defineProperty(exports, "isTag", { enumerable: true, get: function() {
        return domhandler_1.isTag;
      } });
      Object.defineProperty(exports, "isCDATA", { enumerable: true, get: function() {
        return domhandler_1.isCDATA;
      } });
      Object.defineProperty(exports, "isText", { enumerable: true, get: function() {
        return domhandler_1.isText;
      } });
      Object.defineProperty(exports, "isComment", { enumerable: true, get: function() {
        return domhandler_1.isComment;
      } });
      Object.defineProperty(exports, "isDocument", { enumerable: true, get: function() {
        return domhandler_1.isDocument;
      } });
      Object.defineProperty(exports, "hasChildren", { enumerable: true, get: function() {
        return domhandler_1.hasChildren;
      } });
    }
  });

  // node_modules/.pnpm/htmlparser2@7.2.0/node_modules/htmlparser2/lib/FeedHandler.js
  var require_FeedHandler = __commonJS({
    "node_modules/.pnpm/htmlparser2@7.2.0/node_modules/htmlparser2/lib/FeedHandler.js"(exports) {
      "use strict";
      init_env();
      var __extends2 = exports && exports.__extends || function() {
        var extendStatics = function(d, b) {
          extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
            d2.__proto__ = b2;
          } || function(d2, b2) {
            for (var p in b2)
              if (Object.prototype.hasOwnProperty.call(b2, p))
                d2[p] = b2[p];
          };
          return extendStatics(d, b);
        };
        return function(d, b) {
          if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
          extendStatics(d, b);
          function __() {
            this.constructor = d;
          }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
      }();
      var __importDefault2 = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.parseFeed = exports.FeedHandler = exports.getFeed = void 0;
      var domhandler_1 = __importDefault2(require_lib3());
      var domutils_1 = require_lib6();
      Object.defineProperty(exports, "getFeed", { enumerable: true, get: function() {
        return domutils_1.getFeed;
      } });
      var Parser_1 = require_Parser();
      var FeedHandler = function(_super) {
        __extends2(FeedHandler2, _super);
        function FeedHandler2(callback, options) {
          var _this = this;
          if (typeof callback === "object") {
            callback = void 0;
            options = callback;
          }
          _this = _super.call(this, callback, options) || this;
          return _this;
        }
        FeedHandler2.prototype.onend = function() {
          var feed = (0, domutils_1.getFeed)(this.dom);
          if (feed) {
            this.feed = feed;
            this.handleCallback(null);
          } else {
            this.handleCallback(new Error("couldn't find root of feed"));
          }
        };
        return FeedHandler2;
      }(domhandler_1.default);
      exports.FeedHandler = FeedHandler;
      function parseFeed(feed, options) {
        if (options === void 0) {
          options = { xmlMode: true };
        }
        var handler5 = new domhandler_1.default(null, options);
        new Parser_1.Parser(handler5, options).end(feed);
        return (0, domutils_1.getFeed)(handler5.dom);
      }
      exports.parseFeed = parseFeed;
    }
  });

  // node_modules/.pnpm/htmlparser2@7.2.0/node_modules/htmlparser2/lib/index.js
  var require_lib7 = __commonJS({
    "node_modules/.pnpm/htmlparser2@7.2.0/node_modules/htmlparser2/lib/index.js"(exports) {
      "use strict";
      init_env();
      var __createBinding2 = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function() {
          return m[k];
        } });
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v2) {
        Object.defineProperty(o, "default", { enumerable: true, value: v2 });
      } : function(o, v2) {
        o["default"] = v2;
      });
      var __importStar2 = exports && exports.__importStar || function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding2(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      var __exportStar2 = exports && exports.__exportStar || function(m, exports2) {
        for (var p in m)
          if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
            __createBinding2(exports2, m, p);
      };
      var __importDefault2 = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.RssHandler = exports.DefaultHandler = exports.DomUtils = exports.ElementType = exports.Tokenizer = exports.createDomStream = exports.parseDOM = exports.parseDocument = exports.DomHandler = exports.Parser = void 0;
      var Parser_1 = require_Parser();
      Object.defineProperty(exports, "Parser", { enumerable: true, get: function() {
        return Parser_1.Parser;
      } });
      var domhandler_1 = require_lib3();
      Object.defineProperty(exports, "DomHandler", { enumerable: true, get: function() {
        return domhandler_1.DomHandler;
      } });
      Object.defineProperty(exports, "DefaultHandler", { enumerable: true, get: function() {
        return domhandler_1.DomHandler;
      } });
      function parseDocument(data, options) {
        var handler5 = new domhandler_1.DomHandler(void 0, options);
        new Parser_1.Parser(handler5, options).end(data);
        return handler5.root;
      }
      exports.parseDocument = parseDocument;
      function parseDOM(data, options) {
        return parseDocument(data, options).children;
      }
      exports.parseDOM = parseDOM;
      function createDomStream(cb, options, elementCb) {
        var handler5 = new domhandler_1.DomHandler(cb, options, elementCb);
        return new Parser_1.Parser(handler5, options);
      }
      exports.createDomStream = createDomStream;
      var Tokenizer_1 = require_Tokenizer();
      Object.defineProperty(exports, "Tokenizer", { enumerable: true, get: function() {
        return __importDefault2(Tokenizer_1).default;
      } });
      var ElementType = __importStar2(require_lib2());
      exports.ElementType = ElementType;
      __exportStar2(require_FeedHandler(), exports);
      exports.DomUtils = __importStar2(require_lib6());
      var FeedHandler_1 = require_FeedHandler();
      Object.defineProperty(exports, "RssHandler", { enumerable: true, get: function() {
        return FeedHandler_1.FeedHandler;
      } });
    }
  });

  // src/vendor/perf_hooks.js
  var perf_hooks_exports = {};
  __export(perf_hooks_exports, {
    Performance: () => Performance,
    PerformanceEntry: () => PerformanceEntry,
    PerformanceMark: () => PerformanceMark,
    PerformanceMeasure: () => PerformanceMeasure,
    PerformanceNavigation: () => PerformanceNavigation,
    PerformanceNavigationTiming: () => PerformanceNavigationTiming,
    PerformanceObserver: () => PerformanceObserver,
    PerformanceObserverEntryList: () => PerformanceObserverEntryList,
    PerformanceResourceTiming: () => PerformanceResourceTiming,
    PerformanceTiming: () => PerformanceTiming,
    performance: () => performance
  });
  var performance, Performance, PerformanceEntry, PerformanceMark, PerformanceMeasure, PerformanceNavigation, PerformanceNavigationTiming, PerformanceObserver, PerformanceObserverEntryList, PerformanceResourceTiming, PerformanceTiming;
  var init_perf_hooks = __esm({
    "src/vendor/perf_hooks.js"() {
      init_env();
      ({
        performance,
        Performance,
        PerformanceEntry,
        PerformanceMark,
        PerformanceMeasure,
        PerformanceNavigation,
        PerformanceNavigationTiming,
        PerformanceObserver,
        PerformanceObserverEntryList,
        PerformanceResourceTiming,
        PerformanceTiming
      } = globalThis);
    }
  });

  // node_modules/.pnpm/linkedom@0.14.7/node_modules/linkedom/commonjs/perf_hooks.cjs
  var require_perf_hooks = __commonJS({
    "node_modules/.pnpm/linkedom@0.14.7/node_modules/linkedom/commonjs/perf_hooks.cjs"(exports) {
      init_env();
      try {
        const { performance: performance3 } = (init_perf_hooks(), __toCommonJS(perf_hooks_exports));
        exports.performance = performance3;
      } catch (fallback) {
        exports.performance = { now() {
          return +new Date();
        } };
      }
    }
  });

  // node_modules/.pnpm/boolbase@1.0.0/node_modules/boolbase/index.js
  var require_boolbase = __commonJS({
    "node_modules/.pnpm/boolbase@1.0.0/node_modules/boolbase/index.js"(exports, module) {
      init_env();
      module.exports = {
        trueFunc: function trueFunc() {
          return true;
        },
        falseFunc: function falseFunc() {
          return false;
        }
      };
    }
  });

  // node_modules/.pnpm/css-what@6.1.0/node_modules/css-what/lib/commonjs/types.js
  var require_types2 = __commonJS({
    "node_modules/.pnpm/css-what@6.1.0/node_modules/css-what/lib/commonjs/types.js"(exports) {
      "use strict";
      init_env();
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.AttributeAction = exports.IgnoreCaseMode = exports.SelectorType = void 0;
      var SelectorType;
      (function(SelectorType2) {
        SelectorType2["Attribute"] = "attribute";
        SelectorType2["Pseudo"] = "pseudo";
        SelectorType2["PseudoElement"] = "pseudo-element";
        SelectorType2["Tag"] = "tag";
        SelectorType2["Universal"] = "universal";
        SelectorType2["Adjacent"] = "adjacent";
        SelectorType2["Child"] = "child";
        SelectorType2["Descendant"] = "descendant";
        SelectorType2["Parent"] = "parent";
        SelectorType2["Sibling"] = "sibling";
        SelectorType2["ColumnCombinator"] = "column-combinator";
      })(SelectorType = exports.SelectorType || (exports.SelectorType = {}));
      exports.IgnoreCaseMode = {
        Unknown: null,
        QuirksMode: "quirks",
        IgnoreCase: true,
        CaseSensitive: false
      };
      var AttributeAction;
      (function(AttributeAction2) {
        AttributeAction2["Any"] = "any";
        AttributeAction2["Element"] = "element";
        AttributeAction2["End"] = "end";
        AttributeAction2["Equals"] = "equals";
        AttributeAction2["Exists"] = "exists";
        AttributeAction2["Hyphen"] = "hyphen";
        AttributeAction2["Not"] = "not";
        AttributeAction2["Start"] = "start";
      })(AttributeAction = exports.AttributeAction || (exports.AttributeAction = {}));
    }
  });

  // node_modules/.pnpm/css-what@6.1.0/node_modules/css-what/lib/commonjs/parse.js
  var require_parse = __commonJS({
    "node_modules/.pnpm/css-what@6.1.0/node_modules/css-what/lib/commonjs/parse.js"(exports) {
      "use strict";
      init_env();
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.parse = exports.isTraversal = void 0;
      var types_1 = require_types2();
      var reName = /^[^\\#]?(?:\\(?:[\da-f]{1,6}\s?|.)|[\w\-\u00b0-\uFFFF])+/;
      var reEscape = /\\([\da-f]{1,6}\s?|(\s)|.)/gi;
      var actionTypes = /* @__PURE__ */ new Map([
        [126, types_1.AttributeAction.Element],
        [94, types_1.AttributeAction.Start],
        [36, types_1.AttributeAction.End],
        [42, types_1.AttributeAction.Any],
        [33, types_1.AttributeAction.Not],
        [124, types_1.AttributeAction.Hyphen]
      ]);
      var unpackPseudos = /* @__PURE__ */ new Set([
        "has",
        "not",
        "matches",
        "is",
        "where",
        "host",
        "host-context"
      ]);
      function isTraversal(selector) {
        switch (selector.type) {
          case types_1.SelectorType.Adjacent:
          case types_1.SelectorType.Child:
          case types_1.SelectorType.Descendant:
          case types_1.SelectorType.Parent:
          case types_1.SelectorType.Sibling:
          case types_1.SelectorType.ColumnCombinator:
            return true;
          default:
            return false;
        }
      }
      exports.isTraversal = isTraversal;
      var stripQuotesFromPseudos = /* @__PURE__ */ new Set(["contains", "icontains"]);
      function funescape(_, escaped, escapedWhitespace) {
        var high = parseInt(escaped, 16) - 65536;
        return high !== high || escapedWhitespace ? escaped : high < 0 ? String.fromCharCode(high + 65536) : String.fromCharCode(high >> 10 | 55296, high & 1023 | 56320);
      }
      function unescapeCSS(str) {
        return str.replace(reEscape, funescape);
      }
      function isQuote(c2) {
        return c2 === 39 || c2 === 34;
      }
      function isWhitespace(c2) {
        return c2 === 32 || c2 === 9 || c2 === 10 || c2 === 12 || c2 === 13;
      }
      function parse4(selector) {
        var subselects = [];
        var endIndex = parseSelector(subselects, "".concat(selector), 0);
        if (endIndex < selector.length) {
          throw new Error("Unmatched selector: ".concat(selector.slice(endIndex)));
        }
        return subselects;
      }
      exports.parse = parse4;
      function parseSelector(subselects, selector, selectorIndex) {
        var tokens = [];
        function getName2(offset) {
          var match2 = selector.slice(selectorIndex + offset).match(reName);
          if (!match2) {
            throw new Error("Expected name, found ".concat(selector.slice(selectorIndex)));
          }
          var name = match2[0];
          selectorIndex += offset + name.length;
          return unescapeCSS(name);
        }
        function stripWhitespace(offset) {
          selectorIndex += offset;
          while (selectorIndex < selector.length && isWhitespace(selector.charCodeAt(selectorIndex))) {
            selectorIndex++;
          }
        }
        function readValueWithParenthesis() {
          selectorIndex += 1;
          var start = selectorIndex;
          var counter = 1;
          for (; counter > 0 && selectorIndex < selector.length; selectorIndex++) {
            if (selector.charCodeAt(selectorIndex) === 40 && !isEscaped(selectorIndex)) {
              counter++;
            } else if (selector.charCodeAt(selectorIndex) === 41 && !isEscaped(selectorIndex)) {
              counter--;
            }
          }
          if (counter) {
            throw new Error("Parenthesis not matched");
          }
          return unescapeCSS(selector.slice(start, selectorIndex - 1));
        }
        function isEscaped(pos) {
          var slashCount = 0;
          while (selector.charCodeAt(--pos) === 92)
            slashCount++;
          return (slashCount & 1) === 1;
        }
        function ensureNotTraversal() {
          if (tokens.length > 0 && isTraversal(tokens[tokens.length - 1])) {
            throw new Error("Did not expect successive traversals.");
          }
        }
        function addTraversal(type) {
          if (tokens.length > 0 && tokens[tokens.length - 1].type === types_1.SelectorType.Descendant) {
            tokens[tokens.length - 1].type = type;
            return;
          }
          ensureNotTraversal();
          tokens.push({ type });
        }
        function addSpecialAttribute(name, action2) {
          tokens.push({
            type: types_1.SelectorType.Attribute,
            name,
            action: action2,
            value: getName2(1),
            namespace: null,
            ignoreCase: "quirks"
          });
        }
        function finalizeSubselector() {
          if (tokens.length && tokens[tokens.length - 1].type === types_1.SelectorType.Descendant) {
            tokens.pop();
          }
          if (tokens.length === 0) {
            throw new Error("Empty sub-selector");
          }
          subselects.push(tokens);
        }
        stripWhitespace(0);
        if (selector.length === selectorIndex) {
          return selectorIndex;
        }
        loop:
          while (selectorIndex < selector.length) {
            var firstChar = selector.charCodeAt(selectorIndex);
            switch (firstChar) {
              case 32:
              case 9:
              case 10:
              case 12:
              case 13: {
                if (tokens.length === 0 || tokens[0].type !== types_1.SelectorType.Descendant) {
                  ensureNotTraversal();
                  tokens.push({ type: types_1.SelectorType.Descendant });
                }
                stripWhitespace(1);
                break;
              }
              case 62: {
                addTraversal(types_1.SelectorType.Child);
                stripWhitespace(1);
                break;
              }
              case 60: {
                addTraversal(types_1.SelectorType.Parent);
                stripWhitespace(1);
                break;
              }
              case 126: {
                addTraversal(types_1.SelectorType.Sibling);
                stripWhitespace(1);
                break;
              }
              case 43: {
                addTraversal(types_1.SelectorType.Adjacent);
                stripWhitespace(1);
                break;
              }
              case 46: {
                addSpecialAttribute("class", types_1.AttributeAction.Element);
                break;
              }
              case 35: {
                addSpecialAttribute("id", types_1.AttributeAction.Equals);
                break;
              }
              case 91: {
                stripWhitespace(1);
                var name_1 = void 0;
                var namespace = null;
                if (selector.charCodeAt(selectorIndex) === 124) {
                  name_1 = getName2(1);
                } else if (selector.startsWith("*|", selectorIndex)) {
                  namespace = "*";
                  name_1 = getName2(2);
                } else {
                  name_1 = getName2(0);
                  if (selector.charCodeAt(selectorIndex) === 124 && selector.charCodeAt(selectorIndex + 1) !== 61) {
                    namespace = name_1;
                    name_1 = getName2(1);
                  }
                }
                stripWhitespace(0);
                var action = types_1.AttributeAction.Exists;
                var possibleAction = actionTypes.get(selector.charCodeAt(selectorIndex));
                if (possibleAction) {
                  action = possibleAction;
                  if (selector.charCodeAt(selectorIndex + 1) !== 61) {
                    throw new Error("Expected `=`");
                  }
                  stripWhitespace(2);
                } else if (selector.charCodeAt(selectorIndex) === 61) {
                  action = types_1.AttributeAction.Equals;
                  stripWhitespace(1);
                }
                var value = "";
                var ignoreCase2 = null;
                if (action !== "exists") {
                  if (isQuote(selector.charCodeAt(selectorIndex))) {
                    var quote = selector.charCodeAt(selectorIndex);
                    var sectionEnd = selectorIndex + 1;
                    while (sectionEnd < selector.length && (selector.charCodeAt(sectionEnd) !== quote || isEscaped(sectionEnd))) {
                      sectionEnd += 1;
                    }
                    if (selector.charCodeAt(sectionEnd) !== quote) {
                      throw new Error("Attribute value didn't end");
                    }
                    value = unescapeCSS(selector.slice(selectorIndex + 1, sectionEnd));
                    selectorIndex = sectionEnd + 1;
                  } else {
                    var valueStart = selectorIndex;
                    while (selectorIndex < selector.length && (!isWhitespace(selector.charCodeAt(selectorIndex)) && selector.charCodeAt(selectorIndex) !== 93 || isEscaped(selectorIndex))) {
                      selectorIndex += 1;
                    }
                    value = unescapeCSS(selector.slice(valueStart, selectorIndex));
                  }
                  stripWhitespace(0);
                  var forceIgnore = selector.charCodeAt(selectorIndex) | 32;
                  if (forceIgnore === 115) {
                    ignoreCase2 = false;
                    stripWhitespace(1);
                  } else if (forceIgnore === 105) {
                    ignoreCase2 = true;
                    stripWhitespace(1);
                  }
                }
                if (selector.charCodeAt(selectorIndex) !== 93) {
                  throw new Error("Attribute selector didn't terminate");
                }
                selectorIndex += 1;
                var attributeSelector = {
                  type: types_1.SelectorType.Attribute,
                  name: name_1,
                  action,
                  value,
                  namespace,
                  ignoreCase: ignoreCase2
                };
                tokens.push(attributeSelector);
                break;
              }
              case 58: {
                if (selector.charCodeAt(selectorIndex + 1) === 58) {
                  tokens.push({
                    type: types_1.SelectorType.PseudoElement,
                    name: getName2(2).toLowerCase(),
                    data: selector.charCodeAt(selectorIndex) === 40 ? readValueWithParenthesis() : null
                  });
                  continue;
                }
                var name_2 = getName2(1).toLowerCase();
                var data = null;
                if (selector.charCodeAt(selectorIndex) === 40) {
                  if (unpackPseudos.has(name_2)) {
                    if (isQuote(selector.charCodeAt(selectorIndex + 1))) {
                      throw new Error("Pseudo-selector ".concat(name_2, " cannot be quoted"));
                    }
                    data = [];
                    selectorIndex = parseSelector(data, selector, selectorIndex + 1);
                    if (selector.charCodeAt(selectorIndex) !== 41) {
                      throw new Error("Missing closing parenthesis in :".concat(name_2, " (").concat(selector, ")"));
                    }
                    selectorIndex += 1;
                  } else {
                    data = readValueWithParenthesis();
                    if (stripQuotesFromPseudos.has(name_2)) {
                      var quot = data.charCodeAt(0);
                      if (quot === data.charCodeAt(data.length - 1) && isQuote(quot)) {
                        data = data.slice(1, -1);
                      }
                    }
                    data = unescapeCSS(data);
                  }
                }
                tokens.push({ type: types_1.SelectorType.Pseudo, name: name_2, data });
                break;
              }
              case 44: {
                finalizeSubselector();
                tokens = [];
                stripWhitespace(1);
                break;
              }
              default: {
                if (selector.startsWith("/*", selectorIndex)) {
                  var endIndex = selector.indexOf("*/", selectorIndex + 2);
                  if (endIndex < 0) {
                    throw new Error("Comment was not terminated");
                  }
                  selectorIndex = endIndex + 2;
                  if (tokens.length === 0) {
                    stripWhitespace(0);
                  }
                  break;
                }
                var namespace = null;
                var name_3 = void 0;
                if (firstChar === 42) {
                  selectorIndex += 1;
                  name_3 = "*";
                } else if (firstChar === 124) {
                  name_3 = "";
                  if (selector.charCodeAt(selectorIndex + 1) === 124) {
                    addTraversal(types_1.SelectorType.ColumnCombinator);
                    stripWhitespace(2);
                    break;
                  }
                } else if (reName.test(selector.slice(selectorIndex))) {
                  name_3 = getName2(0);
                } else {
                  break loop;
                }
                if (selector.charCodeAt(selectorIndex) === 124 && selector.charCodeAt(selectorIndex + 1) !== 124) {
                  namespace = name_3;
                  if (selector.charCodeAt(selectorIndex + 1) === 42) {
                    name_3 = "*";
                    selectorIndex += 2;
                  } else {
                    name_3 = getName2(1);
                  }
                }
                tokens.push(name_3 === "*" ? { type: types_1.SelectorType.Universal, namespace } : { type: types_1.SelectorType.Tag, name: name_3, namespace });
              }
            }
          }
        finalizeSubselector();
        return selectorIndex;
      }
    }
  });

  // node_modules/.pnpm/css-what@6.1.0/node_modules/css-what/lib/commonjs/stringify.js
  var require_stringify2 = __commonJS({
    "node_modules/.pnpm/css-what@6.1.0/node_modules/css-what/lib/commonjs/stringify.js"(exports) {
      "use strict";
      init_env();
      var __spreadArray2 = exports && exports.__spreadArray || function(to, from2, pack2) {
        if (pack2 || arguments.length === 2)
          for (var i = 0, l = from2.length, ar; i < l; i++) {
            if (ar || !(i in from2)) {
              if (!ar)
                ar = Array.prototype.slice.call(from2, 0, i);
              ar[i] = from2[i];
            }
          }
        return to.concat(ar || Array.prototype.slice.call(from2));
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.stringify = void 0;
      var types_1 = require_types2();
      var attribValChars = ["\\", '"'];
      var pseudoValChars = __spreadArray2(__spreadArray2([], attribValChars, true), ["(", ")"], false);
      var charsToEscapeInAttributeValue = new Set(attribValChars.map(function(c2) {
        return c2.charCodeAt(0);
      }));
      var charsToEscapeInPseudoValue = new Set(pseudoValChars.map(function(c2) {
        return c2.charCodeAt(0);
      }));
      var charsToEscapeInName = new Set(__spreadArray2(__spreadArray2([], pseudoValChars, true), [
        "~",
        "^",
        "$",
        "*",
        "+",
        "!",
        "|",
        ":",
        "[",
        "]",
        " ",
        "."
      ], false).map(function(c2) {
        return c2.charCodeAt(0);
      }));
      function stringify(selector) {
        return selector.map(function(token) {
          return token.map(stringifyToken).join("");
        }).join(", ");
      }
      exports.stringify = stringify;
      function stringifyToken(token, index, arr) {
        switch (token.type) {
          case types_1.SelectorType.Child:
            return index === 0 ? "> " : " > ";
          case types_1.SelectorType.Parent:
            return index === 0 ? "< " : " < ";
          case types_1.SelectorType.Sibling:
            return index === 0 ? "~ " : " ~ ";
          case types_1.SelectorType.Adjacent:
            return index === 0 ? "+ " : " + ";
          case types_1.SelectorType.Descendant:
            return " ";
          case types_1.SelectorType.ColumnCombinator:
            return index === 0 ? "|| " : " || ";
          case types_1.SelectorType.Universal:
            return token.namespace === "*" && index + 1 < arr.length && "name" in arr[index + 1] ? "" : "".concat(getNamespace(token.namespace), "*");
          case types_1.SelectorType.Tag:
            return getNamespacedName(token);
          case types_1.SelectorType.PseudoElement:
            return "::".concat(escapeName(token.name, charsToEscapeInName)).concat(token.data === null ? "" : "(".concat(escapeName(token.data, charsToEscapeInPseudoValue), ")"));
          case types_1.SelectorType.Pseudo:
            return ":".concat(escapeName(token.name, charsToEscapeInName)).concat(token.data === null ? "" : "(".concat(typeof token.data === "string" ? escapeName(token.data, charsToEscapeInPseudoValue) : stringify(token.data), ")"));
          case types_1.SelectorType.Attribute: {
            if (token.name === "id" && token.action === types_1.AttributeAction.Equals && token.ignoreCase === "quirks" && !token.namespace) {
              return "#".concat(escapeName(token.value, charsToEscapeInName));
            }
            if (token.name === "class" && token.action === types_1.AttributeAction.Element && token.ignoreCase === "quirks" && !token.namespace) {
              return ".".concat(escapeName(token.value, charsToEscapeInName));
            }
            var name_1 = getNamespacedName(token);
            if (token.action === types_1.AttributeAction.Exists) {
              return "[".concat(name_1, "]");
            }
            return "[".concat(name_1).concat(getActionValue(token.action), '="').concat(escapeName(token.value, charsToEscapeInAttributeValue), '"').concat(token.ignoreCase === null ? "" : token.ignoreCase ? " i" : " s", "]");
          }
        }
      }
      function getActionValue(action) {
        switch (action) {
          case types_1.AttributeAction.Equals:
            return "";
          case types_1.AttributeAction.Element:
            return "~";
          case types_1.AttributeAction.Start:
            return "^";
          case types_1.AttributeAction.End:
            return "$";
          case types_1.AttributeAction.Any:
            return "*";
          case types_1.AttributeAction.Not:
            return "!";
          case types_1.AttributeAction.Hyphen:
            return "|";
          case types_1.AttributeAction.Exists:
            throw new Error("Shouldn't be here");
        }
      }
      function getNamespacedName(token) {
        return "".concat(getNamespace(token.namespace)).concat(escapeName(token.name, charsToEscapeInName));
      }
      function getNamespace(namespace) {
        return namespace !== null ? "".concat(namespace === "*" ? "*" : escapeName(namespace, charsToEscapeInName), "|") : "";
      }
      function escapeName(str, charsToEscape) {
        var lastIdx = 0;
        var ret = "";
        for (var i = 0; i < str.length; i++) {
          if (charsToEscape.has(str.charCodeAt(i))) {
            ret += "".concat(str.slice(lastIdx, i), "\\").concat(str.charAt(i));
            lastIdx = i + 1;
          }
        }
        return ret.length > 0 ? ret + str.slice(lastIdx) : str;
      }
    }
  });

  // node_modules/.pnpm/css-what@6.1.0/node_modules/css-what/lib/commonjs/index.js
  var require_commonjs = __commonJS({
    "node_modules/.pnpm/css-what@6.1.0/node_modules/css-what/lib/commonjs/index.js"(exports) {
      "use strict";
      init_env();
      var __createBinding2 = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __exportStar2 = exports && exports.__exportStar || function(m, exports2) {
        for (var p in m)
          if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
            __createBinding2(exports2, m, p);
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.stringify = exports.parse = exports.isTraversal = void 0;
      __exportStar2(require_types2(), exports);
      var parse_1 = require_parse();
      Object.defineProperty(exports, "isTraversal", { enumerable: true, get: function() {
        return parse_1.isTraversal;
      } });
      Object.defineProperty(exports, "parse", { enumerable: true, get: function() {
        return parse_1.parse;
      } });
      var stringify_1 = require_stringify2();
      Object.defineProperty(exports, "stringify", { enumerable: true, get: function() {
        return stringify_1.stringify;
      } });
    }
  });

  // node_modules/.pnpm/css-select@4.3.0/node_modules/css-select/lib/procedure.js
  var require_procedure = __commonJS({
    "node_modules/.pnpm/css-select@4.3.0/node_modules/css-select/lib/procedure.js"(exports) {
      "use strict";
      init_env();
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.isTraversal = exports.procedure = void 0;
      exports.procedure = {
        universal: 50,
        tag: 30,
        attribute: 1,
        pseudo: 0,
        "pseudo-element": 0,
        "column-combinator": -1,
        descendant: -1,
        child: -1,
        parent: -1,
        sibling: -1,
        adjacent: -1,
        _flexibleDescendant: -1
      };
      function isTraversal(t) {
        return exports.procedure[t.type] < 0;
      }
      exports.isTraversal = isTraversal;
    }
  });

  // node_modules/.pnpm/css-select@4.3.0/node_modules/css-select/lib/sort.js
  var require_sort = __commonJS({
    "node_modules/.pnpm/css-select@4.3.0/node_modules/css-select/lib/sort.js"(exports) {
      "use strict";
      init_env();
      Object.defineProperty(exports, "__esModule", { value: true });
      var css_what_1 = require_commonjs();
      var procedure_1 = require_procedure();
      var attributes = {
        exists: 10,
        equals: 8,
        not: 7,
        start: 6,
        end: 6,
        any: 5,
        hyphen: 4,
        element: 4
      };
      function sortByProcedure(arr) {
        var procs = arr.map(getProcedure);
        for (var i = 1; i < arr.length; i++) {
          var procNew = procs[i];
          if (procNew < 0)
            continue;
          for (var j = i - 1; j >= 0 && procNew < procs[j]; j--) {
            var token = arr[j + 1];
            arr[j + 1] = arr[j];
            arr[j] = token;
            procs[j + 1] = procs[j];
            procs[j] = procNew;
          }
        }
      }
      exports.default = sortByProcedure;
      function getProcedure(token) {
        var proc = procedure_1.procedure[token.type];
        if (token.type === css_what_1.SelectorType.Attribute) {
          proc = attributes[token.action];
          if (proc === attributes.equals && token.name === "id") {
            proc = 9;
          }
          if (token.ignoreCase) {
            proc >>= 1;
          }
        } else if (token.type === css_what_1.SelectorType.Pseudo) {
          if (!token.data) {
            proc = 3;
          } else if (token.name === "has" || token.name === "contains") {
            proc = 0;
          } else if (Array.isArray(token.data)) {
            proc = 0;
            for (var i = 0; i < token.data.length; i++) {
              if (token.data[i].length !== 1)
                continue;
              var cur = getProcedure(token.data[i][0]);
              if (cur === 0) {
                proc = 0;
                break;
              }
              if (cur > proc)
                proc = cur;
            }
            if (token.data.length > 1 && proc > 0)
              proc -= 1;
          } else {
            proc = 1;
          }
        }
        return proc;
      }
    }
  });

  // node_modules/.pnpm/css-select@4.3.0/node_modules/css-select/lib/attributes.js
  var require_attributes = __commonJS({
    "node_modules/.pnpm/css-select@4.3.0/node_modules/css-select/lib/attributes.js"(exports) {
      "use strict";
      init_env();
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.attributeRules = void 0;
      var boolbase_1 = require_boolbase();
      var reChars = /[-[\]{}()*+?.,\\^$|#\s]/g;
      function escapeRegex(value) {
        return value.replace(reChars, "\\$&");
      }
      var caseInsensitiveAttributes = /* @__PURE__ */ new Set([
        "accept",
        "accept-charset",
        "align",
        "alink",
        "axis",
        "bgcolor",
        "charset",
        "checked",
        "clear",
        "codetype",
        "color",
        "compact",
        "declare",
        "defer",
        "dir",
        "direction",
        "disabled",
        "enctype",
        "face",
        "frame",
        "hreflang",
        "http-equiv",
        "lang",
        "language",
        "link",
        "media",
        "method",
        "multiple",
        "nohref",
        "noresize",
        "noshade",
        "nowrap",
        "readonly",
        "rel",
        "rev",
        "rules",
        "scope",
        "scrolling",
        "selected",
        "shape",
        "target",
        "text",
        "type",
        "valign",
        "valuetype",
        "vlink"
      ]);
      function shouldIgnoreCase(selector, options) {
        return typeof selector.ignoreCase === "boolean" ? selector.ignoreCase : selector.ignoreCase === "quirks" ? !!options.quirksMode : !options.xmlMode && caseInsensitiveAttributes.has(selector.name);
      }
      exports.attributeRules = {
        equals: function(next, data, options) {
          var adapter2 = options.adapter;
          var name = data.name;
          var value = data.value;
          if (shouldIgnoreCase(data, options)) {
            value = value.toLowerCase();
            return function(elem) {
              var attr = adapter2.getAttributeValue(elem, name);
              return attr != null && attr.length === value.length && attr.toLowerCase() === value && next(elem);
            };
          }
          return function(elem) {
            return adapter2.getAttributeValue(elem, name) === value && next(elem);
          };
        },
        hyphen: function(next, data, options) {
          var adapter2 = options.adapter;
          var name = data.name;
          var value = data.value;
          var len = value.length;
          if (shouldIgnoreCase(data, options)) {
            value = value.toLowerCase();
            return function hyphenIC(elem) {
              var attr = adapter2.getAttributeValue(elem, name);
              return attr != null && (attr.length === len || attr.charAt(len) === "-") && attr.substr(0, len).toLowerCase() === value && next(elem);
            };
          }
          return function hyphen(elem) {
            var attr = adapter2.getAttributeValue(elem, name);
            return attr != null && (attr.length === len || attr.charAt(len) === "-") && attr.substr(0, len) === value && next(elem);
          };
        },
        element: function(next, data, options) {
          var adapter2 = options.adapter;
          var name = data.name, value = data.value;
          if (/\s/.test(value)) {
            return boolbase_1.falseFunc;
          }
          var regex = new RegExp("(?:^|\\s)".concat(escapeRegex(value), "(?:$|\\s)"), shouldIgnoreCase(data, options) ? "i" : "");
          return function element(elem) {
            var attr = adapter2.getAttributeValue(elem, name);
            return attr != null && attr.length >= value.length && regex.test(attr) && next(elem);
          };
        },
        exists: function(next, _a8, _b3) {
          var name = _a8.name;
          var adapter2 = _b3.adapter;
          return function(elem) {
            return adapter2.hasAttrib(elem, name) && next(elem);
          };
        },
        start: function(next, data, options) {
          var adapter2 = options.adapter;
          var name = data.name;
          var value = data.value;
          var len = value.length;
          if (len === 0) {
            return boolbase_1.falseFunc;
          }
          if (shouldIgnoreCase(data, options)) {
            value = value.toLowerCase();
            return function(elem) {
              var attr = adapter2.getAttributeValue(elem, name);
              return attr != null && attr.length >= len && attr.substr(0, len).toLowerCase() === value && next(elem);
            };
          }
          return function(elem) {
            var _a8;
            return !!((_a8 = adapter2.getAttributeValue(elem, name)) === null || _a8 === void 0 ? void 0 : _a8.startsWith(value)) && next(elem);
          };
        },
        end: function(next, data, options) {
          var adapter2 = options.adapter;
          var name = data.name;
          var value = data.value;
          var len = -value.length;
          if (len === 0) {
            return boolbase_1.falseFunc;
          }
          if (shouldIgnoreCase(data, options)) {
            value = value.toLowerCase();
            return function(elem) {
              var _a8;
              return ((_a8 = adapter2.getAttributeValue(elem, name)) === null || _a8 === void 0 ? void 0 : _a8.substr(len).toLowerCase()) === value && next(elem);
            };
          }
          return function(elem) {
            var _a8;
            return !!((_a8 = adapter2.getAttributeValue(elem, name)) === null || _a8 === void 0 ? void 0 : _a8.endsWith(value)) && next(elem);
          };
        },
        any: function(next, data, options) {
          var adapter2 = options.adapter;
          var name = data.name, value = data.value;
          if (value === "") {
            return boolbase_1.falseFunc;
          }
          if (shouldIgnoreCase(data, options)) {
            var regex_1 = new RegExp(escapeRegex(value), "i");
            return function anyIC(elem) {
              var attr = adapter2.getAttributeValue(elem, name);
              return attr != null && attr.length >= value.length && regex_1.test(attr) && next(elem);
            };
          }
          return function(elem) {
            var _a8;
            return !!((_a8 = adapter2.getAttributeValue(elem, name)) === null || _a8 === void 0 ? void 0 : _a8.includes(value)) && next(elem);
          };
        },
        not: function(next, data, options) {
          var adapter2 = options.adapter;
          var name = data.name;
          var value = data.value;
          if (value === "") {
            return function(elem) {
              return !!adapter2.getAttributeValue(elem, name) && next(elem);
            };
          } else if (shouldIgnoreCase(data, options)) {
            value = value.toLowerCase();
            return function(elem) {
              var attr = adapter2.getAttributeValue(elem, name);
              return (attr == null || attr.length !== value.length || attr.toLowerCase() !== value) && next(elem);
            };
          }
          return function(elem) {
            return adapter2.getAttributeValue(elem, name) !== value && next(elem);
          };
        }
      };
    }
  });

  // node_modules/.pnpm/nth-check@2.0.1/node_modules/nth-check/lib/parse.js
  var require_parse2 = __commonJS({
    "node_modules/.pnpm/nth-check@2.0.1/node_modules/nth-check/lib/parse.js"(exports) {
      "use strict";
      init_env();
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.parse = void 0;
      var whitespace = /* @__PURE__ */ new Set([9, 10, 12, 13, 32]);
      var ZERO = "0".charCodeAt(0);
      var NINE = "9".charCodeAt(0);
      function parse4(formula) {
        formula = formula.trim().toLowerCase();
        if (formula === "even") {
          return [2, 0];
        } else if (formula === "odd") {
          return [2, 1];
        }
        var idx = 0;
        var a = 0;
        var sign = readSign();
        var number = readNumber();
        if (idx < formula.length && formula.charAt(idx) === "n") {
          idx++;
          a = sign * (number !== null && number !== void 0 ? number : 1);
          skipWhitespace();
          if (idx < formula.length) {
            sign = readSign();
            skipWhitespace();
            number = readNumber();
          } else {
            sign = number = 0;
          }
        }
        if (number === null || idx < formula.length) {
          throw new Error("n-th rule couldn't be parsed ('" + formula + "')");
        }
        return [a, sign * number];
        function readSign() {
          if (formula.charAt(idx) === "-") {
            idx++;
            return -1;
          }
          if (formula.charAt(idx) === "+") {
            idx++;
          }
          return 1;
        }
        function readNumber() {
          var start = idx;
          var value = 0;
          while (idx < formula.length && formula.charCodeAt(idx) >= ZERO && formula.charCodeAt(idx) <= NINE) {
            value = value * 10 + (formula.charCodeAt(idx) - ZERO);
            idx++;
          }
          return idx === start ? null : value;
        }
        function skipWhitespace() {
          while (idx < formula.length && whitespace.has(formula.charCodeAt(idx))) {
            idx++;
          }
        }
      }
      exports.parse = parse4;
    }
  });

  // node_modules/.pnpm/nth-check@2.0.1/node_modules/nth-check/lib/compile.js
  var require_compile = __commonJS({
    "node_modules/.pnpm/nth-check@2.0.1/node_modules/nth-check/lib/compile.js"(exports) {
      "use strict";
      init_env();
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.compile = void 0;
      var boolbase_1 = require_boolbase();
      function compile2(parsed) {
        var a = parsed[0];
        var b = parsed[1] - 1;
        if (b < 0 && a <= 0)
          return boolbase_1.falseFunc;
        if (a === -1)
          return function(index) {
            return index <= b;
          };
        if (a === 0)
          return function(index) {
            return index === b;
          };
        if (a === 1)
          return b < 0 ? boolbase_1.trueFunc : function(index) {
            return index >= b;
          };
        var absA = Math.abs(a);
        var bMod = (b % absA + absA) % absA;
        return a > 1 ? function(index) {
          return index >= b && index % absA === bMod;
        } : function(index) {
          return index <= b && index % absA === bMod;
        };
      }
      exports.compile = compile2;
    }
  });

  // node_modules/.pnpm/nth-check@2.0.1/node_modules/nth-check/lib/index.js
  var require_lib8 = __commonJS({
    "node_modules/.pnpm/nth-check@2.0.1/node_modules/nth-check/lib/index.js"(exports) {
      "use strict";
      init_env();
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.compile = exports.parse = void 0;
      var parse_1 = require_parse2();
      Object.defineProperty(exports, "parse", { enumerable: true, get: function() {
        return parse_1.parse;
      } });
      var compile_1 = require_compile();
      Object.defineProperty(exports, "compile", { enumerable: true, get: function() {
        return compile_1.compile;
      } });
      function nthCheck(formula) {
        return (0, compile_1.compile)((0, parse_1.parse)(formula));
      }
      exports.default = nthCheck;
    }
  });

  // node_modules/.pnpm/css-select@4.3.0/node_modules/css-select/lib/pseudo-selectors/filters.js
  var require_filters = __commonJS({
    "node_modules/.pnpm/css-select@4.3.0/node_modules/css-select/lib/pseudo-selectors/filters.js"(exports) {
      "use strict";
      init_env();
      var __importDefault2 = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.filters = void 0;
      var nth_check_1 = __importDefault2(require_lib8());
      var boolbase_1 = require_boolbase();
      function getChildFunc(next, adapter2) {
        return function(elem) {
          var parent = adapter2.getParent(elem);
          return parent != null && adapter2.isTag(parent) && next(elem);
        };
      }
      exports.filters = {
        contains: function(next, text, _a8) {
          var adapter2 = _a8.adapter;
          return function contains(elem) {
            return next(elem) && adapter2.getText(elem).includes(text);
          };
        },
        icontains: function(next, text, _a8) {
          var adapter2 = _a8.adapter;
          var itext = text.toLowerCase();
          return function icontains(elem) {
            return next(elem) && adapter2.getText(elem).toLowerCase().includes(itext);
          };
        },
        "nth-child": function(next, rule, _a8) {
          var adapter2 = _a8.adapter, equals = _a8.equals;
          var func = (0, nth_check_1.default)(rule);
          if (func === boolbase_1.falseFunc)
            return boolbase_1.falseFunc;
          if (func === boolbase_1.trueFunc)
            return getChildFunc(next, adapter2);
          return function nthChild(elem) {
            var siblings = adapter2.getSiblings(elem);
            var pos = 0;
            for (var i = 0; i < siblings.length; i++) {
              if (equals(elem, siblings[i]))
                break;
              if (adapter2.isTag(siblings[i])) {
                pos++;
              }
            }
            return func(pos) && next(elem);
          };
        },
        "nth-last-child": function(next, rule, _a8) {
          var adapter2 = _a8.adapter, equals = _a8.equals;
          var func = (0, nth_check_1.default)(rule);
          if (func === boolbase_1.falseFunc)
            return boolbase_1.falseFunc;
          if (func === boolbase_1.trueFunc)
            return getChildFunc(next, adapter2);
          return function nthLastChild(elem) {
            var siblings = adapter2.getSiblings(elem);
            var pos = 0;
            for (var i = siblings.length - 1; i >= 0; i--) {
              if (equals(elem, siblings[i]))
                break;
              if (adapter2.isTag(siblings[i])) {
                pos++;
              }
            }
            return func(pos) && next(elem);
          };
        },
        "nth-of-type": function(next, rule, _a8) {
          var adapter2 = _a8.adapter, equals = _a8.equals;
          var func = (0, nth_check_1.default)(rule);
          if (func === boolbase_1.falseFunc)
            return boolbase_1.falseFunc;
          if (func === boolbase_1.trueFunc)
            return getChildFunc(next, adapter2);
          return function nthOfType(elem) {
            var siblings = adapter2.getSiblings(elem);
            var pos = 0;
            for (var i = 0; i < siblings.length; i++) {
              var currentSibling = siblings[i];
              if (equals(elem, currentSibling))
                break;
              if (adapter2.isTag(currentSibling) && adapter2.getName(currentSibling) === adapter2.getName(elem)) {
                pos++;
              }
            }
            return func(pos) && next(elem);
          };
        },
        "nth-last-of-type": function(next, rule, _a8) {
          var adapter2 = _a8.adapter, equals = _a8.equals;
          var func = (0, nth_check_1.default)(rule);
          if (func === boolbase_1.falseFunc)
            return boolbase_1.falseFunc;
          if (func === boolbase_1.trueFunc)
            return getChildFunc(next, adapter2);
          return function nthLastOfType(elem) {
            var siblings = adapter2.getSiblings(elem);
            var pos = 0;
            for (var i = siblings.length - 1; i >= 0; i--) {
              var currentSibling = siblings[i];
              if (equals(elem, currentSibling))
                break;
              if (adapter2.isTag(currentSibling) && adapter2.getName(currentSibling) === adapter2.getName(elem)) {
                pos++;
              }
            }
            return func(pos) && next(elem);
          };
        },
        root: function(next, _rule, _a8) {
          var adapter2 = _a8.adapter;
          return function(elem) {
            var parent = adapter2.getParent(elem);
            return (parent == null || !adapter2.isTag(parent)) && next(elem);
          };
        },
        scope: function(next, rule, options, context) {
          var equals = options.equals;
          if (!context || context.length === 0) {
            return exports.filters.root(next, rule, options);
          }
          if (context.length === 1) {
            return function(elem) {
              return equals(context[0], elem) && next(elem);
            };
          }
          return function(elem) {
            return context.includes(elem) && next(elem);
          };
        },
        hover: dynamicStatePseudo("isHovered"),
        visited: dynamicStatePseudo("isVisited"),
        active: dynamicStatePseudo("isActive")
      };
      function dynamicStatePseudo(name) {
        return function dynamicPseudo(next, _rule, _a8) {
          var adapter2 = _a8.adapter;
          var func = adapter2[name];
          if (typeof func !== "function") {
            return boolbase_1.falseFunc;
          }
          return function active(elem) {
            return func(elem) && next(elem);
          };
        };
      }
    }
  });

  // node_modules/.pnpm/css-select@4.3.0/node_modules/css-select/lib/pseudo-selectors/pseudos.js
  var require_pseudos = __commonJS({
    "node_modules/.pnpm/css-select@4.3.0/node_modules/css-select/lib/pseudo-selectors/pseudos.js"(exports) {
      "use strict";
      init_env();
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.verifyPseudoArgs = exports.pseudos = void 0;
      exports.pseudos = {
        empty: function(elem, _a8) {
          var adapter2 = _a8.adapter;
          return !adapter2.getChildren(elem).some(function(elem2) {
            return adapter2.isTag(elem2) || adapter2.getText(elem2) !== "";
          });
        },
        "first-child": function(elem, _a8) {
          var adapter2 = _a8.adapter, equals = _a8.equals;
          var firstChild = adapter2.getSiblings(elem).find(function(elem2) {
            return adapter2.isTag(elem2);
          });
          return firstChild != null && equals(elem, firstChild);
        },
        "last-child": function(elem, _a8) {
          var adapter2 = _a8.adapter, equals = _a8.equals;
          var siblings = adapter2.getSiblings(elem);
          for (var i = siblings.length - 1; i >= 0; i--) {
            if (equals(elem, siblings[i]))
              return true;
            if (adapter2.isTag(siblings[i]))
              break;
          }
          return false;
        },
        "first-of-type": function(elem, _a8) {
          var adapter2 = _a8.adapter, equals = _a8.equals;
          var siblings = adapter2.getSiblings(elem);
          var elemName = adapter2.getName(elem);
          for (var i = 0; i < siblings.length; i++) {
            var currentSibling = siblings[i];
            if (equals(elem, currentSibling))
              return true;
            if (adapter2.isTag(currentSibling) && adapter2.getName(currentSibling) === elemName) {
              break;
            }
          }
          return false;
        },
        "last-of-type": function(elem, _a8) {
          var adapter2 = _a8.adapter, equals = _a8.equals;
          var siblings = adapter2.getSiblings(elem);
          var elemName = adapter2.getName(elem);
          for (var i = siblings.length - 1; i >= 0; i--) {
            var currentSibling = siblings[i];
            if (equals(elem, currentSibling))
              return true;
            if (adapter2.isTag(currentSibling) && adapter2.getName(currentSibling) === elemName) {
              break;
            }
          }
          return false;
        },
        "only-of-type": function(elem, _a8) {
          var adapter2 = _a8.adapter, equals = _a8.equals;
          var elemName = adapter2.getName(elem);
          return adapter2.getSiblings(elem).every(function(sibling) {
            return equals(elem, sibling) || !adapter2.isTag(sibling) || adapter2.getName(sibling) !== elemName;
          });
        },
        "only-child": function(elem, _a8) {
          var adapter2 = _a8.adapter, equals = _a8.equals;
          return adapter2.getSiblings(elem).every(function(sibling) {
            return equals(elem, sibling) || !adapter2.isTag(sibling);
          });
        }
      };
      function verifyPseudoArgs(func, name, subselect) {
        if (subselect === null) {
          if (func.length > 2) {
            throw new Error("pseudo-selector :".concat(name, " requires an argument"));
          }
        } else if (func.length === 2) {
          throw new Error("pseudo-selector :".concat(name, " doesn't have any arguments"));
        }
      }
      exports.verifyPseudoArgs = verifyPseudoArgs;
    }
  });

  // node_modules/.pnpm/css-select@4.3.0/node_modules/css-select/lib/pseudo-selectors/aliases.js
  var require_aliases = __commonJS({
    "node_modules/.pnpm/css-select@4.3.0/node_modules/css-select/lib/pseudo-selectors/aliases.js"(exports) {
      "use strict";
      init_env();
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.aliases = void 0;
      exports.aliases = {
        "any-link": ":is(a, area, link)[href]",
        link: ":any-link:not(:visited)",
        disabled: ":is(\n        :is(button, input, select, textarea, optgroup, option)[disabled],\n        optgroup[disabled] > option,\n        fieldset[disabled]:not(fieldset[disabled] legend:first-of-type *)\n    )",
        enabled: ":not(:disabled)",
        checked: ":is(:is(input[type=radio], input[type=checkbox])[checked], option:selected)",
        required: ":is(input, select, textarea)[required]",
        optional: ":is(input, select, textarea):not([required])",
        selected: "option:is([selected], select:not([multiple]):not(:has(> option[selected])) > :first-of-type)",
        checkbox: "[type=checkbox]",
        file: "[type=file]",
        password: "[type=password]",
        radio: "[type=radio]",
        reset: "[type=reset]",
        image: "[type=image]",
        submit: "[type=submit]",
        parent: ":not(:empty)",
        header: ":is(h1, h2, h3, h4, h5, h6)",
        button: ":is(button, input[type=button])",
        input: ":is(input, textarea, select, button)",
        text: "input:is(:not([type!='']), [type=text])"
      };
    }
  });

  // node_modules/.pnpm/css-select@4.3.0/node_modules/css-select/lib/pseudo-selectors/subselects.js
  var require_subselects = __commonJS({
    "node_modules/.pnpm/css-select@4.3.0/node_modules/css-select/lib/pseudo-selectors/subselects.js"(exports) {
      "use strict";
      init_env();
      var __spreadArray2 = exports && exports.__spreadArray || function(to, from2, pack2) {
        if (pack2 || arguments.length === 2)
          for (var i = 0, l = from2.length, ar; i < l; i++) {
            if (ar || !(i in from2)) {
              if (!ar)
                ar = Array.prototype.slice.call(from2, 0, i);
              ar[i] = from2[i];
            }
          }
        return to.concat(ar || Array.prototype.slice.call(from2));
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.subselects = exports.getNextSiblings = exports.ensureIsTag = exports.PLACEHOLDER_ELEMENT = void 0;
      var boolbase_1 = require_boolbase();
      var procedure_1 = require_procedure();
      exports.PLACEHOLDER_ELEMENT = {};
      function ensureIsTag(next, adapter2) {
        if (next === boolbase_1.falseFunc)
          return boolbase_1.falseFunc;
        return function(elem) {
          return adapter2.isTag(elem) && next(elem);
        };
      }
      exports.ensureIsTag = ensureIsTag;
      function getNextSiblings(elem, adapter2) {
        var siblings = adapter2.getSiblings(elem);
        if (siblings.length <= 1)
          return [];
        var elemIndex = siblings.indexOf(elem);
        if (elemIndex < 0 || elemIndex === siblings.length - 1)
          return [];
        return siblings.slice(elemIndex + 1).filter(adapter2.isTag);
      }
      exports.getNextSiblings = getNextSiblings;
      var is2 = function(next, token, options, context, compileToken) {
        var opts = {
          xmlMode: !!options.xmlMode,
          adapter: options.adapter,
          equals: options.equals
        };
        var func = compileToken(token, opts, context);
        return function(elem) {
          return func(elem) && next(elem);
        };
      };
      exports.subselects = {
        is: is2,
        matches: is2,
        where: is2,
        not: function(next, token, options, context, compileToken) {
          var opts = {
            xmlMode: !!options.xmlMode,
            adapter: options.adapter,
            equals: options.equals
          };
          var func = compileToken(token, opts, context);
          if (func === boolbase_1.falseFunc)
            return next;
          if (func === boolbase_1.trueFunc)
            return boolbase_1.falseFunc;
          return function not(elem) {
            return !func(elem) && next(elem);
          };
        },
        has: function(next, subselect, options, _context, compileToken) {
          var adapter2 = options.adapter;
          var opts = {
            xmlMode: !!options.xmlMode,
            adapter: adapter2,
            equals: options.equals
          };
          var context = subselect.some(function(s) {
            return s.some(procedure_1.isTraversal);
          }) ? [exports.PLACEHOLDER_ELEMENT] : void 0;
          var compiled = compileToken(subselect, opts, context);
          if (compiled === boolbase_1.falseFunc)
            return boolbase_1.falseFunc;
          if (compiled === boolbase_1.trueFunc) {
            return function(elem) {
              return adapter2.getChildren(elem).some(adapter2.isTag) && next(elem);
            };
          }
          var hasElement = ensureIsTag(compiled, adapter2);
          var _a8 = compiled.shouldTestNextSiblings, shouldTestNextSiblings = _a8 === void 0 ? false : _a8;
          if (context) {
            return function(elem) {
              context[0] = elem;
              var childs = adapter2.getChildren(elem);
              var nextElements = shouldTestNextSiblings ? __spreadArray2(__spreadArray2([], childs, true), getNextSiblings(elem, adapter2), true) : childs;
              return next(elem) && adapter2.existsOne(hasElement, nextElements);
            };
          }
          return function(elem) {
            return next(elem) && adapter2.existsOne(hasElement, adapter2.getChildren(elem));
          };
        }
      };
    }
  });

  // node_modules/.pnpm/css-select@4.3.0/node_modules/css-select/lib/pseudo-selectors/index.js
  var require_pseudo_selectors = __commonJS({
    "node_modules/.pnpm/css-select@4.3.0/node_modules/css-select/lib/pseudo-selectors/index.js"(exports) {
      "use strict";
      init_env();
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.compilePseudoSelector = exports.aliases = exports.pseudos = exports.filters = void 0;
      var boolbase_1 = require_boolbase();
      var css_what_1 = require_commonjs();
      var filters_1 = require_filters();
      Object.defineProperty(exports, "filters", { enumerable: true, get: function() {
        return filters_1.filters;
      } });
      var pseudos_1 = require_pseudos();
      Object.defineProperty(exports, "pseudos", { enumerable: true, get: function() {
        return pseudos_1.pseudos;
      } });
      var aliases_1 = require_aliases();
      Object.defineProperty(exports, "aliases", { enumerable: true, get: function() {
        return aliases_1.aliases;
      } });
      var subselects_1 = require_subselects();
      function compilePseudoSelector(next, selector, options, context, compileToken) {
        var name = selector.name, data = selector.data;
        if (Array.isArray(data)) {
          return subselects_1.subselects[name](next, data, options, context, compileToken);
        }
        if (name in aliases_1.aliases) {
          if (data != null) {
            throw new Error("Pseudo ".concat(name, " doesn't have any arguments"));
          }
          var alias = (0, css_what_1.parse)(aliases_1.aliases[name]);
          return subselects_1.subselects.is(next, alias, options, context, compileToken);
        }
        if (name in filters_1.filters) {
          return filters_1.filters[name](next, data, options, context);
        }
        if (name in pseudos_1.pseudos) {
          var pseudo_1 = pseudos_1.pseudos[name];
          (0, pseudos_1.verifyPseudoArgs)(pseudo_1, name, data);
          return pseudo_1 === boolbase_1.falseFunc ? boolbase_1.falseFunc : next === boolbase_1.trueFunc ? function(elem) {
            return pseudo_1(elem, options, data);
          } : function(elem) {
            return pseudo_1(elem, options, data) && next(elem);
          };
        }
        throw new Error("unmatched pseudo-class :".concat(name));
      }
      exports.compilePseudoSelector = compilePseudoSelector;
    }
  });

  // node_modules/.pnpm/css-select@4.3.0/node_modules/css-select/lib/general.js
  var require_general = __commonJS({
    "node_modules/.pnpm/css-select@4.3.0/node_modules/css-select/lib/general.js"(exports) {
      "use strict";
      init_env();
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.compileGeneralSelector = void 0;
      var attributes_1 = require_attributes();
      var pseudo_selectors_1 = require_pseudo_selectors();
      var css_what_1 = require_commonjs();
      function compileGeneralSelector(next, selector, options, context, compileToken) {
        var adapter2 = options.adapter, equals = options.equals;
        switch (selector.type) {
          case css_what_1.SelectorType.PseudoElement: {
            throw new Error("Pseudo-elements are not supported by css-select");
          }
          case css_what_1.SelectorType.ColumnCombinator: {
            throw new Error("Column combinators are not yet supported by css-select");
          }
          case css_what_1.SelectorType.Attribute: {
            if (selector.namespace != null) {
              throw new Error("Namespaced attributes are not yet supported by css-select");
            }
            if (!options.xmlMode || options.lowerCaseAttributeNames) {
              selector.name = selector.name.toLowerCase();
            }
            return attributes_1.attributeRules[selector.action](next, selector, options);
          }
          case css_what_1.SelectorType.Pseudo: {
            return (0, pseudo_selectors_1.compilePseudoSelector)(next, selector, options, context, compileToken);
          }
          case css_what_1.SelectorType.Tag: {
            if (selector.namespace != null) {
              throw new Error("Namespaced tag names are not yet supported by css-select");
            }
            var name_1 = selector.name;
            if (!options.xmlMode || options.lowerCaseTags) {
              name_1 = name_1.toLowerCase();
            }
            return function tag(elem) {
              return adapter2.getName(elem) === name_1 && next(elem);
            };
          }
          case css_what_1.SelectorType.Descendant: {
            if (options.cacheResults === false || typeof WeakSet === "undefined") {
              return function descendant(elem) {
                var current = elem;
                while (current = adapter2.getParent(current)) {
                  if (adapter2.isTag(current) && next(current)) {
                    return true;
                  }
                }
                return false;
              };
            }
            var isFalseCache_1 = /* @__PURE__ */ new WeakSet();
            return function cachedDescendant(elem) {
              var current = elem;
              while (current = adapter2.getParent(current)) {
                if (!isFalseCache_1.has(current)) {
                  if (adapter2.isTag(current) && next(current)) {
                    return true;
                  }
                  isFalseCache_1.add(current);
                }
              }
              return false;
            };
          }
          case "_flexibleDescendant": {
            return function flexibleDescendant(elem) {
              var current = elem;
              do {
                if (adapter2.isTag(current) && next(current))
                  return true;
              } while (current = adapter2.getParent(current));
              return false;
            };
          }
          case css_what_1.SelectorType.Parent: {
            return function parent(elem) {
              return adapter2.getChildren(elem).some(function(elem2) {
                return adapter2.isTag(elem2) && next(elem2);
              });
            };
          }
          case css_what_1.SelectorType.Child: {
            return function child(elem) {
              var parent = adapter2.getParent(elem);
              return parent != null && adapter2.isTag(parent) && next(parent);
            };
          }
          case css_what_1.SelectorType.Sibling: {
            return function sibling(elem) {
              var siblings = adapter2.getSiblings(elem);
              for (var i = 0; i < siblings.length; i++) {
                var currentSibling = siblings[i];
                if (equals(elem, currentSibling))
                  break;
                if (adapter2.isTag(currentSibling) && next(currentSibling)) {
                  return true;
                }
              }
              return false;
            };
          }
          case css_what_1.SelectorType.Adjacent: {
            if (adapter2.prevElementSibling) {
              return function adjacent(elem) {
                var previous = adapter2.prevElementSibling(elem);
                return previous != null && next(previous);
              };
            }
            return function adjacent(elem) {
              var siblings = adapter2.getSiblings(elem);
              var lastElement;
              for (var i = 0; i < siblings.length; i++) {
                var currentSibling = siblings[i];
                if (equals(elem, currentSibling))
                  break;
                if (adapter2.isTag(currentSibling)) {
                  lastElement = currentSibling;
                }
              }
              return !!lastElement && next(lastElement);
            };
          }
          case css_what_1.SelectorType.Universal: {
            if (selector.namespace != null && selector.namespace !== "*") {
              throw new Error("Namespaced universal selectors are not yet supported by css-select");
            }
            return next;
          }
        }
      }
      exports.compileGeneralSelector = compileGeneralSelector;
    }
  });

  // node_modules/.pnpm/css-select@4.3.0/node_modules/css-select/lib/compile.js
  var require_compile2 = __commonJS({
    "node_modules/.pnpm/css-select@4.3.0/node_modules/css-select/lib/compile.js"(exports) {
      "use strict";
      init_env();
      var __importDefault2 = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.compileToken = exports.compileUnsafe = exports.compile = void 0;
      var css_what_1 = require_commonjs();
      var boolbase_1 = require_boolbase();
      var sort_1 = __importDefault2(require_sort());
      var procedure_1 = require_procedure();
      var general_1 = require_general();
      var subselects_1 = require_subselects();
      function compile2(selector, options, context) {
        var next = compileUnsafe(selector, options, context);
        return (0, subselects_1.ensureIsTag)(next, options.adapter);
      }
      exports.compile = compile2;
      function compileUnsafe(selector, options, context) {
        var token = typeof selector === "string" ? (0, css_what_1.parse)(selector) : selector;
        return compileToken(token, options, context);
      }
      exports.compileUnsafe = compileUnsafe;
      function includesScopePseudo(t) {
        return t.type === "pseudo" && (t.name === "scope" || Array.isArray(t.data) && t.data.some(function(data) {
          return data.some(includesScopePseudo);
        }));
      }
      var DESCENDANT_TOKEN = { type: css_what_1.SelectorType.Descendant };
      var FLEXIBLE_DESCENDANT_TOKEN = {
        type: "_flexibleDescendant"
      };
      var SCOPE_TOKEN = {
        type: css_what_1.SelectorType.Pseudo,
        name: "scope",
        data: null
      };
      function absolutize(token, _a8, context) {
        var adapter2 = _a8.adapter;
        var hasContext = !!(context === null || context === void 0 ? void 0 : context.every(function(e) {
          var parent = adapter2.isTag(e) && adapter2.getParent(e);
          return e === subselects_1.PLACEHOLDER_ELEMENT || parent && adapter2.isTag(parent);
        }));
        for (var _i = 0, token_1 = token; _i < token_1.length; _i++) {
          var t = token_1[_i];
          if (t.length > 0 && (0, procedure_1.isTraversal)(t[0]) && t[0].type !== "descendant") {
          } else if (hasContext && !t.some(includesScopePseudo)) {
            t.unshift(DESCENDANT_TOKEN);
          } else {
            continue;
          }
          t.unshift(SCOPE_TOKEN);
        }
      }
      function compileToken(token, options, context) {
        var _a8;
        token = token.filter(function(t) {
          return t.length > 0;
        });
        token.forEach(sort_1.default);
        context = (_a8 = options.context) !== null && _a8 !== void 0 ? _a8 : context;
        var isArrayContext = Array.isArray(context);
        var finalContext = context && (Array.isArray(context) ? context : [context]);
        absolutize(token, options, finalContext);
        var shouldTestNextSiblings = false;
        var query2 = token.map(function(rules) {
          if (rules.length >= 2) {
            var first = rules[0], second = rules[1];
            if (first.type !== "pseudo" || first.name !== "scope") {
            } else if (isArrayContext && second.type === "descendant") {
              rules[1] = FLEXIBLE_DESCENDANT_TOKEN;
            } else if (second.type === "adjacent" || second.type === "sibling") {
              shouldTestNextSiblings = true;
            }
          }
          return compileRules(rules, options, finalContext);
        }).reduce(reduceRules, boolbase_1.falseFunc);
        query2.shouldTestNextSiblings = shouldTestNextSiblings;
        return query2;
      }
      exports.compileToken = compileToken;
      function compileRules(rules, options, context) {
        var _a8;
        return rules.reduce(function(previous, rule) {
          return previous === boolbase_1.falseFunc ? boolbase_1.falseFunc : (0, general_1.compileGeneralSelector)(previous, rule, options, context, compileToken);
        }, (_a8 = options.rootFunc) !== null && _a8 !== void 0 ? _a8 : boolbase_1.trueFunc);
      }
      function reduceRules(a, b) {
        if (b === boolbase_1.falseFunc || a === boolbase_1.trueFunc) {
          return a;
        }
        if (a === boolbase_1.falseFunc || b === boolbase_1.trueFunc) {
          return b;
        }
        return function combine2(elem) {
          return a(elem) || b(elem);
        };
      }
    }
  });

  // node_modules/.pnpm/css-select@4.3.0/node_modules/css-select/lib/index.js
  var require_lib9 = __commonJS({
    "node_modules/.pnpm/css-select@4.3.0/node_modules/css-select/lib/index.js"(exports) {
      "use strict";
      init_env();
      var __createBinding2 = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v2) {
        Object.defineProperty(o, "default", { enumerable: true, value: v2 });
      } : function(o, v2) {
        o["default"] = v2;
      });
      var __importStar2 = exports && exports.__importStar || function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding2(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.aliases = exports.pseudos = exports.filters = exports.is = exports.selectOne = exports.selectAll = exports.prepareContext = exports._compileToken = exports._compileUnsafe = exports.compile = void 0;
      var DomUtils = __importStar2(require_lib6());
      var boolbase_1 = require_boolbase();
      var compile_1 = require_compile2();
      var subselects_1 = require_subselects();
      var defaultEquals = function(a, b) {
        return a === b;
      };
      var defaultOptions2 = {
        adapter: DomUtils,
        equals: defaultEquals
      };
      function convertOptionFormats(options) {
        var _a8, _b3, _c, _d;
        var opts = options !== null && options !== void 0 ? options : defaultOptions2;
        (_a8 = opts.adapter) !== null && _a8 !== void 0 ? _a8 : opts.adapter = DomUtils;
        (_b3 = opts.equals) !== null && _b3 !== void 0 ? _b3 : opts.equals = (_d = (_c = opts.adapter) === null || _c === void 0 ? void 0 : _c.equals) !== null && _d !== void 0 ? _d : defaultEquals;
        return opts;
      }
      function wrapCompile(func) {
        return function addAdapter(selector, options, context) {
          var opts = convertOptionFormats(options);
          return func(selector, opts, context);
        };
      }
      exports.compile = wrapCompile(compile_1.compile);
      exports._compileUnsafe = wrapCompile(compile_1.compileUnsafe);
      exports._compileToken = wrapCompile(compile_1.compileToken);
      function getSelectorFunc(searchFunc) {
        return function select(query2, elements, options) {
          var opts = convertOptionFormats(options);
          if (typeof query2 !== "function") {
            query2 = (0, compile_1.compileUnsafe)(query2, opts, elements);
          }
          var filteredElements = prepareContext(elements, opts.adapter, query2.shouldTestNextSiblings);
          return searchFunc(query2, filteredElements, opts);
        };
      }
      function prepareContext(elems, adapter2, shouldTestNextSiblings) {
        if (shouldTestNextSiblings === void 0) {
          shouldTestNextSiblings = false;
        }
        if (shouldTestNextSiblings) {
          elems = appendNextSiblings(elems, adapter2);
        }
        return Array.isArray(elems) ? adapter2.removeSubsets(elems) : adapter2.getChildren(elems);
      }
      exports.prepareContext = prepareContext;
      function appendNextSiblings(elem, adapter2) {
        var elems = Array.isArray(elem) ? elem.slice(0) : [elem];
        var elemsLength = elems.length;
        for (var i = 0; i < elemsLength; i++) {
          var nextSiblings = (0, subselects_1.getNextSiblings)(elems[i], adapter2);
          elems.push.apply(elems, nextSiblings);
        }
        return elems;
      }
      exports.selectAll = getSelectorFunc(function(query2, elems, options) {
        return query2 === boolbase_1.falseFunc || !elems || elems.length === 0 ? [] : options.adapter.findAll(query2, elems);
      });
      exports.selectOne = getSelectorFunc(function(query2, elems, options) {
        return query2 === boolbase_1.falseFunc || !elems || elems.length === 0 ? null : options.adapter.findOne(query2, elems);
      });
      function is2(elem, query2, options) {
        var opts = convertOptionFormats(options);
        return (typeof query2 === "function" ? query2 : (0, compile_1.compile)(query2, opts))(elem);
      }
      exports.is = is2;
      exports.default = exports.selectAll;
      var pseudo_selectors_1 = require_pseudo_selectors();
      Object.defineProperty(exports, "filters", { enumerable: true, get: function() {
        return pseudo_selectors_1.filters;
      } });
      Object.defineProperty(exports, "pseudos", { enumerable: true, get: function() {
        return pseudo_selectors_1.pseudos;
      } });
      Object.defineProperty(exports, "aliases", { enumerable: true, get: function() {
        return pseudo_selectors_1.aliases;
      } });
    }
  });

  // node_modules/.pnpm/cssom@0.5.0/node_modules/cssom/lib/StyleSheet.js
  var require_StyleSheet = __commonJS({
    "node_modules/.pnpm/cssom@0.5.0/node_modules/cssom/lib/StyleSheet.js"(exports) {
      init_env();
      var CSSOM = {};
      CSSOM.StyleSheet = function StyleSheet() {
        this.parentStyleSheet = null;
      };
      exports.StyleSheet = CSSOM.StyleSheet;
    }
  });

  // node_modules/.pnpm/cssom@0.5.0/node_modules/cssom/lib/CSSRule.js
  var require_CSSRule = __commonJS({
    "node_modules/.pnpm/cssom@0.5.0/node_modules/cssom/lib/CSSRule.js"(exports) {
      init_env();
      var CSSOM = {};
      CSSOM.CSSRule = function CSSRule() {
        this.parentRule = null;
        this.parentStyleSheet = null;
      };
      CSSOM.CSSRule.UNKNOWN_RULE = 0;
      CSSOM.CSSRule.STYLE_RULE = 1;
      CSSOM.CSSRule.CHARSET_RULE = 2;
      CSSOM.CSSRule.IMPORT_RULE = 3;
      CSSOM.CSSRule.MEDIA_RULE = 4;
      CSSOM.CSSRule.FONT_FACE_RULE = 5;
      CSSOM.CSSRule.PAGE_RULE = 6;
      CSSOM.CSSRule.KEYFRAMES_RULE = 7;
      CSSOM.CSSRule.KEYFRAME_RULE = 8;
      CSSOM.CSSRule.MARGIN_RULE = 9;
      CSSOM.CSSRule.NAMESPACE_RULE = 10;
      CSSOM.CSSRule.COUNTER_STYLE_RULE = 11;
      CSSOM.CSSRule.SUPPORTS_RULE = 12;
      CSSOM.CSSRule.DOCUMENT_RULE = 13;
      CSSOM.CSSRule.FONT_FEATURE_VALUES_RULE = 14;
      CSSOM.CSSRule.VIEWPORT_RULE = 15;
      CSSOM.CSSRule.REGION_STYLE_RULE = 16;
      CSSOM.CSSRule.prototype = {
        constructor: CSSOM.CSSRule
      };
      exports.CSSRule = CSSOM.CSSRule;
    }
  });

  // node_modules/.pnpm/cssom@0.5.0/node_modules/cssom/lib/CSSStyleRule.js
  var require_CSSStyleRule = __commonJS({
    "node_modules/.pnpm/cssom@0.5.0/node_modules/cssom/lib/CSSStyleRule.js"(exports) {
      init_env();
      var CSSOM = {
        CSSStyleDeclaration: require_CSSStyleDeclaration().CSSStyleDeclaration,
        CSSRule: require_CSSRule().CSSRule
      };
      CSSOM.CSSStyleRule = function CSSStyleRule() {
        CSSOM.CSSRule.call(this);
        this.selectorText = "";
        this.style = new CSSOM.CSSStyleDeclaration();
        this.style.parentRule = this;
      };
      CSSOM.CSSStyleRule.prototype = new CSSOM.CSSRule();
      CSSOM.CSSStyleRule.prototype.constructor = CSSOM.CSSStyleRule;
      CSSOM.CSSStyleRule.prototype.type = 1;
      Object.defineProperty(CSSOM.CSSStyleRule.prototype, "cssText", {
        get: function() {
          var text;
          if (this.selectorText) {
            text = this.selectorText + " {" + this.style.cssText + "}";
          } else {
            text = "";
          }
          return text;
        },
        set: function(cssText) {
          var rule = CSSOM.CSSStyleRule.parse(cssText);
          this.style = rule.style;
          this.selectorText = rule.selectorText;
        }
      });
      CSSOM.CSSStyleRule.parse = function(ruleText) {
        var i = 0;
        var state = "selector";
        var index;
        var j = i;
        var buffer2 = "";
        var SIGNIFICANT_WHITESPACE = {
          "selector": true,
          "value": true
        };
        var styleRule = new CSSOM.CSSStyleRule();
        var name, priority = "";
        for (var character; character = ruleText.charAt(i); i++) {
          switch (character) {
            case " ":
            case "	":
            case "\r":
            case "\n":
            case "\f":
              if (SIGNIFICANT_WHITESPACE[state]) {
                switch (ruleText.charAt(i - 1)) {
                  case " ":
                  case "	":
                  case "\r":
                  case "\n":
                  case "\f":
                    break;
                  default:
                    buffer2 += " ";
                    break;
                }
              }
              break;
            case '"':
              j = i + 1;
              index = ruleText.indexOf('"', j) + 1;
              if (!index) {
                throw '" is missing';
              }
              buffer2 += ruleText.slice(i, index);
              i = index - 1;
              break;
            case "'":
              j = i + 1;
              index = ruleText.indexOf("'", j) + 1;
              if (!index) {
                throw "' is missing";
              }
              buffer2 += ruleText.slice(i, index);
              i = index - 1;
              break;
            case "/":
              if (ruleText.charAt(i + 1) === "*") {
                i += 2;
                index = ruleText.indexOf("*/", i);
                if (index === -1) {
                  throw new SyntaxError("Missing */");
                } else {
                  i = index + 1;
                }
              } else {
                buffer2 += character;
              }
              break;
            case "{":
              if (state === "selector") {
                styleRule.selectorText = buffer2.trim();
                buffer2 = "";
                state = "name";
              }
              break;
            case ":":
              if (state === "name") {
                name = buffer2.trim();
                buffer2 = "";
                state = "value";
              } else {
                buffer2 += character;
              }
              break;
            case "!":
              if (state === "value" && ruleText.indexOf("!important", i) === i) {
                priority = "important";
                i += "important".length;
              } else {
                buffer2 += character;
              }
              break;
            case ";":
              if (state === "value") {
                styleRule.style.setProperty(name, buffer2.trim(), priority);
                priority = "";
                buffer2 = "";
                state = "name";
              } else {
                buffer2 += character;
              }
              break;
            case "}":
              if (state === "value") {
                styleRule.style.setProperty(name, buffer2.trim(), priority);
                priority = "";
                buffer2 = "";
              } else if (state === "name") {
                break;
              } else {
                buffer2 += character;
              }
              state = "selector";
              break;
            default:
              buffer2 += character;
              break;
          }
        }
        return styleRule;
      };
      exports.CSSStyleRule = CSSOM.CSSStyleRule;
    }
  });

  // node_modules/.pnpm/cssom@0.5.0/node_modules/cssom/lib/CSSStyleSheet.js
  var require_CSSStyleSheet = __commonJS({
    "node_modules/.pnpm/cssom@0.5.0/node_modules/cssom/lib/CSSStyleSheet.js"(exports) {
      init_env();
      var CSSOM = {
        StyleSheet: require_StyleSheet().StyleSheet,
        CSSStyleRule: require_CSSStyleRule().CSSStyleRule
      };
      CSSOM.CSSStyleSheet = function CSSStyleSheet() {
        CSSOM.StyleSheet.call(this);
        this.cssRules = [];
      };
      CSSOM.CSSStyleSheet.prototype = new CSSOM.StyleSheet();
      CSSOM.CSSStyleSheet.prototype.constructor = CSSOM.CSSStyleSheet;
      CSSOM.CSSStyleSheet.prototype.insertRule = function(rule, index) {
        if (index < 0 || index > this.cssRules.length) {
          throw new RangeError("INDEX_SIZE_ERR");
        }
        var cssRule = CSSOM.parse(rule).cssRules[0];
        cssRule.parentStyleSheet = this;
        this.cssRules.splice(index, 0, cssRule);
        return index;
      };
      CSSOM.CSSStyleSheet.prototype.deleteRule = function(index) {
        if (index < 0 || index >= this.cssRules.length) {
          throw new RangeError("INDEX_SIZE_ERR");
        }
        this.cssRules.splice(index, 1);
      };
      CSSOM.CSSStyleSheet.prototype.toString = function() {
        var result = "";
        var rules = this.cssRules;
        for (var i = 0; i < rules.length; i++) {
          result += rules[i].cssText + "\n";
        }
        return result;
      };
      exports.CSSStyleSheet = CSSOM.CSSStyleSheet;
      CSSOM.parse = require_parse3().parse;
    }
  });

  // node_modules/.pnpm/cssom@0.5.0/node_modules/cssom/lib/MediaList.js
  var require_MediaList = __commonJS({
    "node_modules/.pnpm/cssom@0.5.0/node_modules/cssom/lib/MediaList.js"(exports) {
      init_env();
      var CSSOM = {};
      CSSOM.MediaList = function MediaList() {
        this.length = 0;
      };
      CSSOM.MediaList.prototype = {
        constructor: CSSOM.MediaList,
        get mediaText() {
          return Array.prototype.join.call(this, ", ");
        },
        set mediaText(value) {
          var values = value.split(",");
          var length = this.length = values.length;
          for (var i = 0; i < length; i++) {
            this[i] = values[i].trim();
          }
        },
        appendMedium: function(medium) {
          if (Array.prototype.indexOf.call(this, medium) === -1) {
            this[this.length] = medium;
            this.length++;
          }
        },
        deleteMedium: function(medium) {
          var index = Array.prototype.indexOf.call(this, medium);
          if (index !== -1) {
            Array.prototype.splice.call(this, index, 1);
          }
        }
      };
      exports.MediaList = CSSOM.MediaList;
    }
  });

  // node_modules/.pnpm/cssom@0.5.0/node_modules/cssom/lib/CSSImportRule.js
  var require_CSSImportRule = __commonJS({
    "node_modules/.pnpm/cssom@0.5.0/node_modules/cssom/lib/CSSImportRule.js"(exports) {
      init_env();
      var CSSOM = {
        CSSRule: require_CSSRule().CSSRule,
        CSSStyleSheet: require_CSSStyleSheet().CSSStyleSheet,
        MediaList: require_MediaList().MediaList
      };
      CSSOM.CSSImportRule = function CSSImportRule() {
        CSSOM.CSSRule.call(this);
        this.href = "";
        this.media = new CSSOM.MediaList();
        this.styleSheet = new CSSOM.CSSStyleSheet();
      };
      CSSOM.CSSImportRule.prototype = new CSSOM.CSSRule();
      CSSOM.CSSImportRule.prototype.constructor = CSSOM.CSSImportRule;
      CSSOM.CSSImportRule.prototype.type = 3;
      Object.defineProperty(CSSOM.CSSImportRule.prototype, "cssText", {
        get: function() {
          var mediaText = this.media.mediaText;
          return "@import url(" + this.href + ")" + (mediaText ? " " + mediaText : "") + ";";
        },
        set: function(cssText) {
          var i = 0;
          var state = "";
          var buffer2 = "";
          var index;
          for (var character; character = cssText.charAt(i); i++) {
            switch (character) {
              case " ":
              case "	":
              case "\r":
              case "\n":
              case "\f":
                if (state === "after-import") {
                  state = "url";
                } else {
                  buffer2 += character;
                }
                break;
              case "@":
                if (!state && cssText.indexOf("@import", i) === i) {
                  state = "after-import";
                  i += "import".length;
                  buffer2 = "";
                }
                break;
              case "u":
                if (state === "url" && cssText.indexOf("url(", i) === i) {
                  index = cssText.indexOf(")", i + 1);
                  if (index === -1) {
                    throw i + ': ")" not found';
                  }
                  i += "url(".length;
                  var url = cssText.slice(i, index);
                  if (url[0] === url[url.length - 1]) {
                    if (url[0] === '"' || url[0] === "'") {
                      url = url.slice(1, -1);
                    }
                  }
                  this.href = url;
                  i = index;
                  state = "media";
                }
                break;
              case '"':
                if (state === "url") {
                  index = cssText.indexOf('"', i + 1);
                  if (!index) {
                    throw i + `: '"' not found`;
                  }
                  this.href = cssText.slice(i + 1, index);
                  i = index;
                  state = "media";
                }
                break;
              case "'":
                if (state === "url") {
                  index = cssText.indexOf("'", i + 1);
                  if (!index) {
                    throw i + `: "'" not found`;
                  }
                  this.href = cssText.slice(i + 1, index);
                  i = index;
                  state = "media";
                }
                break;
              case ";":
                if (state === "media") {
                  if (buffer2) {
                    this.media.mediaText = buffer2.trim();
                  }
                }
                break;
              default:
                if (state === "media") {
                  buffer2 += character;
                }
                break;
            }
          }
        }
      });
      exports.CSSImportRule = CSSOM.CSSImportRule;
    }
  });

  // node_modules/.pnpm/cssom@0.5.0/node_modules/cssom/lib/CSSGroupingRule.js
  var require_CSSGroupingRule = __commonJS({
    "node_modules/.pnpm/cssom@0.5.0/node_modules/cssom/lib/CSSGroupingRule.js"(exports) {
      init_env();
      var CSSOM = {
        CSSRule: require_CSSRule().CSSRule
      };
      CSSOM.CSSGroupingRule = function CSSGroupingRule() {
        CSSOM.CSSRule.call(this);
        this.cssRules = [];
      };
      CSSOM.CSSGroupingRule.prototype = new CSSOM.CSSRule();
      CSSOM.CSSGroupingRule.prototype.constructor = CSSOM.CSSGroupingRule;
      CSSOM.CSSGroupingRule.prototype.insertRule = function insertRule(rule, index) {
        if (index < 0 || index > this.cssRules.length) {
          throw new RangeError("INDEX_SIZE_ERR");
        }
        var cssRule = CSSOM.parse(rule).cssRules[0];
        cssRule.parentRule = this;
        this.cssRules.splice(index, 0, cssRule);
        return index;
      };
      CSSOM.CSSGroupingRule.prototype.deleteRule = function deleteRule(index) {
        if (index < 0 || index >= this.cssRules.length) {
          throw new RangeError("INDEX_SIZE_ERR");
        }
        this.cssRules.splice(index, 1)[0].parentRule = null;
      };
      exports.CSSGroupingRule = CSSOM.CSSGroupingRule;
    }
  });

  // node_modules/.pnpm/cssom@0.5.0/node_modules/cssom/lib/CSSConditionRule.js
  var require_CSSConditionRule = __commonJS({
    "node_modules/.pnpm/cssom@0.5.0/node_modules/cssom/lib/CSSConditionRule.js"(exports) {
      init_env();
      var CSSOM = {
        CSSRule: require_CSSRule().CSSRule,
        CSSGroupingRule: require_CSSGroupingRule().CSSGroupingRule
      };
      CSSOM.CSSConditionRule = function CSSConditionRule() {
        CSSOM.CSSGroupingRule.call(this);
        this.cssRules = [];
      };
      CSSOM.CSSConditionRule.prototype = new CSSOM.CSSGroupingRule();
      CSSOM.CSSConditionRule.prototype.constructor = CSSOM.CSSConditionRule;
      CSSOM.CSSConditionRule.prototype.conditionText = "";
      CSSOM.CSSConditionRule.prototype.cssText = "";
      exports.CSSConditionRule = CSSOM.CSSConditionRule;
    }
  });

  // node_modules/.pnpm/cssom@0.5.0/node_modules/cssom/lib/CSSMediaRule.js
  var require_CSSMediaRule = __commonJS({
    "node_modules/.pnpm/cssom@0.5.0/node_modules/cssom/lib/CSSMediaRule.js"(exports) {
      init_env();
      var CSSOM = {
        CSSRule: require_CSSRule().CSSRule,
        CSSGroupingRule: require_CSSGroupingRule().CSSGroupingRule,
        CSSConditionRule: require_CSSConditionRule().CSSConditionRule,
        MediaList: require_MediaList().MediaList
      };
      CSSOM.CSSMediaRule = function CSSMediaRule() {
        CSSOM.CSSConditionRule.call(this);
        this.media = new CSSOM.MediaList();
      };
      CSSOM.CSSMediaRule.prototype = new CSSOM.CSSConditionRule();
      CSSOM.CSSMediaRule.prototype.constructor = CSSOM.CSSMediaRule;
      CSSOM.CSSMediaRule.prototype.type = 4;
      Object.defineProperties(CSSOM.CSSMediaRule.prototype, {
        "conditionText": {
          get: function() {
            return this.media.mediaText;
          },
          set: function(value) {
            this.media.mediaText = value;
          },
          configurable: true,
          enumerable: true
        },
        "cssText": {
          get: function() {
            var cssTexts = [];
            for (var i = 0, length = this.cssRules.length; i < length; i++) {
              cssTexts.push(this.cssRules[i].cssText);
            }
            return "@media " + this.media.mediaText + " {" + cssTexts.join("") + "}";
          },
          configurable: true,
          enumerable: true
        }
      });
      exports.CSSMediaRule = CSSOM.CSSMediaRule;
    }
  });

  // node_modules/.pnpm/cssom@0.5.0/node_modules/cssom/lib/CSSSupportsRule.js
  var require_CSSSupportsRule = __commonJS({
    "node_modules/.pnpm/cssom@0.5.0/node_modules/cssom/lib/CSSSupportsRule.js"(exports) {
      init_env();
      var CSSOM = {
        CSSRule: require_CSSRule().CSSRule,
        CSSGroupingRule: require_CSSGroupingRule().CSSGroupingRule,
        CSSConditionRule: require_CSSConditionRule().CSSConditionRule
      };
      CSSOM.CSSSupportsRule = function CSSSupportsRule() {
        CSSOM.CSSConditionRule.call(this);
      };
      CSSOM.CSSSupportsRule.prototype = new CSSOM.CSSConditionRule();
      CSSOM.CSSSupportsRule.prototype.constructor = CSSOM.CSSSupportsRule;
      CSSOM.CSSSupportsRule.prototype.type = 12;
      Object.defineProperty(CSSOM.CSSSupportsRule.prototype, "cssText", {
        get: function() {
          var cssTexts = [];
          for (var i = 0, length = this.cssRules.length; i < length; i++) {
            cssTexts.push(this.cssRules[i].cssText);
          }
          return "@supports " + this.conditionText + " {" + cssTexts.join("") + "}";
        }
      });
      exports.CSSSupportsRule = CSSOM.CSSSupportsRule;
    }
  });

  // node_modules/.pnpm/cssom@0.5.0/node_modules/cssom/lib/CSSFontFaceRule.js
  var require_CSSFontFaceRule = __commonJS({
    "node_modules/.pnpm/cssom@0.5.0/node_modules/cssom/lib/CSSFontFaceRule.js"(exports) {
      init_env();
      var CSSOM = {
        CSSStyleDeclaration: require_CSSStyleDeclaration().CSSStyleDeclaration,
        CSSRule: require_CSSRule().CSSRule
      };
      CSSOM.CSSFontFaceRule = function CSSFontFaceRule() {
        CSSOM.CSSRule.call(this);
        this.style = new CSSOM.CSSStyleDeclaration();
        this.style.parentRule = this;
      };
      CSSOM.CSSFontFaceRule.prototype = new CSSOM.CSSRule();
      CSSOM.CSSFontFaceRule.prototype.constructor = CSSOM.CSSFontFaceRule;
      CSSOM.CSSFontFaceRule.prototype.type = 5;
      Object.defineProperty(CSSOM.CSSFontFaceRule.prototype, "cssText", {
        get: function() {
          return "@font-face {" + this.style.cssText + "}";
        }
      });
      exports.CSSFontFaceRule = CSSOM.CSSFontFaceRule;
    }
  });

  // node_modules/.pnpm/cssom@0.5.0/node_modules/cssom/lib/CSSHostRule.js
  var require_CSSHostRule = __commonJS({
    "node_modules/.pnpm/cssom@0.5.0/node_modules/cssom/lib/CSSHostRule.js"(exports) {
      init_env();
      var CSSOM = {
        CSSRule: require_CSSRule().CSSRule
      };
      CSSOM.CSSHostRule = function CSSHostRule() {
        CSSOM.CSSRule.call(this);
        this.cssRules = [];
      };
      CSSOM.CSSHostRule.prototype = new CSSOM.CSSRule();
      CSSOM.CSSHostRule.prototype.constructor = CSSOM.CSSHostRule;
      CSSOM.CSSHostRule.prototype.type = 1001;
      Object.defineProperty(CSSOM.CSSHostRule.prototype, "cssText", {
        get: function() {
          var cssTexts = [];
          for (var i = 0, length = this.cssRules.length; i < length; i++) {
            cssTexts.push(this.cssRules[i].cssText);
          }
          return "@host {" + cssTexts.join("") + "}";
        }
      });
      exports.CSSHostRule = CSSOM.CSSHostRule;
    }
  });

  // node_modules/.pnpm/cssom@0.5.0/node_modules/cssom/lib/CSSKeyframeRule.js
  var require_CSSKeyframeRule = __commonJS({
    "node_modules/.pnpm/cssom@0.5.0/node_modules/cssom/lib/CSSKeyframeRule.js"(exports) {
      init_env();
      var CSSOM = {
        CSSRule: require_CSSRule().CSSRule,
        CSSStyleDeclaration: require_CSSStyleDeclaration().CSSStyleDeclaration
      };
      CSSOM.CSSKeyframeRule = function CSSKeyframeRule() {
        CSSOM.CSSRule.call(this);
        this.keyText = "";
        this.style = new CSSOM.CSSStyleDeclaration();
        this.style.parentRule = this;
      };
      CSSOM.CSSKeyframeRule.prototype = new CSSOM.CSSRule();
      CSSOM.CSSKeyframeRule.prototype.constructor = CSSOM.CSSKeyframeRule;
      CSSOM.CSSKeyframeRule.prototype.type = 8;
      Object.defineProperty(CSSOM.CSSKeyframeRule.prototype, "cssText", {
        get: function() {
          return this.keyText + " {" + this.style.cssText + "} ";
        }
      });
      exports.CSSKeyframeRule = CSSOM.CSSKeyframeRule;
    }
  });

  // node_modules/.pnpm/cssom@0.5.0/node_modules/cssom/lib/CSSKeyframesRule.js
  var require_CSSKeyframesRule = __commonJS({
    "node_modules/.pnpm/cssom@0.5.0/node_modules/cssom/lib/CSSKeyframesRule.js"(exports) {
      init_env();
      var CSSOM = {
        CSSRule: require_CSSRule().CSSRule
      };
      CSSOM.CSSKeyframesRule = function CSSKeyframesRule() {
        CSSOM.CSSRule.call(this);
        this.name = "";
        this.cssRules = [];
      };
      CSSOM.CSSKeyframesRule.prototype = new CSSOM.CSSRule();
      CSSOM.CSSKeyframesRule.prototype.constructor = CSSOM.CSSKeyframesRule;
      CSSOM.CSSKeyframesRule.prototype.type = 7;
      Object.defineProperty(CSSOM.CSSKeyframesRule.prototype, "cssText", {
        get: function() {
          var cssTexts = [];
          for (var i = 0, length = this.cssRules.length; i < length; i++) {
            cssTexts.push("  " + this.cssRules[i].cssText);
          }
          return "@" + (this._vendorPrefix || "") + "keyframes " + this.name + " { \n" + cssTexts.join("\n") + "\n}";
        }
      });
      exports.CSSKeyframesRule = CSSOM.CSSKeyframesRule;
    }
  });

  // node_modules/.pnpm/cssom@0.5.0/node_modules/cssom/lib/CSSValue.js
  var require_CSSValue = __commonJS({
    "node_modules/.pnpm/cssom@0.5.0/node_modules/cssom/lib/CSSValue.js"(exports) {
      init_env();
      var CSSOM = {};
      CSSOM.CSSValue = function CSSValue() {
      };
      CSSOM.CSSValue.prototype = {
        constructor: CSSOM.CSSValue,
        set cssText(text) {
          var name = this._getConstructorName();
          throw new Error('DOMException: property "cssText" of "' + name + '" is readonly and can not be replaced with "' + text + '"!');
        },
        get cssText() {
          var name = this._getConstructorName();
          throw new Error('getter "cssText" of "' + name + '" is not implemented!');
        },
        _getConstructorName: function() {
          var s = this.constructor.toString(), c2 = s.match(/function\s([^\(]+)/), name = c2[1];
          return name;
        }
      };
      exports.CSSValue = CSSOM.CSSValue;
    }
  });

  // node_modules/.pnpm/cssom@0.5.0/node_modules/cssom/lib/CSSValueExpression.js
  var require_CSSValueExpression = __commonJS({
    "node_modules/.pnpm/cssom@0.5.0/node_modules/cssom/lib/CSSValueExpression.js"(exports) {
      init_env();
      var CSSOM = {
        CSSValue: require_CSSValue().CSSValue
      };
      CSSOM.CSSValueExpression = function CSSValueExpression(token, idx) {
        this._token = token;
        this._idx = idx;
      };
      CSSOM.CSSValueExpression.prototype = new CSSOM.CSSValue();
      CSSOM.CSSValueExpression.prototype.constructor = CSSOM.CSSValueExpression;
      CSSOM.CSSValueExpression.prototype.parse = function() {
        var token = this._token, idx = this._idx;
        var character = "", expression = "", error = "", info, paren = [];
        for (; ; ++idx) {
          character = token.charAt(idx);
          if (character === "") {
            error = "css expression error: unfinished expression!";
            break;
          }
          switch (character) {
            case "(":
              paren.push(character);
              expression += character;
              break;
            case ")":
              paren.pop(character);
              expression += character;
              break;
            case "/":
              if (info = this._parseJSComment(token, idx)) {
                if (info.error) {
                  error = "css expression error: unfinished comment in expression!";
                } else {
                  idx = info.idx;
                }
              } else if (info = this._parseJSRexExp(token, idx)) {
                idx = info.idx;
                expression += info.text;
              } else {
                expression += character;
              }
              break;
            case "'":
            case '"':
              info = this._parseJSString(token, idx, character);
              if (info) {
                idx = info.idx;
                expression += info.text;
              } else {
                expression += character;
              }
              break;
            default:
              expression += character;
              break;
          }
          if (error) {
            break;
          }
          if (paren.length === 0) {
            break;
          }
        }
        var ret;
        if (error) {
          ret = {
            error
          };
        } else {
          ret = {
            idx,
            expression
          };
        }
        return ret;
      };
      CSSOM.CSSValueExpression.prototype._parseJSComment = function(token, idx) {
        var nextChar = token.charAt(idx + 1), text;
        if (nextChar === "/" || nextChar === "*") {
          var startIdx = idx, endIdx, commentEndChar;
          if (nextChar === "/") {
            commentEndChar = "\n";
          } else if (nextChar === "*") {
            commentEndChar = "*/";
          }
          endIdx = token.indexOf(commentEndChar, startIdx + 1 + 1);
          if (endIdx !== -1) {
            endIdx = endIdx + commentEndChar.length - 1;
            text = token.substring(idx, endIdx + 1);
            return {
              idx: endIdx,
              text
            };
          } else {
            var error = "css expression error: unfinished comment in expression!";
            return {
              error
            };
          }
        } else {
          return false;
        }
      };
      CSSOM.CSSValueExpression.prototype._parseJSString = function(token, idx, sep) {
        var endIdx = this._findMatchedIdx(token, idx, sep), text;
        if (endIdx === -1) {
          return false;
        } else {
          text = token.substring(idx, endIdx + sep.length);
          return {
            idx: endIdx,
            text
          };
        }
      };
      CSSOM.CSSValueExpression.prototype._parseJSRexExp = function(token, idx) {
        var before2 = token.substring(0, idx).replace(/\s+$/, ""), legalRegx = [
          /^$/,
          /\($/,
          /\[$/,
          /\!$/,
          /\+$/,
          /\-$/,
          /\*$/,
          /\/\s+/,
          /\%$/,
          /\=$/,
          /\>$/,
          /<$/,
          /\&$/,
          /\|$/,
          /\^$/,
          /\~$/,
          /\?$/,
          /\,$/,
          /delete$/,
          /in$/,
          /instanceof$/,
          /new$/,
          /typeof$/,
          /void$/
        ];
        var isLegal = legalRegx.some(function(reg) {
          return reg.test(before2);
        });
        if (!isLegal) {
          return false;
        } else {
          var sep = "/";
          return this._parseJSString(token, idx, sep);
        }
      };
      CSSOM.CSSValueExpression.prototype._findMatchedIdx = function(token, idx, sep) {
        var startIdx = idx, endIdx;
        var NOT_FOUND = -1;
        while (true) {
          endIdx = token.indexOf(sep, startIdx + 1);
          if (endIdx === -1) {
            endIdx = NOT_FOUND;
            break;
          } else {
            var text = token.substring(idx + 1, endIdx), matched = text.match(/\\+$/);
            if (!matched || matched[0] % 2 === 0) {
              break;
            } else {
              startIdx = endIdx;
            }
          }
        }
        var nextNewLineIdx = token.indexOf("\n", idx + 1);
        if (nextNewLineIdx < endIdx) {
          endIdx = NOT_FOUND;
        }
        return endIdx;
      };
      exports.CSSValueExpression = CSSOM.CSSValueExpression;
    }
  });

  // node_modules/.pnpm/cssom@0.5.0/node_modules/cssom/lib/MatcherList.js
  var require_MatcherList = __commonJS({
    "node_modules/.pnpm/cssom@0.5.0/node_modules/cssom/lib/MatcherList.js"(exports) {
      init_env();
      var CSSOM = {};
      CSSOM.MatcherList = function MatcherList() {
        this.length = 0;
      };
      CSSOM.MatcherList.prototype = {
        constructor: CSSOM.MatcherList,
        get matcherText() {
          return Array.prototype.join.call(this, ", ");
        },
        set matcherText(value) {
          var values = value.split(",");
          var length = this.length = values.length;
          for (var i = 0; i < length; i++) {
            this[i] = values[i].trim();
          }
        },
        appendMatcher: function(matcher) {
          if (Array.prototype.indexOf.call(this, matcher) === -1) {
            this[this.length] = matcher;
            this.length++;
          }
        },
        deleteMatcher: function(matcher) {
          var index = Array.prototype.indexOf.call(this, matcher);
          if (index !== -1) {
            Array.prototype.splice.call(this, index, 1);
          }
        }
      };
      exports.MatcherList = CSSOM.MatcherList;
    }
  });

  // node_modules/.pnpm/cssom@0.5.0/node_modules/cssom/lib/CSSDocumentRule.js
  var require_CSSDocumentRule = __commonJS({
    "node_modules/.pnpm/cssom@0.5.0/node_modules/cssom/lib/CSSDocumentRule.js"(exports) {
      init_env();
      var CSSOM = {
        CSSRule: require_CSSRule().CSSRule,
        MatcherList: require_MatcherList().MatcherList
      };
      CSSOM.CSSDocumentRule = function CSSDocumentRule() {
        CSSOM.CSSRule.call(this);
        this.matcher = new CSSOM.MatcherList();
        this.cssRules = [];
      };
      CSSOM.CSSDocumentRule.prototype = new CSSOM.CSSRule();
      CSSOM.CSSDocumentRule.prototype.constructor = CSSOM.CSSDocumentRule;
      CSSOM.CSSDocumentRule.prototype.type = 10;
      Object.defineProperty(CSSOM.CSSDocumentRule.prototype, "cssText", {
        get: function() {
          var cssTexts = [];
          for (var i = 0, length = this.cssRules.length; i < length; i++) {
            cssTexts.push(this.cssRules[i].cssText);
          }
          return "@-moz-document " + this.matcher.matcherText + " {" + cssTexts.join("") + "}";
        }
      });
      exports.CSSDocumentRule = CSSOM.CSSDocumentRule;
    }
  });

  // node_modules/.pnpm/cssom@0.5.0/node_modules/cssom/lib/parse.js
  var require_parse3 = __commonJS({
    "node_modules/.pnpm/cssom@0.5.0/node_modules/cssom/lib/parse.js"(exports) {
      init_env();
      var CSSOM = {};
      CSSOM.parse = function parse4(token) {
        var i = 0;
        var state = "before-selector";
        var index;
        var buffer2 = "";
        var valueParenthesisDepth = 0;
        var SIGNIFICANT_WHITESPACE = {
          "selector": true,
          "value": true,
          "value-parenthesis": true,
          "atRule": true,
          "importRule-begin": true,
          "importRule": true,
          "atBlock": true,
          "conditionBlock": true,
          "documentRule-begin": true
        };
        var styleSheet = new CSSOM.CSSStyleSheet();
        var currentScope = styleSheet;
        var parentRule;
        var ancestorRules = [];
        var hasAncestors = false;
        var prevScope;
        var name, priority = "", styleRule, mediaRule, supportsRule, importRule, fontFaceRule, keyframesRule, documentRule, hostRule;
        var atKeyframesRegExp = /@(-(?:\w+-)+)?keyframes/g;
        var parseError = function(message) {
          var lines = token.substring(0, i).split("\n");
          var lineCount = lines.length;
          var charCount = lines.pop().length + 1;
          var error = new Error(message + " (line " + lineCount + ", char " + charCount + ")");
          error.line = lineCount;
          error["char"] = charCount;
          error.styleSheet = styleSheet;
          throw error;
        };
        for (var character; character = token.charAt(i); i++) {
          switch (character) {
            case " ":
            case "	":
            case "\r":
            case "\n":
            case "\f":
              if (SIGNIFICANT_WHITESPACE[state]) {
                buffer2 += character;
              }
              break;
            case '"':
              index = i + 1;
              do {
                index = token.indexOf('"', index) + 1;
                if (!index) {
                  parseError('Unmatched "');
                }
              } while (token[index - 2] === "\\");
              buffer2 += token.slice(i, index);
              i = index - 1;
              switch (state) {
                case "before-value":
                  state = "value";
                  break;
                case "importRule-begin":
                  state = "importRule";
                  break;
              }
              break;
            case "'":
              index = i + 1;
              do {
                index = token.indexOf("'", index) + 1;
                if (!index) {
                  parseError("Unmatched '");
                }
              } while (token[index - 2] === "\\");
              buffer2 += token.slice(i, index);
              i = index - 1;
              switch (state) {
                case "before-value":
                  state = "value";
                  break;
                case "importRule-begin":
                  state = "importRule";
                  break;
              }
              break;
            case "/":
              if (token.charAt(i + 1) === "*") {
                i += 2;
                index = token.indexOf("*/", i);
                if (index === -1) {
                  parseError("Missing */");
                } else {
                  i = index + 1;
                }
              } else {
                buffer2 += character;
              }
              if (state === "importRule-begin") {
                buffer2 += " ";
                state = "importRule";
              }
              break;
            case "@":
              if (token.indexOf("@-moz-document", i) === i) {
                state = "documentRule-begin";
                documentRule = new CSSOM.CSSDocumentRule();
                documentRule.__starts = i;
                i += "-moz-document".length;
                buffer2 = "";
                break;
              } else if (token.indexOf("@media", i) === i) {
                state = "atBlock";
                mediaRule = new CSSOM.CSSMediaRule();
                mediaRule.__starts = i;
                i += "media".length;
                buffer2 = "";
                break;
              } else if (token.indexOf("@supports", i) === i) {
                state = "conditionBlock";
                supportsRule = new CSSOM.CSSSupportsRule();
                supportsRule.__starts = i;
                i += "supports".length;
                buffer2 = "";
                break;
              } else if (token.indexOf("@host", i) === i) {
                state = "hostRule-begin";
                i += "host".length;
                hostRule = new CSSOM.CSSHostRule();
                hostRule.__starts = i;
                buffer2 = "";
                break;
              } else if (token.indexOf("@import", i) === i) {
                state = "importRule-begin";
                i += "import".length;
                buffer2 += "@import";
                break;
              } else if (token.indexOf("@font-face", i) === i) {
                state = "fontFaceRule-begin";
                i += "font-face".length;
                fontFaceRule = new CSSOM.CSSFontFaceRule();
                fontFaceRule.__starts = i;
                buffer2 = "";
                break;
              } else {
                atKeyframesRegExp.lastIndex = i;
                var matchKeyframes = atKeyframesRegExp.exec(token);
                if (matchKeyframes && matchKeyframes.index === i) {
                  state = "keyframesRule-begin";
                  keyframesRule = new CSSOM.CSSKeyframesRule();
                  keyframesRule.__starts = i;
                  keyframesRule._vendorPrefix = matchKeyframes[1];
                  i += matchKeyframes[0].length - 1;
                  buffer2 = "";
                  break;
                } else if (state === "selector") {
                  state = "atRule";
                }
              }
              buffer2 += character;
              break;
            case "{":
              if (state === "selector" || state === "atRule") {
                styleRule.selectorText = buffer2.trim();
                styleRule.style.__starts = i;
                buffer2 = "";
                state = "before-name";
              } else if (state === "atBlock") {
                mediaRule.media.mediaText = buffer2.trim();
                if (parentRule) {
                  ancestorRules.push(parentRule);
                }
                currentScope = parentRule = mediaRule;
                mediaRule.parentStyleSheet = styleSheet;
                buffer2 = "";
                state = "before-selector";
              } else if (state === "conditionBlock") {
                supportsRule.conditionText = buffer2.trim();
                if (parentRule) {
                  ancestorRules.push(parentRule);
                }
                currentScope = parentRule = supportsRule;
                supportsRule.parentStyleSheet = styleSheet;
                buffer2 = "";
                state = "before-selector";
              } else if (state === "hostRule-begin") {
                if (parentRule) {
                  ancestorRules.push(parentRule);
                }
                currentScope = parentRule = hostRule;
                hostRule.parentStyleSheet = styleSheet;
                buffer2 = "";
                state = "before-selector";
              } else if (state === "fontFaceRule-begin") {
                if (parentRule) {
                  fontFaceRule.parentRule = parentRule;
                }
                fontFaceRule.parentStyleSheet = styleSheet;
                styleRule = fontFaceRule;
                buffer2 = "";
                state = "before-name";
              } else if (state === "keyframesRule-begin") {
                keyframesRule.name = buffer2.trim();
                if (parentRule) {
                  ancestorRules.push(parentRule);
                  keyframesRule.parentRule = parentRule;
                }
                keyframesRule.parentStyleSheet = styleSheet;
                currentScope = parentRule = keyframesRule;
                buffer2 = "";
                state = "keyframeRule-begin";
              } else if (state === "keyframeRule-begin") {
                styleRule = new CSSOM.CSSKeyframeRule();
                styleRule.keyText = buffer2.trim();
                styleRule.__starts = i;
                buffer2 = "";
                state = "before-name";
              } else if (state === "documentRule-begin") {
                documentRule.matcher.matcherText = buffer2.trim();
                if (parentRule) {
                  ancestorRules.push(parentRule);
                  documentRule.parentRule = parentRule;
                }
                currentScope = parentRule = documentRule;
                documentRule.parentStyleSheet = styleSheet;
                buffer2 = "";
                state = "before-selector";
              }
              break;
            case ":":
              if (state === "name") {
                name = buffer2.trim();
                buffer2 = "";
                state = "before-value";
              } else {
                buffer2 += character;
              }
              break;
            case "(":
              if (state === "value") {
                if (buffer2.trim() === "expression") {
                  var info = new CSSOM.CSSValueExpression(token, i).parse();
                  if (info.error) {
                    parseError(info.error);
                  } else {
                    buffer2 += info.expression;
                    i = info.idx;
                  }
                } else {
                  state = "value-parenthesis";
                  valueParenthesisDepth = 1;
                  buffer2 += character;
                }
              } else if (state === "value-parenthesis") {
                valueParenthesisDepth++;
                buffer2 += character;
              } else {
                buffer2 += character;
              }
              break;
            case ")":
              if (state === "value-parenthesis") {
                valueParenthesisDepth--;
                if (valueParenthesisDepth === 0)
                  state = "value";
              }
              buffer2 += character;
              break;
            case "!":
              if (state === "value" && token.indexOf("!important", i) === i) {
                priority = "important";
                i += "important".length;
              } else {
                buffer2 += character;
              }
              break;
            case ";":
              switch (state) {
                case "value":
                  styleRule.style.setProperty(name, buffer2.trim(), priority);
                  priority = "";
                  buffer2 = "";
                  state = "before-name";
                  break;
                case "atRule":
                  buffer2 = "";
                  state = "before-selector";
                  break;
                case "importRule":
                  importRule = new CSSOM.CSSImportRule();
                  importRule.parentStyleSheet = importRule.styleSheet.parentStyleSheet = styleSheet;
                  importRule.cssText = buffer2 + character;
                  styleSheet.cssRules.push(importRule);
                  buffer2 = "";
                  state = "before-selector";
                  break;
                default:
                  buffer2 += character;
                  break;
              }
              break;
            case "}":
              switch (state) {
                case "value":
                  styleRule.style.setProperty(name, buffer2.trim(), priority);
                  priority = "";
                case "before-name":
                case "name":
                  styleRule.__ends = i + 1;
                  if (parentRule) {
                    styleRule.parentRule = parentRule;
                  }
                  styleRule.parentStyleSheet = styleSheet;
                  currentScope.cssRules.push(styleRule);
                  buffer2 = "";
                  if (currentScope.constructor === CSSOM.CSSKeyframesRule) {
                    state = "keyframeRule-begin";
                  } else {
                    state = "before-selector";
                  }
                  break;
                case "keyframeRule-begin":
                case "before-selector":
                case "selector":
                  if (!parentRule) {
                    parseError("Unexpected }");
                  }
                  hasAncestors = ancestorRules.length > 0;
                  while (ancestorRules.length > 0) {
                    parentRule = ancestorRules.pop();
                    if (parentRule.constructor.name === "CSSMediaRule" || parentRule.constructor.name === "CSSSupportsRule") {
                      prevScope = currentScope;
                      currentScope = parentRule;
                      currentScope.cssRules.push(prevScope);
                      break;
                    }
                    if (ancestorRules.length === 0) {
                      hasAncestors = false;
                    }
                  }
                  if (!hasAncestors) {
                    currentScope.__ends = i + 1;
                    styleSheet.cssRules.push(currentScope);
                    currentScope = styleSheet;
                    parentRule = null;
                  }
                  buffer2 = "";
                  state = "before-selector";
                  break;
              }
              break;
            default:
              switch (state) {
                case "before-selector":
                  state = "selector";
                  styleRule = new CSSOM.CSSStyleRule();
                  styleRule.__starts = i;
                  break;
                case "before-name":
                  state = "name";
                  break;
                case "before-value":
                  state = "value";
                  break;
                case "importRule-begin":
                  state = "importRule";
                  break;
              }
              buffer2 += character;
              break;
          }
        }
        return styleSheet;
      };
      exports.parse = CSSOM.parse;
      CSSOM.CSSStyleSheet = require_CSSStyleSheet().CSSStyleSheet;
      CSSOM.CSSStyleRule = require_CSSStyleRule().CSSStyleRule;
      CSSOM.CSSImportRule = require_CSSImportRule().CSSImportRule;
      CSSOM.CSSGroupingRule = require_CSSGroupingRule().CSSGroupingRule;
      CSSOM.CSSMediaRule = require_CSSMediaRule().CSSMediaRule;
      CSSOM.CSSConditionRule = require_CSSConditionRule().CSSConditionRule;
      CSSOM.CSSSupportsRule = require_CSSSupportsRule().CSSSupportsRule;
      CSSOM.CSSFontFaceRule = require_CSSFontFaceRule().CSSFontFaceRule;
      CSSOM.CSSHostRule = require_CSSHostRule().CSSHostRule;
      CSSOM.CSSStyleDeclaration = require_CSSStyleDeclaration().CSSStyleDeclaration;
      CSSOM.CSSKeyframeRule = require_CSSKeyframeRule().CSSKeyframeRule;
      CSSOM.CSSKeyframesRule = require_CSSKeyframesRule().CSSKeyframesRule;
      CSSOM.CSSValueExpression = require_CSSValueExpression().CSSValueExpression;
      CSSOM.CSSDocumentRule = require_CSSDocumentRule().CSSDocumentRule;
    }
  });

  // node_modules/.pnpm/cssom@0.5.0/node_modules/cssom/lib/CSSStyleDeclaration.js
  var require_CSSStyleDeclaration = __commonJS({
    "node_modules/.pnpm/cssom@0.5.0/node_modules/cssom/lib/CSSStyleDeclaration.js"(exports) {
      init_env();
      var CSSOM = {};
      CSSOM.CSSStyleDeclaration = function CSSStyleDeclaration2() {
        this.length = 0;
        this.parentRule = null;
        this._importants = {};
      };
      CSSOM.CSSStyleDeclaration.prototype = {
        constructor: CSSOM.CSSStyleDeclaration,
        getPropertyValue: function(name) {
          return this[name] || "";
        },
        setProperty: function(name, value, priority) {
          if (this[name]) {
            var index = Array.prototype.indexOf.call(this, name);
            if (index < 0) {
              this[this.length] = name;
              this.length++;
            }
          } else {
            this[this.length] = name;
            this.length++;
          }
          this[name] = value + "";
          this._importants[name] = priority;
        },
        removeProperty: function(name) {
          if (!(name in this)) {
            return "";
          }
          var index = Array.prototype.indexOf.call(this, name);
          if (index < 0) {
            return "";
          }
          var prevValue = this[name];
          this[name] = "";
          Array.prototype.splice.call(this, index, 1);
          return prevValue;
        },
        getPropertyCSSValue: function() {
        },
        getPropertyPriority: function(name) {
          return this._importants[name] || "";
        },
        getPropertyShorthand: function() {
        },
        isPropertyImplicit: function() {
        },
        get cssText() {
          var properties = [];
          for (var i = 0, length = this.length; i < length; ++i) {
            var name = this[i];
            var value = this.getPropertyValue(name);
            var priority = this.getPropertyPriority(name);
            if (priority) {
              priority = " !" + priority;
            }
            properties[i] = name + ": " + value + priority + ";";
          }
          return properties.join(" ");
        },
        set cssText(text) {
          var i, name;
          for (i = this.length; i--; ) {
            name = this[i];
            this[name] = "";
          }
          Array.prototype.splice.call(this, 0, this.length);
          this._importants = {};
          var dummyRule = CSSOM.parse("#bogus{" + text + "}").cssRules[0].style;
          var length = dummyRule.length;
          for (i = 0; i < length; ++i) {
            name = dummyRule[i];
            this.setProperty(dummyRule[i], dummyRule.getPropertyValue(name), dummyRule.getPropertyPriority(name));
          }
        }
      };
      exports.CSSStyleDeclaration = CSSOM.CSSStyleDeclaration;
      CSSOM.parse = require_parse3().parse;
    }
  });

  // node_modules/.pnpm/cssom@0.5.0/node_modules/cssom/lib/clone.js
  var require_clone = __commonJS({
    "node_modules/.pnpm/cssom@0.5.0/node_modules/cssom/lib/clone.js"(exports) {
      init_env();
      var CSSOM = {
        CSSStyleSheet: require_CSSStyleSheet().CSSStyleSheet,
        CSSRule: require_CSSRule().CSSRule,
        CSSStyleRule: require_CSSStyleRule().CSSStyleRule,
        CSSGroupingRule: require_CSSGroupingRule().CSSGroupingRule,
        CSSConditionRule: require_CSSConditionRule().CSSConditionRule,
        CSSMediaRule: require_CSSMediaRule().CSSMediaRule,
        CSSSupportsRule: require_CSSSupportsRule().CSSSupportsRule,
        CSSStyleDeclaration: require_CSSStyleDeclaration().CSSStyleDeclaration,
        CSSKeyframeRule: require_CSSKeyframeRule().CSSKeyframeRule,
        CSSKeyframesRule: require_CSSKeyframesRule().CSSKeyframesRule
      };
      CSSOM.clone = function clone(stylesheet) {
        var cloned = new CSSOM.CSSStyleSheet();
        var rules = stylesheet.cssRules;
        if (!rules) {
          return cloned;
        }
        for (var i = 0, rulesLength = rules.length; i < rulesLength; i++) {
          var rule = rules[i];
          var ruleClone = cloned.cssRules[i] = new rule.constructor();
          var style = rule.style;
          if (style) {
            var styleClone = ruleClone.style = new CSSOM.CSSStyleDeclaration();
            for (var j = 0, styleLength = style.length; j < styleLength; j++) {
              var name = styleClone[j] = style[j];
              styleClone[name] = style[name];
              styleClone._importants[name] = style.getPropertyPriority(name);
            }
            styleClone.length = style.length;
          }
          if (rule.hasOwnProperty("keyText")) {
            ruleClone.keyText = rule.keyText;
          }
          if (rule.hasOwnProperty("selectorText")) {
            ruleClone.selectorText = rule.selectorText;
          }
          if (rule.hasOwnProperty("mediaText")) {
            ruleClone.mediaText = rule.mediaText;
          }
          if (rule.hasOwnProperty("conditionText")) {
            ruleClone.conditionText = rule.conditionText;
          }
          if (rule.hasOwnProperty("cssRules")) {
            ruleClone.cssRules = clone(rule).cssRules;
          }
        }
        return cloned;
      };
      exports.clone = CSSOM.clone;
    }
  });

  // node_modules/.pnpm/cssom@0.5.0/node_modules/cssom/lib/index.js
  var require_lib10 = __commonJS({
    "node_modules/.pnpm/cssom@0.5.0/node_modules/cssom/lib/index.js"(exports) {
      "use strict";
      init_env();
      exports.CSSStyleDeclaration = require_CSSStyleDeclaration().CSSStyleDeclaration;
      exports.CSSRule = require_CSSRule().CSSRule;
      exports.CSSGroupingRule = require_CSSGroupingRule().CSSGroupingRule;
      exports.CSSConditionRule = require_CSSConditionRule().CSSConditionRule;
      exports.CSSStyleRule = require_CSSStyleRule().CSSStyleRule;
      exports.MediaList = require_MediaList().MediaList;
      exports.CSSMediaRule = require_CSSMediaRule().CSSMediaRule;
      exports.CSSSupportsRule = require_CSSSupportsRule().CSSSupportsRule;
      exports.CSSImportRule = require_CSSImportRule().CSSImportRule;
      exports.CSSFontFaceRule = require_CSSFontFaceRule().CSSFontFaceRule;
      exports.CSSHostRule = require_CSSHostRule().CSSHostRule;
      exports.StyleSheet = require_StyleSheet().StyleSheet;
      exports.CSSStyleSheet = require_CSSStyleSheet().CSSStyleSheet;
      exports.CSSKeyframesRule = require_CSSKeyframesRule().CSSKeyframesRule;
      exports.CSSKeyframeRule = require_CSSKeyframeRule().CSSKeyframeRule;
      exports.MatcherList = require_MatcherList().MatcherList;
      exports.CSSDocumentRule = require_CSSDocumentRule().CSSDocumentRule;
      exports.CSSValue = require_CSSValue().CSSValue;
      exports.CSSValueExpression = require_CSSValueExpression().CSSValueExpression;
      exports.parse = require_parse3().parse;
      exports.clone = require_clone().clone;
    }
  });

  // node_modules/.pnpm/linkedom@0.14.7/node_modules/linkedom/commonjs/canvas.cjs
  var require_canvas = __commonJS({
    "node_modules/.pnpm/linkedom@0.14.7/node_modules/linkedom/commonjs/canvas.cjs"(exports, module) {
      init_env();
      try {
        module.exports = __require("canvas");
      } catch (fallback) {
        class Canvas2 {
          constructor(width, height) {
            this.width = width;
            this.height = height;
          }
          getContext() {
            return null;
          }
          toDataURL() {
            return "";
          }
        }
        module.exports = {
          createCanvas: (width, height) => new Canvas2(width, height)
        };
      }
    }
  });

  // src/entry/sw.ts
  init_env();

  // node_modules/.pnpm/urlpattern-polyfill@4.0.3/node_modules/urlpattern-polyfill/dist/index.js
  init_env();
  var regexIdentifierStart = /[$_\p{ID_Start}]/u;
  var regexIdentifierPart = /[$_\u200C\u200D\p{ID_Continue}]/u;
  function isASCII(str, extended) {
    return (extended ? /^[\x00-\xFF]*$/ : /^[\x00-\x7F]*$/).test(str);
  }
  function lexer(str, lenient = false) {
    const tokens = [];
    let i = 0;
    while (i < str.length) {
      const char = str[i];
      const ErrorOrInvalid = function(msg) {
        if (!lenient)
          throw new TypeError(msg);
        tokens.push({ type: "INVALID_CHAR", index: i, value: str[i++] });
      };
      if (char === "*") {
        tokens.push({ type: "ASTERISK", index: i, value: str[i++] });
        continue;
      }
      if (char === "+" || char === "?") {
        tokens.push({ type: "MODIFIER", index: i, value: str[i++] });
        continue;
      }
      if (char === "\\") {
        tokens.push({ type: "ESCAPED_CHAR", index: i++, value: str[i++] });
        continue;
      }
      if (char === "{") {
        tokens.push({ type: "OPEN", index: i, value: str[i++] });
        continue;
      }
      if (char === "}") {
        tokens.push({ type: "CLOSE", index: i, value: str[i++] });
        continue;
      }
      if (char === ":") {
        let name = "";
        let j = i + 1;
        while (j < str.length) {
          const code2 = str.substr(j, 1);
          if (j === i + 1 && regexIdentifierStart.test(code2) || j !== i + 1 && regexIdentifierPart.test(code2)) {
            name += str[j++];
            continue;
          }
          break;
        }
        if (!name) {
          ErrorOrInvalid(`Missing parameter name at ${i}`);
          continue;
        }
        tokens.push({ type: "NAME", index: i, value: name });
        i = j;
        continue;
      }
      if (char === "(") {
        let count = 1;
        let pattern = "";
        let j = i + 1;
        let error = false;
        if (str[j] === "?") {
          ErrorOrInvalid(`Pattern cannot start with "?" at ${j}`);
          continue;
        }
        while (j < str.length) {
          if (!isASCII(str[j], false)) {
            ErrorOrInvalid(`Invalid character '${str[j]}' at ${j}.`);
            error = true;
            break;
          }
          if (str[j] === "\\") {
            pattern += str[j++] + str[j++];
            continue;
          }
          if (str[j] === ")") {
            count--;
            if (count === 0) {
              j++;
              break;
            }
          } else if (str[j] === "(") {
            count++;
            if (str[j + 1] !== "?") {
              ErrorOrInvalid(`Capturing groups are not allowed at ${j}`);
              error = true;
              break;
            }
          }
          pattern += str[j++];
        }
        if (error) {
          continue;
        }
        if (count) {
          ErrorOrInvalid(`Unbalanced pattern at ${i}`);
          continue;
        }
        if (!pattern) {
          ErrorOrInvalid(`Missing pattern at ${i}`);
          continue;
        }
        tokens.push({ type: "PATTERN", index: i, value: pattern });
        i = j;
        continue;
      }
      tokens.push({ type: "CHAR", index: i, value: str[i++] });
    }
    tokens.push({ type: "END", index: i, value: "" });
    return tokens;
  }
  function parse(str, options = {}) {
    const tokens = lexer(str);
    const { prefixes = "./" } = options;
    const defaultPattern = `[^${escapeString(options.delimiter || "/#?")}]+?`;
    const result = [];
    let key2 = 0;
    let i = 0;
    let path = "";
    let nameSet = /* @__PURE__ */ new Set();
    const tryConsume = (type) => {
      if (i < tokens.length && tokens[i].type === type)
        return tokens[i++].value;
    };
    const tryConsumeModifier = () => {
      const r2 = tryConsume("MODIFIER");
      if (r2) {
        return r2;
      }
      return tryConsume("ASTERISK");
    };
    const mustConsume = (type) => {
      const value = tryConsume(type);
      if (value !== void 0)
        return value;
      const { type: nextType, index } = tokens[i];
      throw new TypeError(`Unexpected ${nextType} at ${index}, expected ${type}`);
    };
    const consumeText = () => {
      let result2 = "";
      let value;
      while (value = tryConsume("CHAR") || tryConsume("ESCAPED_CHAR")) {
        result2 += value;
      }
      return result2;
    };
    const DefaultEncodePart = (value) => {
      return value;
    };
    const encodePart = options.encodePart || DefaultEncodePart;
    while (i < tokens.length) {
      const char = tryConsume("CHAR");
      const name = tryConsume("NAME");
      let pattern = tryConsume("PATTERN");
      if (!name && !pattern && tryConsume("ASTERISK")) {
        pattern = ".*";
      }
      if (name || pattern) {
        let prefix = char || "";
        if (prefixes.indexOf(prefix) === -1) {
          path += prefix;
          prefix = "";
        }
        if (path) {
          result.push(encodePart(path));
          path = "";
        }
        const finalName = name || key2++;
        if (nameSet.has(finalName)) {
          throw new TypeError(`Duplicate name '${finalName}'.`);
        }
        nameSet.add(finalName);
        result.push({
          name: finalName,
          prefix: encodePart(prefix),
          suffix: "",
          pattern: pattern || defaultPattern,
          modifier: tryConsumeModifier() || ""
        });
        continue;
      }
      const value = char || tryConsume("ESCAPED_CHAR");
      if (value) {
        path += value;
        continue;
      }
      const open = tryConsume("OPEN");
      if (open) {
        const prefix = consumeText();
        const name2 = tryConsume("NAME") || "";
        let pattern2 = tryConsume("PATTERN") || "";
        if (!name2 && !pattern2 && tryConsume("ASTERISK")) {
          pattern2 = ".*";
        }
        const suffix = consumeText();
        mustConsume("CLOSE");
        const modifier = tryConsumeModifier() || "";
        if (!name2 && !pattern2 && !modifier) {
          path += prefix;
          continue;
        }
        if (!name2 && !pattern2 && !prefix) {
          continue;
        }
        if (path) {
          result.push(encodePart(path));
          path = "";
        }
        result.push({
          name: name2 || (pattern2 ? key2++ : ""),
          pattern: name2 && !pattern2 ? defaultPattern : pattern2,
          prefix: encodePart(prefix),
          suffix: encodePart(suffix),
          modifier
        });
        continue;
      }
      if (path) {
        result.push(encodePart(path));
        path = "";
      }
      mustConsume("END");
    }
    return result;
  }
  function escapeString(str) {
    return str.replace(/([.+*?^${}()[\]|/\\])/g, "\\$1");
  }
  function flags(options) {
    return options && options.sensitive ? "u" : "ui";
  }
  function regexpToRegexp(path, keys2) {
    if (!keys2)
      return path;
    const groupsRegex = /\((?:\?<(.*?)>)?(?!\?)/g;
    let index = 0;
    let execResult = groupsRegex.exec(path.source);
    while (execResult) {
      keys2.push({
        name: execResult[1] || index++,
        prefix: "",
        suffix: "",
        modifier: "",
        pattern: ""
      });
      execResult = groupsRegex.exec(path.source);
    }
    return path;
  }
  function arrayToRegexp(paths, keys2, options) {
    const parts = paths.map((path) => pathToRegexp(path, keys2, options).source);
    return new RegExp(`(?:${parts.join("|")})`, flags(options));
  }
  function stringToRegexp(path, keys2, options) {
    return tokensToRegexp(parse(path, options), keys2, options);
  }
  function tokensToRegexp(tokens, keys2, options = {}) {
    const {
      strict = false,
      start = true,
      end = true,
      encode: encode2 = (x4) => x4
    } = options;
    const endsWith = `[${escapeString(options.endsWith || "")}]|$`;
    const delimiter = `[${escapeString(options.delimiter || "/#?")}]`;
    let route = start ? "^" : "";
    for (const token of tokens) {
      if (typeof token === "string") {
        route += escapeString(encode2(token));
      } else {
        const prefix = escapeString(encode2(token.prefix));
        const suffix = escapeString(encode2(token.suffix));
        if (token.pattern) {
          if (keys2)
            keys2.push(token);
          if (prefix || suffix) {
            if (token.modifier === "+" || token.modifier === "*") {
              const mod = token.modifier === "*" ? "?" : "";
              route += `(?:${prefix}((?:${token.pattern})(?:${suffix}${prefix}(?:${token.pattern}))*)${suffix})${mod}`;
            } else {
              route += `(?:${prefix}(${token.pattern})${suffix})${token.modifier}`;
            }
          } else {
            if (token.modifier === "+" || token.modifier === "*") {
              route += `((?:${token.pattern})${token.modifier})`;
            } else {
              route += `(${token.pattern})${token.modifier}`;
            }
          }
        } else {
          route += `(?:${prefix}${suffix})${token.modifier}`;
        }
      }
    }
    if (end) {
      if (!strict)
        route += `${delimiter}?`;
      route += !options.endsWith ? "$" : `(?=${endsWith})`;
    } else {
      const endToken = tokens[tokens.length - 1];
      const isEndDelimited = typeof endToken === "string" ? delimiter.indexOf(endToken[endToken.length - 1]) > -1 : endToken === void 0;
      if (!strict) {
        route += `(?:${delimiter}(?=${endsWith}))?`;
      }
      if (!isEndDelimited) {
        route += `(?=${delimiter}|${endsWith})`;
      }
    }
    return new RegExp(route, flags(options));
  }
  function pathToRegexp(path, keys2, options) {
    if (path instanceof RegExp)
      return regexpToRegexp(path, keys2);
    if (Array.isArray(path))
      return arrayToRegexp(path, keys2, options);
    return stringToRegexp(path, keys2, options);
  }
  var DEFAULT_OPTIONS = {
    delimiter: "",
    prefixes: "",
    sensitive: true,
    strict: true
  };
  var HOSTNAME_OPTIONS = {
    delimiter: ".",
    prefixes: "",
    sensitive: true,
    strict: true
  };
  var PATHNAME_OPTIONS = {
    delimiter: "/",
    prefixes: "/",
    sensitive: true,
    strict: true
  };
  function isAbsolutePathname(pathname, isPattern) {
    if (!pathname.length) {
      return false;
    }
    if (pathname[0] === "/") {
      return true;
    }
    if (!isPattern) {
      return false;
    }
    if (pathname.length < 2) {
      return false;
    }
    if ((pathname[0] == "\\" || pathname[0] == "{") && pathname[1] == "/") {
      return true;
    }
    return false;
  }
  function maybeStripPrefix(value, prefix) {
    if (value.startsWith(prefix)) {
      return value.substring(prefix.length, value.length);
    }
    return value;
  }
  function maybeStripSuffix(value, suffix) {
    if (value.endsWith(suffix)) {
      return value.substr(0, value.length - suffix.length);
    }
    return value;
  }
  function treatAsIPv6Hostname(value) {
    if (!value || value.length < 2) {
      return false;
    }
    if (value[0] === "[") {
      return true;
    }
    if ((value[0] === "\\" || value[0] === "{") && value[1] === "[") {
      return true;
    }
    return false;
  }
  var SPECIAL_SCHEMES = [
    "ftp",
    "file",
    "http",
    "https",
    "ws",
    "wss"
  ];
  function isSpecialScheme(protocol_regexp) {
    if (!protocol_regexp) {
      return true;
    }
    for (const scheme of SPECIAL_SCHEMES) {
      if (protocol_regexp.test(scheme)) {
        return true;
      }
    }
    return false;
  }
  function canonicalizeHash(hash, isPattern) {
    hash = maybeStripPrefix(hash, "#");
    if (isPattern || hash === "") {
      return hash;
    }
    const url = new URL("https://example.com");
    url.hash = hash;
    return url.hash ? url.hash.substring(1, url.hash.length) : "";
  }
  function canonicalizeSearch(search, isPattern) {
    search = maybeStripPrefix(search, "?");
    if (isPattern || search === "") {
      return search;
    }
    const url = new URL("https://example.com");
    url.search = search;
    return url.search ? url.search.substring(1, url.search.length) : "";
  }
  function canonicalizeHostname(hostname, isPattern) {
    if (isPattern || hostname === "") {
      return hostname;
    }
    if (treatAsIPv6Hostname(hostname)) {
      return ipv6HostnameEncodeCallback(hostname);
    } else {
      return hostnameEncodeCallback(hostname);
    }
  }
  function canonicalizePassword(password, isPattern) {
    if (isPattern || password === "") {
      return password;
    }
    const url = new URL("https://example.com");
    url.password = password;
    return url.password;
  }
  function canonicalizeUsername(username, isPattern) {
    if (isPattern || username === "") {
      return username;
    }
    const url = new URL("https://example.com");
    url.username = username;
    return url.username;
  }
  function canonicalizePathname(pathname, protocol, isPattern) {
    if (isPattern || pathname === "") {
      return pathname;
    }
    if (protocol && !SPECIAL_SCHEMES.includes(protocol)) {
      const url = new URL(`${protocol}:${pathname}`);
      return url.pathname;
    }
    const leadingSlash = pathname[0] == "/";
    pathname = new URL(!leadingSlash ? "/-" + pathname : pathname, "https://example.com").pathname;
    if (!leadingSlash) {
      pathname = pathname.substring(2, pathname.length);
    }
    return pathname;
  }
  function canonicalizePort(port, protocol, isPattern) {
    if (defaultPortForProtocol(protocol) === port) {
      port = "";
    }
    if (isPattern || port === "") {
      return port;
    }
    return portEncodeCallback(port);
  }
  function canonicalizeProtocol(protocol, isPattern) {
    protocol = maybeStripSuffix(protocol, ":");
    if (isPattern || protocol === "") {
      return protocol;
    }
    return protocolEncodeCallback(protocol);
  }
  function defaultPortForProtocol(protocol) {
    switch (protocol) {
      case "ws":
      case "http":
        return "80";
      case "wws":
      case "https":
        return "443";
      case "ftp":
        return "21";
      default:
        return "";
    }
  }
  function protocolEncodeCallback(input) {
    if (input === "") {
      return input;
    }
    if (/^[-+.A-Za-z0-9]*$/.test(input))
      return input.toLowerCase();
    throw new TypeError(`Invalid protocol '${input}'.`);
  }
  function usernameEncodeCallback(input) {
    if (input === "") {
      return input;
    }
    const url = new URL("https://example.com");
    url.username = input;
    return url.username;
  }
  function passwordEncodeCallback(input) {
    if (input === "") {
      return input;
    }
    const url = new URL("https://example.com");
    url.password = input;
    return url.password;
  }
  function hostnameEncodeCallback(input) {
    if (input === "") {
      return input;
    }
    if (/[\t\n\r #%/:<>?@[\]^\\|]/g.test(input)) {
      throw new TypeError(`Invalid hostname '${input}'`);
    }
    const url = new URL("https://example.com");
    url.hostname = input;
    return url.hostname;
  }
  function ipv6HostnameEncodeCallback(input) {
    if (input === "") {
      return input;
    }
    if (/[^0-9a-fA-F[\]:]/g.test(input)) {
      throw new TypeError(`Invalid IPv6 hostname '${input}'`);
    }
    return input.toLowerCase();
  }
  function portEncodeCallback(input) {
    if (input === "") {
      return input;
    }
    if (/^[0-9]*$/.test(input) && parseInt(input) <= 65535) {
      return input;
    }
    throw new TypeError(`Invalid port '${input}'.`);
  }
  function standardURLPathnameEncodeCallback(input) {
    if (input === "") {
      return input;
    }
    const url = new URL("https://example.com");
    url.pathname = input[0] !== "/" ? "/-" + input : input;
    if (input[0] !== "/") {
      return url.pathname.substring(2, url.pathname.length);
    }
    return url.pathname;
  }
  function pathURLPathnameEncodeCallback(input) {
    if (input === "") {
      return input;
    }
    const url = new URL(`data:${input}`);
    return url.pathname;
  }
  function searchEncodeCallback(input) {
    if (input === "") {
      return input;
    }
    const url = new URL("https://example.com");
    url.search = input;
    return url.search.substring(1, url.search.length);
  }
  function hashEncodeCallback(input) {
    if (input === "") {
      return input;
    }
    const url = new URL("https://example.com");
    url.hash = input;
    return url.hash.substring(1, url.hash.length);
  }
  var Parser = class {
    constructor(input) {
      this.tokenList = [];
      this.internalResult = {};
      this.tokenIndex = 0;
      this.tokenIncrement = 1;
      this.componentStart = 0;
      this.state = 0;
      this.groupDepth = 0;
      this.hostnameIPv6BracketDepth = 0;
      this.shouldTreatAsStandardURL = false;
      this.input = input;
    }
    get result() {
      return this.internalResult;
    }
    parse() {
      this.tokenList = lexer(this.input, true);
      for (; this.tokenIndex < this.tokenList.length; this.tokenIndex += this.tokenIncrement) {
        this.tokenIncrement = 1;
        if (this.tokenList[this.tokenIndex].type === "END") {
          if (this.state === 0) {
            this.rewind();
            if (this.isHashPrefix()) {
              this.changeState(9, 1);
            } else if (this.isSearchPrefix()) {
              this.changeState(8, 1);
              this.internalResult.hash = "";
            } else {
              this.changeState(7, 0);
              this.internalResult.search = "";
              this.internalResult.hash = "";
            }
            continue;
          } else if (this.state === 2) {
            this.rewindAndSetState(5);
            continue;
          }
          this.changeState(10, 0);
          break;
        }
        if (this.groupDepth > 0) {
          if (this.isGroupClose()) {
            this.groupDepth -= 1;
          } else {
            continue;
          }
        }
        if (this.isGroupOpen()) {
          this.groupDepth += 1;
          continue;
        }
        switch (this.state) {
          case 0:
            if (this.isProtocolSuffix()) {
              this.internalResult.username = "";
              this.internalResult.password = "";
              this.internalResult.hostname = "";
              this.internalResult.port = "";
              this.internalResult.pathname = "";
              this.internalResult.search = "";
              this.internalResult.hash = "";
              this.rewindAndSetState(1);
            }
            break;
          case 1:
            if (this.isProtocolSuffix()) {
              this.computeShouldTreatAsStandardURL();
              let nextState = 7;
              let skip = 1;
              if (this.shouldTreatAsStandardURL) {
                this.internalResult.pathname = "/";
              }
              if (this.nextIsAuthoritySlashes()) {
                nextState = 2;
                skip = 3;
              } else if (this.shouldTreatAsStandardURL) {
                nextState = 2;
              }
              this.changeState(nextState, skip);
            }
            break;
          case 2:
            if (this.isIdentityTerminator()) {
              this.rewindAndSetState(3);
            } else if (this.isPathnameStart() || this.isSearchPrefix() || this.isHashPrefix()) {
              this.rewindAndSetState(5);
            }
            break;
          case 3:
            if (this.isPasswordPrefix()) {
              this.changeState(4, 1);
            } else if (this.isIdentityTerminator()) {
              this.changeState(5, 1);
            }
            break;
          case 4:
            if (this.isIdentityTerminator()) {
              this.changeState(5, 1);
            }
            break;
          case 5:
            if (this.isIPv6Open()) {
              this.hostnameIPv6BracketDepth += 1;
            } else if (this.isIPv6Close()) {
              this.hostnameIPv6BracketDepth -= 1;
            }
            if (this.isPortPrefix() && !this.hostnameIPv6BracketDepth) {
              this.changeState(6, 1);
            } else if (this.isPathnameStart()) {
              this.changeState(7, 0);
            } else if (this.isSearchPrefix()) {
              this.changeState(8, 1);
            } else if (this.isHashPrefix()) {
              this.changeState(9, 1);
            }
            break;
          case 6:
            if (this.isPathnameStart()) {
              this.changeState(7, 0);
            } else if (this.isSearchPrefix()) {
              this.changeState(8, 1);
            } else if (this.isHashPrefix()) {
              this.changeState(9, 1);
            }
            break;
          case 7:
            if (this.isSearchPrefix()) {
              this.changeState(8, 1);
            } else if (this.isHashPrefix()) {
              this.changeState(9, 1);
            }
            break;
          case 8:
            if (this.isHashPrefix()) {
              this.changeState(9, 1);
            }
            break;
          case 9:
            break;
          case 10:
            break;
        }
      }
    }
    changeState(newState, skip) {
      switch (this.state) {
        case 0:
          break;
        case 1:
          this.internalResult.protocol = this.makeComponentString();
          break;
        case 2:
          break;
        case 3:
          this.internalResult.username = this.makeComponentString();
          break;
        case 4:
          this.internalResult.password = this.makeComponentString();
          break;
        case 5:
          this.internalResult.hostname = this.makeComponentString();
          break;
        case 6:
          this.internalResult.port = this.makeComponentString();
          break;
        case 7:
          this.internalResult.pathname = this.makeComponentString();
          break;
        case 8:
          this.internalResult.search = this.makeComponentString();
          break;
        case 9:
          this.internalResult.hash = this.makeComponentString();
          break;
        case 10:
          break;
      }
      this.changeStateWithoutSettingComponent(newState, skip);
    }
    changeStateWithoutSettingComponent(newState, skip) {
      this.state = newState;
      this.componentStart = this.tokenIndex + skip;
      this.tokenIndex += skip;
      this.tokenIncrement = 0;
    }
    rewind() {
      this.tokenIndex = this.componentStart;
      this.tokenIncrement = 0;
    }
    rewindAndSetState(newState) {
      this.rewind();
      this.state = newState;
    }
    safeToken(index) {
      if (index < 0) {
        index = this.tokenList.length - index;
      }
      if (index < this.tokenList.length) {
        return this.tokenList[index];
      }
      return this.tokenList[this.tokenList.length - 1];
    }
    isNonSpecialPatternChar(index, value) {
      const token = this.safeToken(index);
      return token.value === value && (token.type === "CHAR" || token.type === "ESCAPED_CHAR" || token.type === "INVALID_CHAR");
    }
    isProtocolSuffix() {
      return this.isNonSpecialPatternChar(this.tokenIndex, ":");
    }
    nextIsAuthoritySlashes() {
      return this.isNonSpecialPatternChar(this.tokenIndex + 1, "/") && this.isNonSpecialPatternChar(this.tokenIndex + 2, "/");
    }
    isIdentityTerminator() {
      return this.isNonSpecialPatternChar(this.tokenIndex, "@");
    }
    isPasswordPrefix() {
      return this.isNonSpecialPatternChar(this.tokenIndex, ":");
    }
    isPortPrefix() {
      return this.isNonSpecialPatternChar(this.tokenIndex, ":");
    }
    isPathnameStart() {
      return this.isNonSpecialPatternChar(this.tokenIndex, "/");
    }
    isSearchPrefix() {
      if (this.isNonSpecialPatternChar(this.tokenIndex, "?")) {
        return true;
      }
      if (this.tokenList[this.tokenIndex].value !== "?") {
        return false;
      }
      const previousToken = this.safeToken(this.tokenIndex - 1);
      return previousToken.type !== "NAME" && previousToken.type !== "PATTERN" && previousToken.type !== "CLOSE" && previousToken.type !== "ASTERISK";
    }
    isHashPrefix() {
      return this.isNonSpecialPatternChar(this.tokenIndex, "#");
    }
    isGroupOpen() {
      return this.tokenList[this.tokenIndex].type == "OPEN";
    }
    isGroupClose() {
      return this.tokenList[this.tokenIndex].type == "CLOSE";
    }
    isIPv6Open() {
      return this.isNonSpecialPatternChar(this.tokenIndex, "[");
    }
    isIPv6Close() {
      return this.isNonSpecialPatternChar(this.tokenIndex, "]");
    }
    makeComponentString() {
      const token = this.tokenList[this.tokenIndex];
      const componentCharStart = this.safeToken(this.componentStart).index;
      return this.input.substring(componentCharStart, token.index);
    }
    computeShouldTreatAsStandardURL() {
      const options = {};
      Object.assign(options, DEFAULT_OPTIONS);
      options.encodePart = protocolEncodeCallback;
      const regexp = pathToRegexp(this.makeComponentString(), void 0, options);
      this.shouldTreatAsStandardURL = isSpecialScheme(regexp);
    }
  };
  var COMPONENTS = [
    "protocol",
    "username",
    "password",
    "hostname",
    "port",
    "pathname",
    "search",
    "hash"
  ];
  var DEFAULT_PATTERN = "*";
  function extractValues(url, baseURL) {
    if (typeof url !== "string") {
      throw new TypeError(`parameter 1 is not of type 'string'.`);
    }
    const o = new URL(url, baseURL);
    return {
      protocol: o.protocol.substring(0, o.protocol.length - 1),
      username: o.username,
      password: o.password,
      hostname: o.hostname,
      port: o.port,
      pathname: o.pathname,
      search: o.search != "" ? o.search.substring(1, o.search.length) : void 0,
      hash: o.hash != "" ? o.hash.substring(1, o.hash.length) : void 0
    };
  }
  function applyInit(o, init2, isPattern) {
    let baseURL;
    if (typeof init2.baseURL === "string") {
      try {
        baseURL = new URL(init2.baseURL);
        o.protocol = baseURL.protocol ? baseURL.protocol.substring(0, baseURL.protocol.length - 1) : "";
        o.username = baseURL.username;
        o.password = baseURL.password;
        o.hostname = baseURL.hostname;
        o.port = baseURL.port;
        o.pathname = baseURL.pathname;
        o.search = baseURL.search ? baseURL.search.substring(1, baseURL.search.length) : "";
        o.hash = baseURL.hash ? baseURL.hash.substring(1, baseURL.hash.length) : "";
      } catch {
        throw new TypeError(`invalid baseURL '${init2.baseURL}'.`);
      }
    }
    if (typeof init2.protocol === "string") {
      o.protocol = canonicalizeProtocol(init2.protocol, isPattern);
    }
    if (typeof init2.username === "string") {
      o.username = canonicalizeUsername(init2.username, isPattern);
    }
    if (typeof init2.password === "string") {
      o.password = canonicalizePassword(init2.password, isPattern);
    }
    if (typeof init2.hostname === "string") {
      o.hostname = canonicalizeHostname(init2.hostname, isPattern);
    }
    if (typeof init2.port === "string") {
      o.port = canonicalizePort(init2.port, o.protocol, isPattern);
    }
    if (typeof init2.pathname === "string") {
      o.pathname = init2.pathname;
      if (baseURL && !isAbsolutePathname(o.pathname, isPattern)) {
        const slashIndex = baseURL.pathname.lastIndexOf("/");
        if (slashIndex >= 0) {
          o.pathname = baseURL.pathname.substring(0, slashIndex + 1) + o.pathname;
        }
      }
      o.pathname = canonicalizePathname(o.pathname, o.protocol, isPattern);
    }
    if (typeof init2.search === "string") {
      o.search = canonicalizeSearch(init2.search, isPattern);
    }
    if (typeof init2.hash === "string") {
      o.hash = canonicalizeHash(init2.hash, isPattern);
    }
    return o;
  }
  function escapePatternString(value) {
    return value.replace(/([+*?:{}()\\])/g, "\\$1");
  }
  function escapeRegexpString(value) {
    return value.replace(/([.+*?^${}()[\]|/\\])/g, "\\$1");
  }
  function tokensToPattern(tokens, options) {
    const wildcardPattern = ".*";
    const segmentWildcardPattern = `[^${escapeRegexpString(options.delimiter || "/#?")}]+?`;
    const regexIdentifierPart2 = /[$_\u200C\u200D\p{ID_Continue}]/u;
    let result = "";
    for (let i = 0; i < tokens.length; ++i) {
      const token = tokens[i];
      const lastToken = i > 0 ? tokens[i - 1] : null;
      const nextToken = i < tokens.length - 1 ? tokens[i + 1] : null;
      if (typeof token === "string") {
        result += escapePatternString(token);
        continue;
      }
      if (token.pattern === "") {
        if (token.modifier === "") {
          result += escapePatternString(token.prefix);
          continue;
        }
        result += `{${escapePatternString(token.prefix)}}${token.modifier}`;
        continue;
      }
      const customName = typeof token.name !== "number";
      const optionsPrefixes = options.prefixes !== void 0 ? options.prefixes : "./";
      let needsGrouping = token.suffix !== "" || token.prefix !== "" && (token.prefix.length !== 1 || !optionsPrefixes.includes(token.prefix));
      if (!needsGrouping && customName && token.pattern === segmentWildcardPattern && token.modifier === "" && nextToken && !nextToken.prefix && !nextToken.suffix) {
        if (typeof nextToken === "string") {
          const code2 = nextToken.length > 0 ? nextToken[0] : "";
          needsGrouping = regexIdentifierPart2.test(code2);
        } else {
          needsGrouping = typeof nextToken.name === "number";
        }
      }
      if (!needsGrouping && token.prefix === "" && lastToken && typeof lastToken === "string" && lastToken.length > 0) {
        const code2 = lastToken[lastToken.length - 1];
        needsGrouping = optionsPrefixes.includes(code2);
      }
      if (needsGrouping) {
        result += "{";
      }
      result += escapePatternString(token.prefix);
      if (customName) {
        result += `:${token.name}`;
      }
      if (token.pattern === wildcardPattern) {
        if (!customName && (!lastToken || typeof lastToken === "string" || lastToken.modifier || needsGrouping || token.prefix !== "")) {
          result += "*";
        } else {
          result += `(${wildcardPattern})`;
        }
      } else if (token.pattern === segmentWildcardPattern) {
        if (!customName) {
          result += `(${segmentWildcardPattern})`;
        }
      } else {
        result += `(${token.pattern})`;
      }
      if (token.pattern === segmentWildcardPattern && customName && token.suffix !== "") {
        if (regexIdentifierPart2.test(token.suffix[0])) {
          result += "\\";
        }
      }
      result += escapePatternString(token.suffix);
      if (needsGrouping) {
        result += "}";
      }
      result += token.modifier;
    }
    return result;
  }
  var URLPattern2 = class {
    constructor(init2 = {}, baseURL) {
      this.regexp = {};
      this.keys = {};
      this.component_pattern = {};
      try {
        if (typeof init2 === "string") {
          const parser = new Parser(init2);
          parser.parse();
          init2 = parser.result;
          if (baseURL) {
            if (typeof baseURL === "string") {
              init2.baseURL = baseURL;
            } else {
              throw new TypeError(`'baseURL' parameter is not of type 'string'.`);
            }
          } else if (typeof init2.protocol !== "string") {
            throw new TypeError(`A base URL must be provided for a relative constructor string.`);
          }
        } else if (baseURL) {
          throw new TypeError(`parameter 1 is not of type 'string'.`);
        }
        if (!init2 || typeof init2 !== "object") {
          throw new TypeError(`parameter 1 is not of type 'string' and cannot convert to dictionary.`);
        }
        const defaults = {
          pathname: DEFAULT_PATTERN,
          protocol: DEFAULT_PATTERN,
          username: DEFAULT_PATTERN,
          password: DEFAULT_PATTERN,
          hostname: DEFAULT_PATTERN,
          port: DEFAULT_PATTERN,
          search: DEFAULT_PATTERN,
          hash: DEFAULT_PATTERN
        };
        this.pattern = applyInit(defaults, init2, true);
        if (defaultPortForProtocol(this.pattern.protocol) === this.pattern.port) {
          this.pattern.port = "";
        }
        let component;
        for (component of COMPONENTS) {
          if (!(component in this.pattern))
            continue;
          const options = {};
          const pattern = this.pattern[component];
          this.keys[component] = [];
          switch (component) {
            case "protocol":
              Object.assign(options, DEFAULT_OPTIONS);
              options.encodePart = protocolEncodeCallback;
              break;
            case "username":
              Object.assign(options, DEFAULT_OPTIONS);
              options.encodePart = usernameEncodeCallback;
              break;
            case "password":
              Object.assign(options, DEFAULT_OPTIONS);
              options.encodePart = passwordEncodeCallback;
              break;
            case "hostname":
              Object.assign(options, HOSTNAME_OPTIONS);
              if (treatAsIPv6Hostname(pattern)) {
                options.encodePart = ipv6HostnameEncodeCallback;
              } else {
                options.encodePart = hostnameEncodeCallback;
              }
              break;
            case "port":
              Object.assign(options, DEFAULT_OPTIONS);
              options.encodePart = portEncodeCallback;
              break;
            case "pathname":
              if (isSpecialScheme(this.regexp.protocol)) {
                Object.assign(options, PATHNAME_OPTIONS);
                options.encodePart = standardURLPathnameEncodeCallback;
              } else {
                Object.assign(options, DEFAULT_OPTIONS);
                options.encodePart = pathURLPathnameEncodeCallback;
              }
              break;
            case "search":
              Object.assign(options, DEFAULT_OPTIONS);
              options.encodePart = searchEncodeCallback;
              break;
            case "hash":
              Object.assign(options, DEFAULT_OPTIONS);
              options.encodePart = hashEncodeCallback;
              break;
          }
          try {
            const tokens = parse(pattern, options);
            this.regexp[component] = tokensToRegexp(tokens, this.keys[component], options);
            this.component_pattern[component] = tokensToPattern(tokens, options);
          } catch {
            throw new TypeError(`invalid ${component} pattern '${this.pattern[component]}'.`);
          }
        }
      } catch (err) {
        throw new TypeError(`Failed to construct 'URLPattern': ${err.message}`);
      }
    }
    test(input = {}, baseURL) {
      let values = {
        pathname: "",
        protocol: "",
        username: "",
        password: "",
        hostname: "",
        port: "",
        search: "",
        hash: ""
      };
      if (typeof input !== "string" && baseURL) {
        throw new TypeError(`parameter 1 is not of type 'string'.`);
      }
      if (typeof input === "undefined") {
        return false;
      }
      try {
        if (typeof input === "object") {
          values = applyInit(values, input, false);
        } else {
          values = applyInit(values, extractValues(input, baseURL), false);
        }
      } catch (err) {
        return false;
      }
      let component;
      for (component in this.pattern) {
        if (!this.regexp[component].exec(values[component])) {
          return false;
        }
      }
      return true;
    }
    exec(input = {}, baseURL) {
      let values = {
        pathname: "",
        protocol: "",
        username: "",
        password: "",
        hostname: "",
        port: "",
        search: "",
        hash: ""
      };
      if (typeof input !== "string" && baseURL) {
        throw new TypeError(`parameter 1 is not of type 'string'.`);
      }
      if (typeof input === "undefined") {
        return;
      }
      try {
        if (typeof input === "object") {
          values = applyInit(values, input, false);
        } else {
          values = applyInit(values, extractValues(input, baseURL), false);
        }
      } catch (err) {
        return null;
      }
      let result = {};
      if (baseURL) {
        result.inputs = [input, baseURL];
      } else {
        result.inputs = [input];
      }
      let component;
      for (component in this.pattern) {
        let match2 = this.regexp[component].exec(values[component]);
        if (!match2) {
          return null;
        }
        let groups = {};
        for (let [i, key2] of this.keys[component].entries()) {
          if (typeof key2.name === "string" || typeof key2.name === "number") {
            let value = match2[i + 1];
            groups[key2.name] = value;
          }
        }
        result[component] = {
          input: values[component] || "",
          groups
        };
      }
      return result;
    }
    get protocol() {
      return this.component_pattern.protocol;
    }
    get username() {
      return this.component_pattern.username;
    }
    get password() {
      return this.component_pattern.password;
    }
    get hostname() {
      return this.component_pattern.hostname;
    }
    get port() {
      return this.component_pattern.port;
    }
    get pathname() {
      return this.component_pattern.pathname;
    }
    get search() {
      return this.component_pattern.search;
    }
    get hash() {
      return this.component_pattern.hash;
    }
  };
  if (!globalThis.URLPattern) {
    globalThis.URLPattern = URLPattern2;
  }

  // src/entry/html-rewriter-polyfill.ts
  init_env();

  // node_modules/.pnpm/@worker-tools+html-rewriter@0.1.0-pre.12/node_modules/@worker-tools/html-rewriter/esm/base64.js
  init_env();

  // node_modules/.pnpm/@worker-tools+html-rewriter@0.1.0-pre.12/node_modules/@worker-tools/html-rewriter/esm/_dnt.polyfills.js
  init_env();
  if (!String.prototype.replaceAll) {
    String.prototype.replaceAll = function(str, newStr) {
      if (Object.prototype.toString.call(str).toLowerCase() === "[object regexp]") {
        return this.replace(str, newStr);
      }
      return this.replace(new RegExp(str, "g"), newStr);
    };
  }

  // node_modules/.pnpm/@worker-tools+html-rewriter@0.1.0-pre.12/node_modules/@worker-tools/html-rewriter/esm/_dnt.shims.js
  init_env();
  var dntGlobals = {};
  var dntGlobalThis = createMergeProxy(globalThis, dntGlobals);
  function createMergeProxy(baseObj, extObj) {
    return new Proxy(baseObj, {
      get(_target, prop2, _receiver) {
        if (prop2 in extObj) {
          return extObj[prop2];
        } else {
          return baseObj[prop2];
        }
      },
      set(_target, prop2, value) {
        if (prop2 in extObj) {
          delete extObj[prop2];
        }
        baseObj[prop2] = value;
        return true;
      },
      deleteProperty(_target, prop2) {
        let success = false;
        if (prop2 in extObj) {
          delete extObj[prop2];
          success = true;
        }
        if (prop2 in baseObj) {
          delete baseObj[prop2];
          success = true;
        }
        return success;
      },
      ownKeys(_target) {
        const baseKeys = Reflect.ownKeys(baseObj);
        const extKeys = Reflect.ownKeys(extObj);
        const extKeysSet = new Set(extKeys);
        return [...baseKeys.filter((k) => !extKeysSet.has(k)), ...extKeys];
      },
      defineProperty(_target, prop2, desc) {
        if (prop2 in extObj) {
          delete extObj[prop2];
        }
        Reflect.defineProperty(baseObj, prop2, desc);
        return true;
      },
      getOwnPropertyDescriptor(_target, prop2) {
        if (prop2 in extObj) {
          return Reflect.getOwnPropertyDescriptor(extObj, prop2);
        } else {
          return Reflect.getOwnPropertyDescriptor(baseObj, prop2);
        }
      },
      has(_target, prop2) {
        return prop2 in extObj || prop2 in baseObj;
      }
    });
  }

  // node_modules/.pnpm/@worker-tools+html-rewriter@0.1.0-pre.12/node_modules/@worker-tools/html-rewriter/esm/vendor/html_rewriter.js
  var html_rewriter_exports = {};
  __export(html_rewriter_exports, {
    Comment: () => Comment,
    Doctype: () => Doctype,
    DocumentEnd: () => DocumentEnd,
    Element: () => Element,
    EndTag: () => EndTag,
    HTMLRewriter: () => HTMLRewriter,
    TextChunk: () => TextChunk,
    default: () => html_rewriter_default
  });
  init_env();

  // node_modules/.pnpm/@worker-tools+html-rewriter@0.1.0-pre.12/node_modules/@worker-tools/html-rewriter/esm/vendor/asyncify.js
  init_env();

  // node_modules/.pnpm/@worker-tools+html-rewriter@0.1.0-pre.12/node_modules/@worker-tools/html-rewriter/esm/deps/deno.land/std@0.134.0/testing/asserts.js
  init_env();

  // node_modules/.pnpm/@worker-tools+html-rewriter@0.1.0-pre.12/node_modules/@worker-tools/html-rewriter/esm/deps/deno.land/std@0.134.0/fmt/colors.js
  init_env();
  var { Deno } = dntGlobalThis;
  var noColor = typeof (Deno === null || Deno === void 0 ? void 0 : Deno.noColor) === "boolean" ? Deno.noColor : true;
  var enabled = !noColor;
  function code(open, close) {
    return {
      open: `\x1B[${open.join(";")}m`,
      close: `\x1B[${close}m`,
      regexp: new RegExp(`\\x1b\\[${close}m`, "g")
    };
  }
  function run(str, code2) {
    return enabled ? `${code2.open}${str.replace(code2.regexp, code2.open)}${code2.close}` : str;
  }
  function bold(str) {
    return run(str, code([1], 22));
  }
  function red(str) {
    return run(str, code([31], 39));
  }
  function green(str) {
    return run(str, code([32], 39));
  }
  function white(str) {
    return run(str, code([37], 39));
  }
  function gray(str) {
    return brightBlack(str);
  }
  function brightBlack(str) {
    return run(str, code([90], 39));
  }
  function bgRed(str) {
    return run(str, code([41], 49));
  }
  function bgGreen(str) {
    return run(str, code([42], 49));
  }
  var ANSI_PATTERN = new RegExp([
    "[\\u001B\\u009B][[\\]()#;?]*(?:(?:(?:(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]+)*|[a-zA-Z\\d]+(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]*)*)?\\u0007)",
    "(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PR-TZcf-nq-uy=><~]))"
  ].join("|"), "g");

  // node_modules/.pnpm/@worker-tools+html-rewriter@0.1.0-pre.12/node_modules/@worker-tools/html-rewriter/esm/deps/deno.land/std@0.134.0/testing/_diff.js
  init_env();
  var DiffType;
  (function(DiffType2) {
    DiffType2["removed"] = "removed";
    DiffType2["common"] = "common";
    DiffType2["added"] = "added";
  })(DiffType || (DiffType = {}));
  var REMOVED = 1;
  var COMMON = 2;
  var ADDED = 3;
  function createCommon(A, B, reverse) {
    const common = [];
    if (A.length === 0 || B.length === 0)
      return [];
    for (let i = 0; i < Math.min(A.length, B.length); i += 1) {
      if (A[reverse ? A.length - i - 1 : i] === B[reverse ? B.length - i - 1 : i]) {
        common.push(A[reverse ? A.length - i - 1 : i]);
      } else {
        return common;
      }
    }
    return common;
  }
  function diff(A, B) {
    const prefixCommon = createCommon(A, B);
    const suffixCommon = createCommon(A.slice(prefixCommon.length), B.slice(prefixCommon.length), true).reverse();
    A = suffixCommon.length ? A.slice(prefixCommon.length, -suffixCommon.length) : A.slice(prefixCommon.length);
    B = suffixCommon.length ? B.slice(prefixCommon.length, -suffixCommon.length) : B.slice(prefixCommon.length);
    const swapped = B.length > A.length;
    [A, B] = swapped ? [B, A] : [A, B];
    const M = A.length;
    const N = B.length;
    if (!M && !N && !suffixCommon.length && !prefixCommon.length)
      return [];
    if (!N) {
      return [
        ...prefixCommon.map((c2) => ({ type: DiffType.common, value: c2 })),
        ...A.map((a) => ({
          type: swapped ? DiffType.added : DiffType.removed,
          value: a
        })),
        ...suffixCommon.map((c2) => ({ type: DiffType.common, value: c2 }))
      ];
    }
    const offset = N;
    const delta = M - N;
    const size = M + N + 1;
    const fp = Array.from({ length: size }, () => ({ y: -1, id: -1 }));
    const routes = new Uint32Array((M * N + size + 1) * 2);
    const diffTypesPtrOffset = routes.length / 2;
    let ptr = 0;
    let p = -1;
    function backTrace(A2, B2, current, swapped2) {
      const M2 = A2.length;
      const N2 = B2.length;
      const result = [];
      let a = M2 - 1;
      let b = N2 - 1;
      let j = routes[current.id];
      let type = routes[current.id + diffTypesPtrOffset];
      while (true) {
        if (!j && !type)
          break;
        const prev = j;
        if (type === REMOVED) {
          result.unshift({
            type: swapped2 ? DiffType.removed : DiffType.added,
            value: B2[b]
          });
          b -= 1;
        } else if (type === ADDED) {
          result.unshift({
            type: swapped2 ? DiffType.added : DiffType.removed,
            value: A2[a]
          });
          a -= 1;
        } else {
          result.unshift({ type: DiffType.common, value: A2[a] });
          a -= 1;
          b -= 1;
        }
        j = routes[prev];
        type = routes[prev + diffTypesPtrOffset];
      }
      return result;
    }
    function createFP(slide, down, k, M2) {
      if (slide && slide.y === -1 && down && down.y === -1) {
        return { y: 0, id: 0 };
      }
      if (down && down.y === -1 || k === M2 || (slide && slide.y) > (down && down.y) + 1) {
        const prev = slide.id;
        ptr++;
        routes[ptr] = prev;
        routes[ptr + diffTypesPtrOffset] = ADDED;
        return { y: slide.y, id: ptr };
      } else {
        const prev = down.id;
        ptr++;
        routes[ptr] = prev;
        routes[ptr + diffTypesPtrOffset] = REMOVED;
        return { y: down.y + 1, id: ptr };
      }
    }
    function snake(k, slide, down, _offset, A2, B2) {
      const M2 = A2.length;
      const N2 = B2.length;
      if (k < -N2 || M2 < k)
        return { y: -1, id: -1 };
      const fp2 = createFP(slide, down, k, M2);
      while (fp2.y + k < M2 && fp2.y < N2 && A2[fp2.y + k] === B2[fp2.y]) {
        const prev = fp2.id;
        ptr++;
        fp2.id = ptr;
        fp2.y += 1;
        routes[ptr] = prev;
        routes[ptr + diffTypesPtrOffset] = COMMON;
      }
      return fp2;
    }
    while (fp[delta + offset].y < N) {
      p = p + 1;
      for (let k = -p; k < delta; ++k) {
        fp[k + offset] = snake(k, fp[k - 1 + offset], fp[k + 1 + offset], offset, A, B);
      }
      for (let k = delta + p; k > delta; --k) {
        fp[k + offset] = snake(k, fp[k - 1 + offset], fp[k + 1 + offset], offset, A, B);
      }
      fp[delta + offset] = snake(delta, fp[delta - 1 + offset], fp[delta + 1 + offset], offset, A, B);
    }
    return [
      ...prefixCommon.map((c2) => ({ type: DiffType.common, value: c2 })),
      ...backTrace(A, B, fp[delta + offset], swapped),
      ...suffixCommon.map((c2) => ({ type: DiffType.common, value: c2 }))
    ];
  }
  function diffstr(A, B) {
    var _a8;
    function unescape2(string) {
      return string.replaceAll("\b", "\\b").replaceAll("\f", "\\f").replaceAll("	", "\\t").replaceAll("\v", "\\v").replaceAll(/\r\n|\r|\n/g, (str) => str === "\r" ? "\\r" : str === "\n" ? "\\n\n" : "\\r\\n\r\n");
    }
    function tokenize(string, { wordDiff = false } = {}) {
      if (wordDiff) {
        const tokens = string.split(/([^\S\r\n]+|[()[\]{}'"\r\n]|\b)/);
        const words = /^[a-zA-Z\u{C0}-\u{FF}\u{D8}-\u{F6}\u{F8}-\u{2C6}\u{2C8}-\u{2D7}\u{2DE}-\u{2FF}\u{1E00}-\u{1EFF}]+$/u;
        for (let i = 0; i < tokens.length - 1; i++) {
          if (!tokens[i + 1] && tokens[i + 2] && words.test(tokens[i]) && words.test(tokens[i + 2])) {
            tokens[i] += tokens[i + 2];
            tokens.splice(i + 1, 2);
            i--;
          }
        }
        return tokens.filter((token) => token);
      } else {
        const tokens = [], lines = string.split(/(\n|\r\n)/);
        if (!lines[lines.length - 1]) {
          lines.pop();
        }
        for (let i = 0; i < lines.length; i++) {
          if (i % 2) {
            tokens[tokens.length - 1] += lines[i];
          } else {
            tokens.push(lines[i]);
          }
        }
        return tokens;
      }
    }
    function createDetails(line, tokens) {
      return tokens.filter(({ type }) => type === line.type || type === DiffType.common).map((result, i, t) => {
        var _a9, _b3;
        if (result.type === DiffType.common && t[i - 1] && ((_a9 = t[i - 1]) === null || _a9 === void 0 ? void 0 : _a9.type) === ((_b3 = t[i + 1]) === null || _b3 === void 0 ? void 0 : _b3.type) && /\s+/.test(result.value)) {
          result.type = t[i - 1].type;
        }
        return result;
      });
    }
    const diffResult = diff(tokenize(`${unescape2(A)}
`), tokenize(`${unescape2(B)}
`));
    const added = [], removed = [];
    for (const result of diffResult) {
      if (result.type === DiffType.added) {
        added.push(result);
      }
      if (result.type === DiffType.removed) {
        removed.push(result);
      }
    }
    const aLines = added.length < removed.length ? added : removed;
    const bLines = aLines === removed ? added : removed;
    for (const a of aLines) {
      let tokens = [], b;
      while (bLines.length) {
        b = bLines.shift();
        tokens = diff(tokenize(a.value, { wordDiff: true }), tokenize((_a8 = b === null || b === void 0 ? void 0 : b.value) !== null && _a8 !== void 0 ? _a8 : "", { wordDiff: true }));
        if (tokens.some(({ type, value }) => type === DiffType.common && value.trim().length)) {
          break;
        }
      }
      a.details = createDetails(a, tokens);
      if (b) {
        b.details = createDetails(b, tokens);
      }
    }
    return diffResult;
  }

  // node_modules/.pnpm/@worker-tools+html-rewriter@0.1.0-pre.12/node_modules/@worker-tools/html-rewriter/esm/deps/deno.land/std@0.134.0/testing/asserts.js
  var CAN_NOT_DISPLAY = "[Cannot display]";
  var AssertionError = class extends Error {
    constructor(message) {
      super(message);
      Object.defineProperty(this, "name", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: "AssertionError"
      });
    }
  };
  function _format(v2) {
    const { Deno: Deno2 } = dntGlobalThis;
    return typeof (Deno2 === null || Deno2 === void 0 ? void 0 : Deno2.inspect) === "function" ? Deno2.inspect(v2, {
      depth: Infinity,
      sorted: true,
      trailingComma: true,
      compact: false,
      iterableLimit: Infinity
    }) : `"${String(v2).replace(/(?=["\\])/g, "\\")}"`;
  }
  function createColor(diffType, { background = false } = {}) {
    switch (diffType) {
      case DiffType.added:
        return (s) => background ? bgGreen(white(s)) : green(bold(s));
      case DiffType.removed:
        return (s) => background ? bgRed(white(s)) : red(bold(s));
      default:
        return white;
    }
  }
  function createSign(diffType) {
    switch (diffType) {
      case DiffType.added:
        return "+   ";
      case DiffType.removed:
        return "-   ";
      default:
        return "    ";
    }
  }
  function buildMessage(diffResult, { stringDiff = false } = {}) {
    const messages = [], diffMessages = [];
    messages.push("");
    messages.push("");
    messages.push(`    ${gray(bold("[Diff]"))} ${red(bold("Actual"))} / ${green(bold("Expected"))}`);
    messages.push("");
    messages.push("");
    diffResult.forEach((result) => {
      var _a8, _b3;
      const c2 = createColor(result.type);
      const line = (_b3 = (_a8 = result.details) === null || _a8 === void 0 ? void 0 : _a8.map((detail) => detail.type !== DiffType.common ? createColor(detail.type, { background: true })(detail.value) : detail.value).join("")) !== null && _b3 !== void 0 ? _b3 : result.value;
      diffMessages.push(c2(`${createSign(result.type)}${line}`));
    });
    messages.push(...stringDiff ? [diffMessages.join("")] : diffMessages);
    messages.push("");
    return messages;
  }
  function isKeyedCollection(x4) {
    return [Symbol.iterator, "size"].every((k) => k in x4);
  }
  function equal(c2, d) {
    const seen = /* @__PURE__ */ new Map();
    return function compare(a, b) {
      if (a && b && (a instanceof RegExp && b instanceof RegExp || a instanceof URL && b instanceof URL)) {
        return String(a) === String(b);
      }
      if (a instanceof Date && b instanceof Date) {
        const aTime = a.getTime();
        const bTime = b.getTime();
        if (Number.isNaN(aTime) && Number.isNaN(bTime)) {
          return true;
        }
        return aTime === bTime;
      }
      if (typeof a === "number" && typeof b === "number") {
        return Number.isNaN(a) && Number.isNaN(b) || a === b;
      }
      if (Object.is(a, b)) {
        return true;
      }
      if (a && typeof a === "object" && b && typeof b === "object") {
        if (a && b && !constructorsEqual(a, b)) {
          return false;
        }
        if (a instanceof WeakMap || b instanceof WeakMap) {
          if (!(a instanceof WeakMap && b instanceof WeakMap))
            return false;
          throw new TypeError("cannot compare WeakMap instances");
        }
        if (a instanceof WeakSet || b instanceof WeakSet) {
          if (!(a instanceof WeakSet && b instanceof WeakSet))
            return false;
          throw new TypeError("cannot compare WeakSet instances");
        }
        if (seen.get(a) === b) {
          return true;
        }
        if (Object.keys(a || {}).length !== Object.keys(b || {}).length) {
          return false;
        }
        if (isKeyedCollection(a) && isKeyedCollection(b)) {
          if (a.size !== b.size) {
            return false;
          }
          let unmatchedEntries = a.size;
          for (const [aKey, aValue] of a.entries()) {
            for (const [bKey, bValue] of b.entries()) {
              if (aKey === aValue && bKey === bValue && compare(aKey, bKey) || compare(aKey, bKey) && compare(aValue, bValue)) {
                unmatchedEntries--;
              }
            }
          }
          return unmatchedEntries === 0;
        }
        const merged = { ...a, ...b };
        for (const key2 of [
          ...Object.getOwnPropertyNames(merged),
          ...Object.getOwnPropertySymbols(merged)
        ]) {
          if (!compare(a && a[key2], b && b[key2])) {
            return false;
          }
          if (key2 in a && !(key2 in b) || key2 in b && !(key2 in a)) {
            return false;
          }
        }
        seen.set(a, b);
        if (a instanceof WeakRef || b instanceof WeakRef) {
          if (!(a instanceof WeakRef && b instanceof WeakRef))
            return false;
          return compare(a.deref(), b.deref());
        }
        return true;
      }
      return false;
    }(c2, d);
  }
  function constructorsEqual(a, b) {
    return a.constructor === b.constructor || a.constructor === Object && !b.constructor || !a.constructor && b.constructor === Object;
  }
  function assert(expr, msg = "") {
    if (!expr) {
      throw new AssertionError(msg);
    }
  }
  function assertEquals(actual, expected, msg) {
    if (equal(actual, expected)) {
      return;
    }
    let message = "";
    const actualString = _format(actual);
    const expectedString = _format(expected);
    try {
      const stringDiff = typeof actual === "string" && typeof expected === "string";
      const diffResult = stringDiff ? diffstr(actual, expected) : diff(actualString.split("\n"), expectedString.split("\n"));
      const diffMsg = buildMessage(diffResult, { stringDiff }).join("\n");
      message = `Values are not equal:
${diffMsg}`;
    } catch {
      message = `
${red(CAN_NOT_DISPLAY)} + 

`;
    }
    if (msg) {
      message = msg;
    }
    throw new AssertionError(message);
  }

  // node_modules/.pnpm/@worker-tools+html-rewriter@0.1.0-pre.12/node_modules/@worker-tools/html-rewriter/esm/vendor/asyncify.js
  var wasm;
  function setWasmExports(wasmExports) {
    wasm = wasmExports;
  }
  var cachedInt32Memory = null;
  function getInt32Memory() {
    if (cachedInt32Memory === null || cachedInt32Memory.buffer !== wasm.memory.buffer) {
      cachedInt32Memory = new Int32Array(wasm.memory.buffer);
    }
    return cachedInt32Memory;
  }
  var State = {
    NONE: 0,
    UNWINDING: 1,
    REWINDING: 2
  };
  function assertNoneState() {
    assertEquals(wasm.asyncify_get_state(), State.NONE);
  }
  var promises = /* @__PURE__ */ new Map();
  function awaitPromise(stackPtr, promise) {
    if (wasm.asyncify_get_state() === State.REWINDING) {
      wasm.asyncify_stop_rewind();
      return;
    }
    assertNoneState();
    assertEquals(stackPtr % 4, 0);
    getInt32Memory().set([stackPtr + 8, stackPtr + 1024], stackPtr / 4);
    wasm.asyncify_start_unwind(stackPtr);
    assert(!promises.has(stackPtr));
    promises.set(stackPtr, promise);
  }
  async function wrap(rewriter, fn, ...args) {
    const stackPtr = rewriter.asyncifyStackPtr;
    assertNoneState();
    let result = fn(...args);
    while (wasm.asyncify_get_state() === State.UNWINDING) {
      wasm.asyncify_stop_unwind();
      assertNoneState();
      assert(promises.has(stackPtr));
      await promises.get(stackPtr);
      promises.delete(stackPtr);
      assertNoneState();
      wasm.asyncify_start_rewind(stackPtr);
      result = fn();
    }
    assertNoneState();
    return result;
  }

  // node_modules/.pnpm/@worker-tools+html-rewriter@0.1.0-pre.12/node_modules/@worker-tools/html-rewriter/esm/vendor/html_rewriter.js
  var wasm2;
  var heap = new Array(32).fill(void 0);
  heap.push(void 0, null, true, false);
  function getObject(idx) {
    return heap[idx];
  }
  var heap_next = heap.length;
  function dropObject(idx) {
    if (idx < 36)
      return;
    heap[idx] = heap_next;
    heap_next = idx;
  }
  function takeObject(idx) {
    const ret = getObject(idx);
    dropObject(idx);
    return ret;
  }
  var cachedTextDecoder = new TextDecoder("utf-8", { ignoreBOM: true, fatal: true });
  cachedTextDecoder.decode();
  var cachegetUint8Memory0 = null;
  function getUint8Memory0() {
    if (cachegetUint8Memory0 === null || cachegetUint8Memory0.buffer !== wasm2.memory.buffer) {
      cachegetUint8Memory0 = new Uint8Array(wasm2.memory.buffer);
    }
    return cachegetUint8Memory0;
  }
  function getStringFromWasm0(ptr, len) {
    return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));
  }
  function addHeapObject(obj) {
    if (heap_next === heap.length)
      heap.push(heap.length + 1);
    const idx = heap_next;
    heap_next = heap[idx];
    heap[idx] = obj;
    return idx;
  }
  function debugString(val) {
    const type = typeof val;
    if (type == "number" || type == "boolean" || val == null) {
      return `${val}`;
    }
    if (type == "string") {
      return `"${val}"`;
    }
    if (type == "symbol") {
      const description = val.description;
      if (description == null) {
        return "Symbol";
      } else {
        return `Symbol(${description})`;
      }
    }
    if (type == "function") {
      const name = val.name;
      if (typeof name == "string" && name.length > 0) {
        return `Function(${name})`;
      } else {
        return "Function";
      }
    }
    if (Array.isArray(val)) {
      const length = val.length;
      let debug = "[";
      if (length > 0) {
        debug += debugString(val[0]);
      }
      for (let i = 1; i < length; i++) {
        debug += ", " + debugString(val[i]);
      }
      debug += "]";
      return debug;
    }
    const builtInMatches = /\[object ([^\]]+)\]/.exec(toString.call(val));
    let className;
    if (builtInMatches.length > 1) {
      className = builtInMatches[1];
    } else {
      return toString.call(val);
    }
    if (className == "Object") {
      try {
        return "Object(" + JSON.stringify(val) + ")";
      } catch (_) {
        return "Object";
      }
    }
    if (val instanceof Error) {
      return `${val.name}: ${val.message}
${val.stack}`;
    }
    return className;
  }
  var WASM_VECTOR_LEN = 0;
  var cachedTextEncoder = new TextEncoder("utf-8");
  var encodeString = typeof cachedTextEncoder.encodeInto === "function" ? function(arg, view) {
    return cachedTextEncoder.encodeInto(arg, view);
  } : function(arg, view) {
    const buf = cachedTextEncoder.encode(arg);
    view.set(buf);
    return {
      read: arg.length,
      written: buf.length
    };
  };
  function passStringToWasm0(arg, malloc, realloc) {
    if (realloc === void 0) {
      const buf = cachedTextEncoder.encode(arg);
      const ptr2 = malloc(buf.length);
      getUint8Memory0().subarray(ptr2, ptr2 + buf.length).set(buf);
      WASM_VECTOR_LEN = buf.length;
      return ptr2;
    }
    let len = arg.length;
    let ptr = malloc(len);
    const mem = getUint8Memory0();
    let offset = 0;
    for (; offset < len; offset++) {
      const code2 = arg.charCodeAt(offset);
      if (code2 > 127)
        break;
      mem[ptr + offset] = code2;
    }
    if (offset !== len) {
      if (offset !== 0) {
        arg = arg.slice(offset);
      }
      ptr = realloc(ptr, len, len = offset + arg.length * 3);
      const view = getUint8Memory0().subarray(ptr + offset, ptr + len);
      const ret = encodeString(arg, view);
      offset += ret.written;
    }
    WASM_VECTOR_LEN = offset;
    return ptr;
  }
  var cachegetInt32Memory0 = null;
  function getInt32Memory0() {
    if (cachegetInt32Memory0 === null || cachegetInt32Memory0.buffer !== wasm2.memory.buffer) {
      cachegetInt32Memory0 = new Int32Array(wasm2.memory.buffer);
    }
    return cachegetInt32Memory0;
  }
  function isLikeNone(x4) {
    return x4 === void 0 || x4 === null;
  }
  var stack_pointer = 32;
  function addBorrowedObject(obj) {
    if (stack_pointer == 1)
      throw new Error("out of js stack");
    heap[--stack_pointer] = obj;
    return stack_pointer;
  }
  function passArray8ToWasm0(arg, malloc) {
    const ptr = malloc(arg.length * 1);
    getUint8Memory0().set(arg, ptr / 1);
    WASM_VECTOR_LEN = arg.length;
    return ptr;
  }
  function handleError(f, args) {
    try {
      return f.apply(this, args);
    } catch (e) {
      wasm2.__wbindgen_exn_store(addHeapObject(e));
    }
  }
  var Comment = class {
    static __wrap(ptr) {
      const obj = Object.create(Comment.prototype);
      obj.ptr = ptr;
      return obj;
    }
    __destroy_into_raw() {
      const ptr = this.ptr;
      this.ptr = 0;
      return ptr;
    }
    free() {
      const ptr = this.__destroy_into_raw();
      wasm2.__wbg_comment_free(ptr);
    }
    before(content, content_type) {
      var ptr0 = passStringToWasm0(content, wasm2.__wbindgen_malloc, wasm2.__wbindgen_realloc);
      var len0 = WASM_VECTOR_LEN;
      wasm2.comment_before(this.ptr, ptr0, len0, isLikeNone(content_type) ? 0 : addHeapObject(content_type));
      return this;
    }
    after(content, content_type) {
      var ptr0 = passStringToWasm0(content, wasm2.__wbindgen_malloc, wasm2.__wbindgen_realloc);
      var len0 = WASM_VECTOR_LEN;
      wasm2.comment_after(this.ptr, ptr0, len0, isLikeNone(content_type) ? 0 : addHeapObject(content_type));
      return this;
    }
    replace(content, content_type) {
      var ptr0 = passStringToWasm0(content, wasm2.__wbindgen_malloc, wasm2.__wbindgen_realloc);
      var len0 = WASM_VECTOR_LEN;
      wasm2.comment_replace(this.ptr, ptr0, len0, isLikeNone(content_type) ? 0 : addHeapObject(content_type));
      return this;
    }
    remove() {
      wasm2.comment_remove(this.ptr);
      return this;
    }
    get removed() {
      var ret = wasm2.comment_removed(this.ptr);
      return ret !== 0;
    }
    get text() {
      try {
        const retptr = wasm2.__wbindgen_add_to_stack_pointer(-16);
        wasm2.comment_text(retptr, this.ptr);
        var r0 = getInt32Memory0()[retptr / 4 + 0];
        var r1 = getInt32Memory0()[retptr / 4 + 1];
        return getStringFromWasm0(r0, r1);
      } finally {
        wasm2.__wbindgen_add_to_stack_pointer(16);
        wasm2.__wbindgen_free(r0, r1);
      }
    }
    set text(text) {
      var ptr0 = passStringToWasm0(text, wasm2.__wbindgen_malloc, wasm2.__wbindgen_realloc);
      var len0 = WASM_VECTOR_LEN;
      wasm2.comment_set_text(this.ptr, ptr0, len0);
    }
  };
  var Doctype = class {
    static __wrap(ptr) {
      const obj = Object.create(Doctype.prototype);
      obj.ptr = ptr;
      return obj;
    }
    __destroy_into_raw() {
      const ptr = this.ptr;
      this.ptr = 0;
      return ptr;
    }
    free() {
      const ptr = this.__destroy_into_raw();
      wasm2.__wbg_doctype_free(ptr);
    }
    get name() {
      var ret = wasm2.doctype_name(this.ptr);
      return takeObject(ret);
    }
    get publicId() {
      var ret = wasm2.doctype_public_id(this.ptr);
      return takeObject(ret);
    }
    get systemId() {
      var ret = wasm2.doctype_system_id(this.ptr);
      return takeObject(ret);
    }
  };
  var DocumentEnd = class {
    static __wrap(ptr) {
      const obj = Object.create(DocumentEnd.prototype);
      obj.ptr = ptr;
      return obj;
    }
    __destroy_into_raw() {
      const ptr = this.ptr;
      this.ptr = 0;
      return ptr;
    }
    free() {
      const ptr = this.__destroy_into_raw();
      wasm2.__wbg_documentend_free(ptr);
    }
    append(content, content_type) {
      var ptr0 = passStringToWasm0(content, wasm2.__wbindgen_malloc, wasm2.__wbindgen_realloc);
      var len0 = WASM_VECTOR_LEN;
      wasm2.documentend_append(this.ptr, ptr0, len0, isLikeNone(content_type) ? 0 : addHeapObject(content_type));
      return this;
    }
  };
  var Element = class {
    static __wrap(ptr) {
      const obj = Object.create(Element.prototype);
      obj.ptr = ptr;
      return obj;
    }
    __destroy_into_raw() {
      const ptr = this.ptr;
      this.ptr = 0;
      return ptr;
    }
    free() {
      const ptr = this.__destroy_into_raw();
      wasm2.__wbg_element_free(ptr);
    }
    before(content, content_type) {
      var ptr0 = passStringToWasm0(content, wasm2.__wbindgen_malloc, wasm2.__wbindgen_realloc);
      var len0 = WASM_VECTOR_LEN;
      wasm2.element_before(this.ptr, ptr0, len0, isLikeNone(content_type) ? 0 : addHeapObject(content_type));
      return this;
    }
    after(content, content_type) {
      var ptr0 = passStringToWasm0(content, wasm2.__wbindgen_malloc, wasm2.__wbindgen_realloc);
      var len0 = WASM_VECTOR_LEN;
      wasm2.element_after(this.ptr, ptr0, len0, isLikeNone(content_type) ? 0 : addHeapObject(content_type));
      return this;
    }
    replace(content, content_type) {
      var ptr0 = passStringToWasm0(content, wasm2.__wbindgen_malloc, wasm2.__wbindgen_realloc);
      var len0 = WASM_VECTOR_LEN;
      wasm2.element_replace(this.ptr, ptr0, len0, isLikeNone(content_type) ? 0 : addHeapObject(content_type));
      return this;
    }
    remove() {
      wasm2.element_remove(this.ptr);
      return this;
    }
    get removed() {
      var ret = wasm2.element_removed(this.ptr);
      return ret !== 0;
    }
    get tagName() {
      try {
        const retptr = wasm2.__wbindgen_add_to_stack_pointer(-16);
        wasm2.element_tag_name(retptr, this.ptr);
        var r0 = getInt32Memory0()[retptr / 4 + 0];
        var r1 = getInt32Memory0()[retptr / 4 + 1];
        return getStringFromWasm0(r0, r1);
      } finally {
        wasm2.__wbindgen_add_to_stack_pointer(16);
        wasm2.__wbindgen_free(r0, r1);
      }
    }
    set tagName(name) {
      var ptr0 = passStringToWasm0(name, wasm2.__wbindgen_malloc, wasm2.__wbindgen_realloc);
      var len0 = WASM_VECTOR_LEN;
      wasm2.element_set_tag_name(this.ptr, ptr0, len0);
    }
    get namespaceURI() {
      var ret = wasm2.element_namespace_uri(this.ptr);
      return takeObject(ret);
    }
    get attributes() {
      var ret = wasm2.element_attributes(this.ptr);
      return takeObject(ret)[Symbol.iterator]();
    }
    getAttribute(name) {
      var ptr0 = passStringToWasm0(name, wasm2.__wbindgen_malloc, wasm2.__wbindgen_realloc);
      var len0 = WASM_VECTOR_LEN;
      var ret = wasm2.element_getAttribute(this.ptr, ptr0, len0);
      return takeObject(ret);
    }
    hasAttribute(name) {
      var ptr0 = passStringToWasm0(name, wasm2.__wbindgen_malloc, wasm2.__wbindgen_realloc);
      var len0 = WASM_VECTOR_LEN;
      var ret = wasm2.element_hasAttribute(this.ptr, ptr0, len0);
      return ret !== 0;
    }
    setAttribute(name, value) {
      var ptr0 = passStringToWasm0(name, wasm2.__wbindgen_malloc, wasm2.__wbindgen_realloc);
      var len0 = WASM_VECTOR_LEN;
      var ptr1 = passStringToWasm0(value, wasm2.__wbindgen_malloc, wasm2.__wbindgen_realloc);
      var len1 = WASM_VECTOR_LEN;
      wasm2.element_setAttribute(this.ptr, ptr0, len0, ptr1, len1);
      return this;
    }
    removeAttribute(name) {
      var ptr0 = passStringToWasm0(name, wasm2.__wbindgen_malloc, wasm2.__wbindgen_realloc);
      var len0 = WASM_VECTOR_LEN;
      wasm2.element_removeAttribute(this.ptr, ptr0, len0);
      return this;
    }
    prepend(content, content_type) {
      var ptr0 = passStringToWasm0(content, wasm2.__wbindgen_malloc, wasm2.__wbindgen_realloc);
      var len0 = WASM_VECTOR_LEN;
      wasm2.element_prepend(this.ptr, ptr0, len0, isLikeNone(content_type) ? 0 : addHeapObject(content_type));
      return this;
    }
    append(content, content_type) {
      var ptr0 = passStringToWasm0(content, wasm2.__wbindgen_malloc, wasm2.__wbindgen_realloc);
      var len0 = WASM_VECTOR_LEN;
      wasm2.element_append(this.ptr, ptr0, len0, isLikeNone(content_type) ? 0 : addHeapObject(content_type));
      return this;
    }
    setInnerContent(content, content_type) {
      var ptr0 = passStringToWasm0(content, wasm2.__wbindgen_malloc, wasm2.__wbindgen_realloc);
      var len0 = WASM_VECTOR_LEN;
      wasm2.element_setInnerContent(this.ptr, ptr0, len0, isLikeNone(content_type) ? 0 : addHeapObject(content_type));
      return this;
    }
    removeAndKeepContent() {
      wasm2.element_removeAndKeepContent(this.ptr);
      return this;
    }
    onEndTag(handler5) {
      wasm2.element_onEndTag(this.ptr, addHeapObject(handler5.bind(this)));
    }
  };
  var EndTag = class {
    static __wrap(ptr) {
      const obj = Object.create(EndTag.prototype);
      obj.ptr = ptr;
      return obj;
    }
    __destroy_into_raw() {
      const ptr = this.ptr;
      this.ptr = 0;
      return ptr;
    }
    free() {
      const ptr = this.__destroy_into_raw();
      wasm2.__wbg_endtag_free(ptr);
    }
    get name() {
      try {
        const retptr = wasm2.__wbindgen_add_to_stack_pointer(-16);
        wasm2.endtag_name(retptr, this.ptr);
        var r0 = getInt32Memory0()[retptr / 4 + 0];
        var r1 = getInt32Memory0()[retptr / 4 + 1];
        return getStringFromWasm0(r0, r1);
      } finally {
        wasm2.__wbindgen_add_to_stack_pointer(16);
        wasm2.__wbindgen_free(r0, r1);
      }
    }
    set name(name) {
      var ptr0 = passStringToWasm0(name, wasm2.__wbindgen_malloc, wasm2.__wbindgen_realloc);
      var len0 = WASM_VECTOR_LEN;
      wasm2.endtag_set_name(this.ptr, ptr0, len0);
    }
    before(content, content_type) {
      var ptr0 = passStringToWasm0(content, wasm2.__wbindgen_malloc, wasm2.__wbindgen_realloc);
      var len0 = WASM_VECTOR_LEN;
      wasm2.endtag_before(this.ptr, ptr0, len0, isLikeNone(content_type) ? 0 : addHeapObject(content_type));
      return this;
    }
    after(content, content_type) {
      var ptr0 = passStringToWasm0(content, wasm2.__wbindgen_malloc, wasm2.__wbindgen_realloc);
      var len0 = WASM_VECTOR_LEN;
      wasm2.endtag_after(this.ptr, ptr0, len0, isLikeNone(content_type) ? 0 : addHeapObject(content_type));
      return this;
    }
    remove() {
      wasm2.endtag_remove(this.ptr);
      return this;
    }
  };
  var HTMLRewriter = class {
    static __wrap(ptr) {
      const obj = Object.create(HTMLRewriter.prototype);
      obj.ptr = ptr;
      return obj;
    }
    __destroy_into_raw() {
      const ptr = this.ptr;
      this.ptr = 0;
      return ptr;
    }
    free() {
      const ptr = this.__destroy_into_raw();
      wasm2.__wbg_htmlrewriter_free(ptr);
    }
    constructor(output_sink, options) {
      try {
        var ret = wasm2.htmlrewriter_new(addBorrowedObject(output_sink), isLikeNone(options) ? 0 : addHeapObject(options));
        return HTMLRewriter.__wrap(ret);
      } finally {
        heap[stack_pointer++] = void 0;
      }
    }
    on(selector, handlers) {
      var ptr0 = passStringToWasm0(selector, wasm2.__wbindgen_malloc, wasm2.__wbindgen_realloc);
      var len0 = WASM_VECTOR_LEN;
      wasm2.htmlrewriter_on(this.ptr, ptr0, len0, addHeapObject(handlers));
      return this;
    }
    onDocument(handlers) {
      wasm2.htmlrewriter_onDocument(this.ptr, addHeapObject(handlers));
      return this;
    }
    async write(chunk) {
      var ptr0 = passArray8ToWasm0(chunk, wasm2.__wbindgen_malloc);
      var len0 = WASM_VECTOR_LEN;
      await wrap(this, wasm2.htmlrewriter_write, this.ptr, ptr0, len0);
    }
    async end() {
      await wrap(this, wasm2.htmlrewriter_end, this.ptr);
    }
    get asyncifyStackPtr() {
      var ret = wasm2.htmlrewriter_asyncify_stack_ptr(this.ptr);
      return ret;
    }
  };
  var TextChunk = class {
    static __wrap(ptr) {
      const obj = Object.create(TextChunk.prototype);
      obj.ptr = ptr;
      return obj;
    }
    __destroy_into_raw() {
      const ptr = this.ptr;
      this.ptr = 0;
      return ptr;
    }
    free() {
      const ptr = this.__destroy_into_raw();
      wasm2.__wbg_textchunk_free(ptr);
    }
    before(content, content_type) {
      var ptr0 = passStringToWasm0(content, wasm2.__wbindgen_malloc, wasm2.__wbindgen_realloc);
      var len0 = WASM_VECTOR_LEN;
      wasm2.textchunk_before(this.ptr, ptr0, len0, isLikeNone(content_type) ? 0 : addHeapObject(content_type));
      return this;
    }
    after(content, content_type) {
      var ptr0 = passStringToWasm0(content, wasm2.__wbindgen_malloc, wasm2.__wbindgen_realloc);
      var len0 = WASM_VECTOR_LEN;
      wasm2.textchunk_after(this.ptr, ptr0, len0, isLikeNone(content_type) ? 0 : addHeapObject(content_type));
      return this;
    }
    replace(content, content_type) {
      var ptr0 = passStringToWasm0(content, wasm2.__wbindgen_malloc, wasm2.__wbindgen_realloc);
      var len0 = WASM_VECTOR_LEN;
      wasm2.textchunk_replace(this.ptr, ptr0, len0, isLikeNone(content_type) ? 0 : addHeapObject(content_type));
      return this;
    }
    remove() {
      wasm2.textchunk_remove(this.ptr);
      return this;
    }
    get removed() {
      var ret = wasm2.textchunk_removed(this.ptr);
      return ret !== 0;
    }
    get text() {
      try {
        const retptr = wasm2.__wbindgen_add_to_stack_pointer(-16);
        wasm2.textchunk_text(retptr, this.ptr);
        var r0 = getInt32Memory0()[retptr / 4 + 0];
        var r1 = getInt32Memory0()[retptr / 4 + 1];
        return getStringFromWasm0(r0, r1);
      } finally {
        wasm2.__wbindgen_add_to_stack_pointer(16);
        wasm2.__wbindgen_free(r0, r1);
      }
    }
    get lastInTextNode() {
      var ret = wasm2.textchunk_last_in_text_node(this.ptr);
      return ret !== 0;
    }
  };
  async function load(module, imports) {
    if (typeof Response === "function" && module instanceof Response) {
      if (typeof WebAssembly.instantiateStreaming === "function") {
        try {
          return await WebAssembly.instantiateStreaming(module, imports);
        } catch (e) {
          if (module.headers.get("Content-Type") != "application/wasm") {
            console.warn("`WebAssembly.instantiateStreaming` failed because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\n", e);
          } else {
            throw e;
          }
        }
      }
      const bytes = await module.arrayBuffer();
      return await WebAssembly.instantiate(bytes, imports);
    } else {
      const instance = await WebAssembly.instantiate(module, imports);
      if (instance instanceof WebAssembly.Instance) {
        return { instance, module };
      } else {
        return instance;
      }
    }
  }
  async function init(input) {
    if (typeof input === "undefined") {
      throw new Error("Initializing html_rewriter needs input");
    }
    const imports = {};
    imports.wbg = {};
    imports.wbg.__wbindgen_object_drop_ref = function(arg0) {
      takeObject(arg0);
    };
    imports.wbg.__wbg_html_cd9a0f328493678b = function(arg0) {
      var ret = getObject(arg0).html;
      return isLikeNone(ret) ? 16777215 : ret ? 1 : 0;
    };
    imports.wbg.__wbindgen_string_new = function(arg0, arg1) {
      var ret = getStringFromWasm0(arg0, arg1);
      return addHeapObject(ret);
    };
    imports.wbg.__wbg_documentend_new = function(arg0) {
      var ret = DocumentEnd.__wrap(arg0);
      return addHeapObject(ret);
    };
    imports.wbg.__wbg_awaitPromise_39a1101fd8518869 = function(arg0, arg1) {
      awaitPromise(arg0, getObject(arg1));
    };
    imports.wbg.__wbindgen_object_clone_ref = function(arg0) {
      var ret = getObject(arg0);
      return addHeapObject(ret);
    };
    imports.wbg.__wbg_element_c38470ed972aea27 = function(arg0) {
      var ret = getObject(arg0).element;
      return isLikeNone(ret) ? 0 : addHeapObject(ret);
    };
    imports.wbg.__wbg_comments_ba86bc03331d9378 = function(arg0) {
      var ret = getObject(arg0).comments;
      return isLikeNone(ret) ? 0 : addHeapObject(ret);
    };
    imports.wbg.__wbg_text_7800bf26cb443911 = function(arg0) {
      var ret = getObject(arg0).text;
      return isLikeNone(ret) ? 0 : addHeapObject(ret);
    };
    imports.wbg.__wbg_doctype_ac58c0964a59b61b = function(arg0) {
      var ret = getObject(arg0).doctype;
      return isLikeNone(ret) ? 0 : addHeapObject(ret);
    };
    imports.wbg.__wbg_comments_94d876f6c0502e82 = function(arg0) {
      var ret = getObject(arg0).comments;
      return isLikeNone(ret) ? 0 : addHeapObject(ret);
    };
    imports.wbg.__wbg_text_4606a16c30e4ae91 = function(arg0) {
      var ret = getObject(arg0).text;
      return isLikeNone(ret) ? 0 : addHeapObject(ret);
    };
    imports.wbg.__wbg_end_34efb9402eac8a4e = function(arg0) {
      var ret = getObject(arg0).end;
      return isLikeNone(ret) ? 0 : addHeapObject(ret);
    };
    imports.wbg.__wbg_element_new = function(arg0) {
      var ret = Element.__wrap(arg0);
      return addHeapObject(ret);
    };
    imports.wbg.__wbg_comment_new = function(arg0) {
      var ret = Comment.__wrap(arg0);
      return addHeapObject(ret);
    };
    imports.wbg.__wbg_textchunk_new = function(arg0) {
      var ret = TextChunk.__wrap(arg0);
      return addHeapObject(ret);
    };
    imports.wbg.__wbg_doctype_new = function(arg0) {
      var ret = Doctype.__wrap(arg0);
      return addHeapObject(ret);
    };
    imports.wbg.__wbg_endtag_new = function(arg0) {
      var ret = EndTag.__wrap(arg0);
      return addHeapObject(ret);
    };
    imports.wbg.__wbg_enableEsiTags_de6b91cc61a25874 = function(arg0) {
      var ret = getObject(arg0).enableEsiTags;
      return isLikeNone(ret) ? 16777215 : ret ? 1 : 0;
    };
    imports.wbg.__wbg_String_60c4ba333b5ca1c6 = function(arg0, arg1) {
      var ret = String(getObject(arg1));
      var ptr0 = passStringToWasm0(ret, wasm2.__wbindgen_malloc, wasm2.__wbindgen_realloc);
      var len0 = WASM_VECTOR_LEN;
      getInt32Memory0()[arg0 / 4 + 1] = len0;
      getInt32Memory0()[arg0 / 4 + 0] = ptr0;
    };
    imports.wbg.__wbg_new_4fee7e2900033464 = function() {
      var ret = new Array();
      return addHeapObject(ret);
    };
    imports.wbg.__wbg_push_ba9b5e3c25cff8f9 = function(arg0, arg1) {
      var ret = getObject(arg0).push(getObject(arg1));
      return ret;
    };
    imports.wbg.__wbg_call_6c4ea719458624eb = function() {
      return handleError(function(arg0, arg1, arg2) {
        var ret = getObject(arg0).call(getObject(arg1), getObject(arg2));
        return addHeapObject(ret);
      }, arguments);
    };
    imports.wbg.__wbg_new_917809a3e20a4b00 = function(arg0, arg1) {
      var ret = new TypeError(getStringFromWasm0(arg0, arg1));
      return addHeapObject(ret);
    };
    imports.wbg.__wbg_instanceof_Promise_c6535fc791fcc4d2 = function(arg0) {
      var obj = getObject(arg0);
      var ret = obj instanceof Promise || Object.prototype.toString.call(obj) === "[object Promise]";
      return ret;
    };
    imports.wbg.__wbg_buffer_89a8560ab6a3d9c6 = function(arg0) {
      var ret = getObject(arg0).buffer;
      return addHeapObject(ret);
    };
    imports.wbg.__wbg_newwithbyteoffsetandlength_e45d8b33c02dc3b5 = function(arg0, arg1, arg2) {
      var ret = new Uint8Array(getObject(arg0), arg1 >>> 0, arg2 >>> 0);
      return addHeapObject(ret);
    };
    imports.wbg.__wbg_new_bd2e1d010adb8a1a = function(arg0) {
      var ret = new Uint8Array(getObject(arg0));
      return addHeapObject(ret);
    };
    imports.wbg.__wbindgen_debug_string = function(arg0, arg1) {
      var ret = debugString(getObject(arg1));
      var ptr0 = passStringToWasm0(ret, wasm2.__wbindgen_malloc, wasm2.__wbindgen_realloc);
      var len0 = WASM_VECTOR_LEN;
      getInt32Memory0()[arg0 / 4 + 1] = len0;
      getInt32Memory0()[arg0 / 4 + 0] = ptr0;
    };
    imports.wbg.__wbindgen_throw = function(arg0, arg1) {
      throw new Error(getStringFromWasm0(arg0, arg1));
    };
    imports.wbg.__wbindgen_rethrow = function(arg0) {
      throw takeObject(arg0);
    };
    imports.wbg.__wbindgen_memory = function() {
      var ret = wasm2.memory;
      return addHeapObject(ret);
    };
    if (typeof input === "string" || typeof Request === "function" && input instanceof Request || typeof URL === "function" && input instanceof URL) {
      input = fetch(input);
    }
    const { instance, module } = await load(await input, imports);
    wasm2 = instance.exports;
    setWasmExports(wasm2);
    init.__wbindgen_wasm_module = module;
    return wasm2;
  }
  var html_rewriter_default = init;

  // node_modules/.pnpm/@worker-tools+html-rewriter@0.1.0-pre.12/node_modules/@worker-tools/html-rewriter/esm/deps/deno.land/std@0.134.0/encoding/base64.js
  init_env();
  function decode(b64) {
    const binString = atob(b64);
    const size = binString.length;
    const bytes = new Uint8Array(size);
    for (let i = 0; i < size; i++) {
      bytes[i] = binString.charCodeAt(i);
    }
    return bytes;
  }

  // node_modules/.pnpm/@worker-tools+resolvable-promise@0.2.0-pre.4/node_modules/@worker-tools/resolvable-promise/esm/index.js
  init_env();
  var __classPrivateFieldSet = function(receiver, state, value, kind, f) {
    if (kind === "m")
      throw new TypeError("Private method is not writable");
    if (kind === "a" && !f)
      throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
      throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
  };
  var __classPrivateFieldGet = function(receiver, state, kind, f) {
    if (kind === "a" && !f)
      throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
      throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
  };
  var _ResolvablePromise_promise;
  var _ResolvablePromise_resolve;
  var _ResolvablePromise_reject;
  var _ResolvablePromise_settled;
  var _a;
  var ResolvablePromise = class {
    constructor(init2) {
      _ResolvablePromise_promise.set(this, void 0);
      _ResolvablePromise_resolve.set(this, void 0);
      _ResolvablePromise_reject.set(this, void 0);
      _ResolvablePromise_settled.set(this, false);
      Object.defineProperty(this, _a, {
        enumerable: true,
        configurable: true,
        writable: true,
        value: "ResolvablePromise"
      });
      __classPrivateFieldSet(this, _ResolvablePromise_promise, new Promise((res, rej) => {
        const resolve = __classPrivateFieldSet(this, _ResolvablePromise_resolve, (v2) => (__classPrivateFieldSet(this, _ResolvablePromise_settled, true, "f"), res(v2)), "f");
        const reject = __classPrivateFieldSet(this, _ResolvablePromise_reject, (r2) => (__classPrivateFieldSet(this, _ResolvablePromise_settled, true, "f"), rej(r2)), "f");
        if (init2 == null)
          return;
        if (typeof init2 === "function")
          init2(resolve, reject);
        else if (typeof init2.then === "function")
          init2.then(resolve, reject);
      }), "f");
    }
    resolve(x4) {
      __classPrivateFieldGet(this, _ResolvablePromise_resolve, "f").call(this, x4);
    }
    reject(reason) {
      __classPrivateFieldGet(this, _ResolvablePromise_reject, "f").call(this, reason);
    }
    get settled() {
      return __classPrivateFieldGet(this, _ResolvablePromise_settled, "f");
    }
    then(onfulfilled, onrejected) {
      return __classPrivateFieldGet(this, _ResolvablePromise_promise, "f").then(onfulfilled, onrejected);
    }
    catch(onrejected) {
      return __classPrivateFieldGet(this, _ResolvablePromise_promise, "f").catch(onrejected);
    }
    finally(onfinally) {
      return __classPrivateFieldGet(this, _ResolvablePromise_promise, "f").finally(onfinally);
    }
  };
  _ResolvablePromise_promise = /* @__PURE__ */ new WeakMap(), _ResolvablePromise_resolve = /* @__PURE__ */ new WeakMap(), _ResolvablePromise_reject = /* @__PURE__ */ new WeakMap(), _ResolvablePromise_settled = /* @__PURE__ */ new WeakMap(), _a = Symbol.toStringTag;
  function resolvablePromise() {
    return new ResolvablePromise();
  }

  // node_modules/.pnpm/@worker-tools+html-rewriter@0.1.0-pre.12/node_modules/@worker-tools/html-rewriter/esm/base64.js
  var __classPrivateFieldGet2 = function(receiver, state, kind, f) {
    if (kind === "a" && !f)
      throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
      throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
  };
  var _HTMLRewriter_elementHandlers;
  var _HTMLRewriter_documentHandlers;
  var _a2;
  var { default: initWASM } = html_rewriter_exports;
  var base = html_rewriter_exports;
  var kEnableEsiTags = Symbol("kEnableEsiTags");
  var WASM = {};
  var initialized = new ResolvablePromise();
  var executing = false;
  var HTMLRewriter2 = class {
    constructor() {
      _HTMLRewriter_elementHandlers.set(this, []);
      _HTMLRewriter_documentHandlers.set(this, []);
      Object.defineProperty(this, _a2, {
        enumerable: true,
        configurable: true,
        writable: true,
        value: false
      });
      if (WASM.code && !executing) {
        executing = true;
        (async () => {
          try {
            const DecompressionStream2 = !("DecompressionStream" in dntGlobalThis) ? (await Promise.resolve().then(() => (init_sd_streams_compression_esm(), sd_streams_compression_esm_exports))).DecompressionStream : dntGlobalThis.DecompressionStream;
            await initWASM(new Response(new Response(decode(WASM.code)).body.pipeThrough(new DecompressionStream2("gzip")), { headers: { "content-type": "application/wasm" } }));
            initialized.resolve();
            delete WASM.code;
          } catch (err) {
            executing = false;
            console.error(err);
          }
        })();
      }
    }
    on(selector, handlers) {
      __classPrivateFieldGet2(this, _HTMLRewriter_elementHandlers, "f").push([selector, handlers]);
      return this;
    }
    onDocument(handlers) {
      __classPrivateFieldGet2(this, _HTMLRewriter_documentHandlers, "f").push(handlers);
      return this;
    }
    transform(response) {
      const body = response.body;
      if (body === null)
        return new Response(body, response);
      if (response instanceof Response) {
        response = new Response(response.body, response);
      }
      let rewriter;
      const transformStream = new TransformStream({
        start: async (controller) => {
          await initialized;
          rewriter = new base.HTMLRewriter((output) => {
            if (output.length !== 0)
              controller.enqueue(output);
          }, { enableEsiTags: this[kEnableEsiTags] });
          for (const [selector, handlers] of __classPrivateFieldGet2(this, _HTMLRewriter_elementHandlers, "f")) {
            rewriter.on(selector, handlers);
          }
          for (const handlers of __classPrivateFieldGet2(this, _HTMLRewriter_documentHandlers, "f")) {
            rewriter.onDocument(handlers);
          }
        },
        transform: (chunk) => rewriter.write(chunk),
        flush: () => rewriter.end()
      });
      const promise = body.pipeTo(transformStream.writable);
      promise.catch(() => {
      }).finally(() => rewriter === null || rewriter === void 0 ? void 0 : rewriter.free());
      const res = new Response(transformStream.readable, response);
      res.headers.delete("Content-Length");
      return res;
    }
  };
  _HTMLRewriter_elementHandlers = /* @__PURE__ */ new WeakMap(), _HTMLRewriter_documentHandlers = /* @__PURE__ */ new WeakMap(), _a2 = kEnableEsiTags;
  WASM.code = `
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
JDPV/MM8rm5k3Yg6QJ3L/MvsWQes86obXYe3PLBctdyy3LXctNyzPLKctlyzXLb0Wp9YuTaxTWJj2cptQludTWNj2BbbRLZaG99GtwlsPJvSpral2jg2ut1m
t9pP20/YT9qP2rfYj9gP24/ZHzU8aHjZ8KHh/wEAAP//LJ3TY1yP04eLrW0jbeo2PdW3tpVF1sZZ46ztPcsszyaLbFDbtm2mtm3r/V28/8DczcxnnudiPkV+
Rl5GHkeeRjZFa8caxP5GG8aqYptic+Nz4kXxKXF8fFycEMfEZ8bR8cL4/Dg2PiE+Od4y0S4hS0gS4sTJxEiEhIxCxiOTkAkIDZmLgAgWGY7MRuYj05HRyESE
imRKM6mSVGnqbOp06mTqVOpb6lfqR+pripjWpvXp5pkWmVaZhpmWmcaZ35nPmT+Zv5nN2Y3ZLdkHZS/K3ZVNq1pVda96hnmLeYKpxrzB3MRcxZzHXMR8wJzD
vMBwsZ+wHpwbN6RobdFfQg1iJ2I74h9Ca2JdYgNiE2JT4jdCW2I3Yn1ic+JXQntSW5KObCd7yElyiGwie8k28h9yL0oPSj5FQhFTHlCfUl9Qr1Grqdepj6g6
2l3aM9oD2hPaU9pz2kPaY9o9WhM6lw4z/Awak8ckMElMPPMys5rZkDWDpWTtZM3kTOTM5Rg4XA6Pw+JQOWSOjtOf6wfJIB5cAhpBFmgGsaAQHA7KQQuo5i/k
X+NX8xcJVggqBOXiFeJS8UHxOvFl8WlxTrxdvFu8WrxFfEF8VrxWfEa8THxYvFg8WzpPOkw2DGoN/VW0gj4r+kEToO7QQKgZVAvqAf1TvFPUhYZAo6ChUE+o
DTQAGgwFoP7Qa0VN6KPijOKbokSVVdlUIRWsQlQT1Ig6pZ6mwWhALU8r0Sq1ci1Kl9D10TfRN9I30LfSP9A/0sMGm8Fh4BgOGquMy42bjSuNi41RU8wUMRWY
h5hXmVea35jfmRdaSi3FFp0lbamwlFhilh0WvwW27LTute6z7rZtsJXb9tr22RbYTtm22DbZNtp22RbZ9tu22nbY1tou2Y7b1tiUjvuOB457DqaT6vQ7MS6n
K+YKuEIuh8vteub66arnbu3u6p7rPgnvh4/BR+AsXAlvgsvh0/AO+AB8GY7De+CL8Cl4or+zf6y/h7+Xf7i/vZ/gH+nv5/8UqBX8HPgR+B74E3ge6Bh8F1gW
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
S8KR6lImUZZRMpQFlDQlSllEiVNilOWUhZQoDaH1pfenR+gxeoBeTA/SEXqI7qMn6aX0+4yGzKbMYmaQGWYGmBFmHVYXlpGlZ11iXWRdYL1hPWe9ZX1iPWA9
Zj1i/WS9Y31j/WLVYH9mjeF6uGFulBvjlnD9XBXXwjVzlVwXN8A1cG1cNVfLHcl/z//M/8T/yP/Cny6cKaQICcJ5wllChnC+kCqcK7wg7SDrKDPKhDKpDJYV
y2IylQySiWVlMrnMLyuVlcsEMo2ML7PIojKt0qzkqfer96oPq4+pD6p3qY+qSzVpTVJTokE0Y3SjdSW6Up1LP9403FnqzDrjTsRZ7oy7Y26vO+pOuJPukNvj
ht3G8MnY/lhVfGF8abwyvjy+IA6k+qYGpwalhhVm0Fa0F21DO9F+tB6tRQfRMNqAnodOoyXoMrQJ7UIb0XF0OboEXYlG0G50KVqKVqArsXuw+7AjcENxw3Az
cENwe3ANixoVjStCikqK/HgH3oVP4N34AF6KN+PteD5ehtfiBfgIHsJz8Gx8Bs/DC/Eg/hvxBxEiqUlykpSkIilJepKTpCNZSBqSlsQliUg2UmPKdMpWyi7K
eco5yibKGcpByjbKHsphSjVlI2Uv5QDlBGUL5TiFS+PTkrRS2jT6TPo6+hL6AvpW+nr6CvoaehV9MX0tfRF9FX05vYK+lL6NvoG+jN6O2ZrZgdmX1YPVk5XP
wrPcLDvLxrrLesIaxO7N7sAeym7EHs5uyG7HHsbuyO7KHsjuwW7Cbs4uYLdit2A3Zjdgd2a35o7nruVu4V7k7uOu4m7jnuKu427mrufu5q7kbuDu4I7nr+Dv
5jcQ/OajBC0F9QW/+LUFjQRNBHUEf/gtBM0FXwUNhV6hTBgVIkK90CLMCH1CWKgVRoRhoVlYJUwIs0KP0CZ0CY1Ck7BE2EvqlNqld6VdZEnZa9kr2VvZDdk2
2RXZWtkz2XbZBdkh2S7ZYdkx2RvZR9kl2R3ZFllIViFzyu7KDvxv/Z2VHZdtkP2QnZe9kF2UlSgzSq8yqfQpYWVCmVK6lWVKj1KirlafVl9Xn1TfVl9SX1Hf
VJ9RX1Qv0SzUrNUs0yzSLNCs0VRo7mifayfqJukm6MK6jG69/pP+g/69/ov+u+G34Yfhl+Gn4Zthimmi6ajJaLaYf5l11j/WEc6Yc51zsXOHc6tzrbO7e4H7
gHu1u8ydcefcW93L3evce9yV7l3uLe4V7oXule5D7iXuw+5t7kVupQ/yyX0KHzF8KXY6djl2NlYduxq7FtsU3xJfH98c3xAfnRqfGpcak5qaOos+ir6M3oQ+
iT6NPoi+gr6NvoHejd6MvoU+jq5G70IfQO9Ev0ZPw83GHcAdwo0vshali1JF2aJM0S78Qvxa/FL8efxhfBPPdvw6fDV+G/4o/hh+AV6J34NfhN+HV+Pv4jfg
t5IqSVWkJaQwKU2qIOVIJaQMKUbKkpaSykilpM/kJpQiygPKXcpbSg3qB8odyk/KH8pvylfKY8pHyjfKLcoLyifKF8p9yl/KZ8obygraPPoF+nX6Gfo1+mn6
Lfpd+k36Sfpx+il6Nf0y/Qr9PP0E/Rj9HP0e/Tv9ByOP2YPZk9mdmc/cwFzCXMTMMRczlzLrsQpYRJaPNZI9mo1nq9lM9nR2EXsmezabxp7HnsSewmax89nT
2GS2gK1gT+FO5Z7nNuE14n3hNuXV5r3i/uA24zXmfed+5dbgteK15v3ktuH94r7nTuZP5a/i7+f/J8gTDBWMEHQW9Bb0EAwTDBCMEXQRDBeMFhQImgmbCw8K
PwpPCHcJbwt3C78LrwsPCLcLjwpfCR8L7wm3Cs8KNwu/Cb8K3wofCQ8JdwrPCZ8J3ws3CX8LjwnfCM8I1wmfCm8JfwpPCk8JDwtfCk8L+0rdUli6TVotvS69
L+0uy5P1lQ+XD5J3k4+TT5S3lDeU35QNk6PkHeRj5B3lLeQ15F3kU+Q15e3lI+W15c3kk+T15N3lA+X15T3kDeTN5duVVcp9yo3KDcqFyi3KrcqVysnq2eo5
aplaqdaoFepT6sfq5+pX6nvql+qn6kdqr+aM5pDmhOaoZqdmm2arZovmlWa/5rhmn+aw5phmh+a05rX2rbZAN1M3S7dct0pn0h/R1zfUNqAMdQwNDd/0v/Q/
9c8Mzw11jS2MLY11jM2NzYxNjQ2MtY2tjHNM80xzTdNN00xXTWdN503VpnMmp9luvmiuYalpMVuNVpPVYXVaXdbatvq2mjayI+GIOPY56jmbOps5WztHOq87
jzvvOy86TzgPOS84jzofOW84bztPOa86TzrPO685nzrPOv+58twl7hvuv+4f7nqe5+4anqvuMZ5X7mr3Z/dr9wP3R/cXd2PPL/dX93v3S/dj9333T/cn9xu3
waf1WX0a3+RAYUAYkATEgctBVKheSB15FHsQexu7H/sQ3xvfH78aPxrfFz8ePx0/Eb+SuJzAp9ApbKooNSdVmOqKqYOph2mF6YEBMJ0wX9Cf0cMwIzEDMV/R
39DtMJ0x3TF9MCMwgzFDME0xVGwJNok9hT2CPYo9gT2H5eCoOByOiWPhCDgu7iyuaVFlUW/CQ3w7QkvCM/wn/GN8R8I/PIpQn/AK34JQh/AB35DwC/8N/x1/
H9+UUJvQiFCTVIt0hjSUfJV0ibSLdIy0l7SHtIO0jbSfdJx0gbSTdJDUlDKH0oHaljqIWkBtQ21GbUdtSO1KHUaV0ZbT1tLW0GrTiXQ8/TX9H/0t/QP9G70G
4we9H7MvcwVzHXMVcw1zGAtgCVkMNpUtZE9mL2IH2E42wnaxK9gedik7x06z/exydpTdgTuD+5HbnEfkDeRN403n/cebynvMG82by5vDG8frx5vMG84j8/A8
Cm8QbyZvGI/Kw/JG8Ui8SbxZvDn8Gfxj/MP8I/xD/DkClmCmACtoKWwl7CbqKJotGioaJhormitCi9qKhog6i0aIBogGiQaLCkXTRMNFXUQtRa1FvUV9RQWi
+aIxol6i7qKB0sHSQdIh0uFSudTtDEifSh9Ln0sfSR9Kn0l7ycxynhyU6+VN5Bw5IifLuXK5HJIn5BH5O7lD7pMz5UI5W56WK+VWOUvulmfkg+UiebHcLnfK
YXlbuUdukdvkOnlcflt5WXlReUd5Wjna8VB5TXlJeVd5X3lFeVZ5VHlMeVx5U3lO+UA5RW1UG9R6dQ3NT/Vn9V/1V/Un9S91Tc1lzQ3NE021Zo/mmeaR5oXm
tuaS5pbmiuaO5qbmmua65rnmrvae9rP2y//OT5qOpdugO6jbrTuiO6Dbr9um26UL6U/quxg6GZobWhlaGnoaWhjaGDoYOhp6GPoYehoHGnsYRxgHG/saC4wD
jHnGfsZhxv7GIUa8iWZCm+imIhPOhDW9Mr023Te9Nb0xvTTdNt013TH5zEGz11xsDptDZr/5urm5BWVpZaljaWapb2loaWppYGlpga0Ja8gatgasEavX2tXW
xdbC1tTW3tbW1srWzdbS1szW2EZ3cBxMB9vBcNAcKQfiOOw45DjgaOuc4Bzt/On86Pzh/OKs6frlrOGq6R7s7uUe5hnkmebp4MF6enmInomeyZ7ens6eHp4p
nkJPJ09/T33POM98T1tPvqe7Z6RnsKefZ6Znumeep8jT1TPQM9fTxzPLU+TD+Rb5VvhSvogv4av0+X1pn89X7CvzeX1LfVnfQt9yX6kv44v6KnxxX4lvamBa
QB7QBfQBdcAZUAUcASjgCdgD2oA10DI0M0wKW8JLwovD+ogxsjWyPbItcjF6Ofo39iVWK/4v9iuGiv+OfY1Vx+/Hb8Rvxh/F78WfxK/Hb8WvxW/HH8cxicIE
OnE18TBxM0FPsVJ7Uo8y98oG5xyFSowEw8EwMWxMEWYuhoFRY2Zh5mMmY2iYORgupg1mOoaFEWOkGB4GxMzATMIoMBoMCYPFXMBKcXKcDKfAVeMu4wYVlRfp
CHrCOMJ8AoYwnNCfgCVwCf8RRhAAAo4wndCYMJTAJxQSRhNmEQYRxhImEeYSGpLqkX6RWpMfkr6SbpM+k2qQ35D+kOqTv5MakT+RzpPqkd+SHpE+kp6QXpMe
kJqSf5Oak5+RapIbkz+QXpDek5qQUWQ6hU0lUwlUIZVJHUUdQZVTMVQWlU+VUYuoIJVEnUplUHHUaVQadRY1Sp1AnU8dTZ1HVVLF1JlULJVInUKlU9U0Be0g
7QCNQu/KaMTowujI6M5ozOjLaMLozejFaMYAGC0ZPRndGAWMCczhzI3MLcydzE3Mzcz/WKNYOVaKVcUKseNsH3sfewN7F/sy+wr7PPsx+wb7DvsEeyP7Fns7
+xR7P/sw+yz7AHsoj88L8dw8G28vr5K3llfBS/NW86I8iOfnxXkK3nqejlfOk/PW8ay8JbyxvCqekefluXgJXoSn5BXxz/L5Ao6AJqAI6AKuoL3QJPKL4qJy
kVykEK0TrRYRxZBosWiNaKVIJ9KKNoliIoMIEVlFUpFatErkFKlEdlFOlBIVixaIgqIlIqPIIkqIwqKQyCb6TzpMOlI6SpqQxqQRaVQalvaXHZCvlm+Rb5Zr
FWvkL+QP5dvlX+VX5DUUJ+T35ffk1fJ98ify2/I78lvyz/JT8r3yN/L38l3yq/JD8vPyk/IL8o/yy/I/8mvys/JH8t3yn8omqm/KdqrPysaq90qU6pOyueq3
8p+yrqqVqobqu/KrspGqlqqpyq62qK1qh7qLpp2mnqaFpr2moaa+5p+6maarJqD5qvmu+aJBaWtq/2jqaWtof2p+a/5pGmsbaT9r6mtBHU93TndJd153WndG
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
0yXTO9Mv0zfTPdMp0yezKVM/+zPTIts62zbbLtsmezt7Nns+ezl7JXsuezJbnb2ePZ29lj2T3Vz2uuxV2aeyj2UfymbkpuaEOW1OlRPk9DldTpkT5cCcLPe7
/Gf5n/J/5d/K61XUqPhR/qu8fkWdClSFp/JyZbOq5lWdsa2w7bAdsS2wd7HDix4UKYlsooKoIQqIPKKcqCYyiQZiZ1In0gnyXvJJ8n7yLvIh8h7yMXI7Wgda
J1oerTWtFa05rS2tL60jrTutK+0dbQ1jI2MlYzljK2MDYx1jFWMFYxNjLWM9YwtDyBQxBUyI+YL5jPmU+Zz5hDmXtYdVwVnBSXGOcrZwjnEOcs5wdnH2c3Zw
wpxrYDV4ATwPngT3gkHwMHgL/ATeAIfxHXwrfxH/hGCf4IDglOC04Lxgr2C3YJfgjKCncLhEIJktEUqGSkSSCRKGRC7RS2gSrKSvhCoZK5komSyRSEAJRoKW
4CWQRCxhS8ZJmBKihCCZLymUzJAQpHgpUbpcukq6WnpCelyKktWW1ZWthU5Di6Hj0B7oHHQCYkJHoL1QJXQKWgGhlEuhddAuaA20CjoP7Yd2QIugk9Bq6Cy0
HtoEbYCOqg6p9qt2qKpVB1QHVadVV1SnVMdV51V7VddVe1THVDdVt1QV6kq1WCPQCDUyDV8j1Ug0Dm2ZdoG2RItoS7ULtY10Tt1g/SD9EP14/TD9OP0I/VA9
oN+tf6ovM1QYFhrKDTnDIsNiQ6kha0gb7hhfGJ8YXxrvGh8ZbxkfGB8a3xjvGe8bl5immWeZZ5q3mXeYt5o3mreb71oeWZ5Z7liuWp5YblqeW35YrlheWh5a
blteWa5b7lkuWa9Yr1kvWC9aW9rz7O3sje3d7N3trexN7Z3tbewd7T3sjezN7G3tTeyt7b3s+fapDovD6jA7NjreOfo7+zllzo2uZa51rp2ura7Vrg2uNa4t
rk2u7a7lro8ugpvoJrmJ3uleqXe+t8jL8ZK9k7wzvKB3spfrnebFemd6ed4JXppX5S30Krw6L8Er9LK9Ya/Ay/DivXyvzMvz8X2gL+eP+dP+pB/xB/wuf8qf
8Zv8fv9iv9cf9yf8FX7YX+Iv95f5g/6uwd5BIDgoWBDsExwS7BHsF+wZHBwcGOwW/BC8H3oY+hj6HPoSuhNqXfw4dC/0PnQidDf0IPQ89C/0LvQrlAgj4Xj4
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
qnNVGxNXEtcTB8h3ElcTtxI9kz2SRclVyTXJZcmVyUXJFckFycXJK8lrycvJq8mvSVgKnkKktqUmpcelS9NNMw0z9TONM7UyzTMNMrUzdTN1MvsyNzP1srWy
tbP9sqOys7JzsrOzR7NHsgeze7P7s5uz27IXsluyh7Lbs7uzJBAJQsFZIBGcDeJBDDgHxIIIEAVSQRxIAEP5YP5OvnqhWqFNoagwoNC/0K/QtzCngC6MhI+C
JxCfEJuQKzGrMUswSzErMKsw13G3cDdwLfDjiROIE4kHyTLKXuo3el12M3Zjdn12I3YTtot9m32LfZvzRHBXcFJwTnBNcEJwR3BTcFbwXHBGcEpwW0ATrhM2
ErWX9ZF1k7WRDZB1l/WQ9ZT1k7WV9ZJ1kvWXNVI0UNRV1FDUVixWLFEsUixUzFecUB1WbVUdVLVR0zTHtMe1h7RvtZ31HfXd9Z30bfVd9Ov0XAPPMMI0zjTG
NNA01vTC9K9JY1FbdBaZRWuRWgwWhUVl4VlmW2dZnVa3dav1h/WnVWe7Yr9kZznoDqbjOfAWeAlcA+4BT4HrwBXgBfAO+AxcBe4AD4CbwDngDfAYeA3cBu4D
1bxfPTW9Hz2fPPW9jbwNvXW83z31vL88Dbw1vAwfwUf0YX10H8mH85F9eJ/Xt9W3xffRBwvMDMwKlAWQAUwAFZgdQAfggckBRAAbmBLUBjXBTLBORd2K+hWr
KlZUrK5YWSEO6ULKkCAkDRlDB0KIMDwMDcPCyPCmcFl0YnRddHX0duxo7EzsQOx67GzsS+xF7GTsWmx57HHseOxi7FXsQexS7FDsdGxf7HzsScxcdb3qRtW9
RL/kgOTAZN9k7+TG5NbkluSt5O3knSQphU+RU9jU3tTu1M7UntTM9Iz0lPSS9NJ0h0zrTFGmc6ZXpmOmR6Zbpk+mZ6ZLplOmVeZApmG2QbZJtlF2dPbf7PPs
3ezt7MPs4+z97JvsxeyV7Ivszey17KPspey97PWsFrSDftAFekE5aAN1oBsMgEHQDApBFagGZSAfBEAlaAQdoBTUg1bQA/LAeD6a35f/nh9UKCtMKswtYArY
Aq4wGrkBsxmzEfMAN414hHyU/IrymrKPup/6hd6W3Ybdmt2SfYf9lPOA85DzXvBG8K/gqeCL4K3gleC1YJxslGyIbLRspGyYbLKsRDZRViobIyuTjZWNkE2S
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
7I9PVl3WVPZT2lHWQaaSdpa1k3WVDZVNkA2XwWVMWVpWKVsreytbJdsm2yhbI7sjOyG7Jbsmqy//Ieskby9ny9Fyr5wjZ8jnyDFykTws/yZ3yavky+Sr5Ffk
2+V75Oflx+QX5afld+Uv5E/k/8m/y7/If8kbK5opOir6KgYpBiqGKoYrxirGKSYqyhTTFbMVOIVKYVE4FHaF569hu0CxVLFdseGvUXFIcVpxXnFfcVdxT/FF
8UnRFNZW2UDZSdlG2Vk5UjlE2U9ZpJyghCihyqt5rFKg5CllSp1SrTQqDcp/lBuVp5U7lfuUj5SvlLeVC1S1VVJVkeqzcriqVIVWTVRRVXjVJBVJxVfJ/pq5
GpVFFVDlVUtVx1VnVBdVb5V3VQ9UT1TPVK9U71RvVG9Vn1WfVLXUNdW11Y3UTdSN1a3VLdVd1L3VA9Xj1FPVf/43KlcT1dPVBDVfzVJz1UK1WK1Ta9RutUet
UvvVPrVDHVdn1KB6sXqh+oB6o/qgerN6t3qbepd6vfqU+rj6vPqa+oH6tvqn+pf6u7q65o36q/qd+r26oaaxpr6mq6aPpttf2bSXZqRmqGasZoZmpma6hqTB
aegahoan4WsEGq5GpJFpFBqNRqcxaWwap8arCWhCf0X6tCajWafZpNmm2a7ZoTmgOaW5rDmvua25p3mkeaL5VzPE/U1TT1tXW0vbT9tL20VbpO2t7agdrS3R
ztAStDytUEvUsrVWrUWr14a0AW1U+0euXKfdot2u3avdpd2t3ak9qj2lvaK9rr2pfaB9pf2ubaRroeut76brr5+mC+lUOrfOpMvogrqFus26Fbq1unO6I7oT
uou6PbpdusO643/9y+u6H7oPurp/X9W1/+ublelpeqyeqifo0Xqk/o/17deD+qX62YUV+jX6jfrt+h36Y/pL+if6F/p7+gf6eobGf3eWdTN0Ndj0wwxjDRMM
ow1TDFhDueGPvsc3gAWZQW8wG7yGpKHKkDIkDMsN/xjWGbYYDhsOGfYanJGjhuOGU4YzhkuGC4ZrhuuGW4Z7hvuGx4aXhjeGGsamxgbGOn935rY3djGOMvY1
FhthRoOxlnGusaFxjnGaUW1kG1VGrlFmlBtFRokRNKaMBWOFMWfMGAPGSmPYSDamjSeM+40njWf+urO3jM+MzU2tTI+Nj4w0UzVTXVNL03vjJ2NbU2PTR2PP
v1ZgV9No0wDTeNMf7Q1lgprKTDATzkQ1sUwYE9skMqlNTlPEtMi02rTAtNI037TMtNG0wbTetMb0x3DeZzpsOmC6ajpvumm6bxqbfW16Z/pg+mj6aqpjrmHu
ZG5tbmCeZp5tHmwebp5oHmWeblaaMWaIWWHmmSVmqJlpjpl9ZqI5bDabs+Yd5jXmhebN5qPm3eaV5vGWBea15pvmbeaCeZ35qvmW+aH5tvmb+Z35nrm2pYGl
p6W7pYVlmKWrpb6loaWHZbqFYxlrGWUZY5ny16cstXAtZAvGQrHgLQSL3iKw8C0mi9HitFwymy1rwlaL1+Kz/B6NWSKWmCVuSVhClqwlZymxllqnWedY51oh
VpgVbkVbUVaclWqlWXlWvpVr1VkdVrfVafVaPdagNW7NW0FrxrrQuta6wbrdusa6xbrNKg8cth6xHrdesl603rM+tj6zvrd+sd5M1bHVsjW0tbC1s7W3dbJ1
t/W1TbSNtc2yTbchbDgbwUa1MWw8m/Kvnamx6W1mm9XmsrltgC1ri9kyttW2CHyV7Ybtke2a7ZbtkO267bKtvv217a2to72fvad9iH22PZCYbp9gR9rh9u82
uV1iZ9s5dpXd+dfMttkd9nn2Kvsi+0I71R6zL7evs2+277Fvs++277MfsO+wH7Ofsp+zX7Nftf9jv26/Y7/719j+Zv9pr+6o4ajtqOto4GjsaOZo4+jnGPB3
x3KZA+/AOcgOgoPqYDkYDp5D4BA6BjvkDq1D57A4KhyVjpWOgmOnY5XjnuOB447jvOOD473jqyPmrOn85vjiuO2o47zpqO+85hjlHOls4xzuHOYsc45xwpzT
nEOcA5xtne2cgDPjXOEsOBc4E86ezpDT4/Q7Tc7NTqVT7Zzn9DmXOT84W7qeO087fzhruq46G7r2Oz8567ruOt85G7t6uLq5djtLXHWAb06xq79rnIsAuFxa
l9C12iVxOVx813TXQJfUpXeNch13MVzbXXtdBdc11ynXTtd111nXftcR12XXfFd34Jfrg6st0A4YCHQFWgOtgO+uMoAJ4ICZwCSghns2gAZswCLAC0QBP7AM
EANxIAv8C3iAHKAFLEAEOAbsAM4A24GzwCXgFvAIuAl8ARq4W7obun8Cf0TFHu4O7qHuie65bjQE5aa6uW65O+Ze6F7uXuEOuIPuLe617kPuI+517mPunt6V
7ovu2+5n7hfuO+4b7tfuFp46nnqeap6anm/u5p76nsaeL+4GnpGeiZ7RnrGeIk8/TwcPzUP16DxzPBCPyoP18DwSD96D9DA9Ak9t7wJPwePwrPWc8Oz2/B8A
AAD//2zdZ1QTedzo8XTSwAQS1y6wYtdFsbe1d2mCgIICAgKCooIFRbGgCTWEXoJl1bWkF9JDEjJppFd11bWXXV3LqmuwcIPPc1/cc+6bgTOvZuYkJ+f/mfP/
fZXnbOc8zTfPac7xzunOac9Jz735UQcdQgokfT83uNsyiOQ4hycNJRF/1BZnkAargRNIC0krSctJ8aQU0nZSJmk36STpOKmLVEIqIwlI+0mnSC0kKolJaiNd
ItWQLpPYpB4Sh9RL0pBcpFuk26R7JB8JQv5K+kB6QXpPgpGxZDQ5hLyCPIYcQZ5MnkJeRl5JHqzBziNvJI8mp5O3k3PIWeRCcj55L7mYfIh8nHyaTCJXkhvI
reSL5Ovkq2Q6mUXmkiVkObmHrCTfId8l3yM/J38gfyZDK4dW4iqxlSMrR1dGVM6pXFa5rTK+cnXl2spjlYWVBZWZlRU/Zileq7xYWV95pfJqZXvlb5WaSnOl
uvJO5d+V/1Y+r3xS+a6SUDU4jeO/yvuVf1RiqwKqRlQ9rBxahav6qSq0KqrqZsv4qilVS6omVi2r2lgVUxVdta5qS9W2qq1Vu6t2VBVU7a0qriqrKq8a3FtE
rWqoaq5qq2qvWlA9WLVdWz1Y5Y6tTqzOrC6oPlxdWn2qmlxdUV1ZXVNdW91Yfay6tXp0JqP6RrW8mlvNq2ZWd1frq1XVT6ofV9+p/lbdX/2lGlYDr0HXBNQM
9jhxNdHnQ2rM1YSaoTW7agpr9tUcqDlZ01ajrlHUSGqsNXdqPDWmmj9q+mr+qvm75s+axzVfa5C1qNqBmtG1Y2pxtWNrl9fOro2snVW7vnZN7brajbWxtWtr
U2qzatNrJ9furE2sPVi7v/ZY7cnac7UVtWdqq2oraxtq62sba9tqb9RerKXXsmu1tZxaRS1Qq6/tq/2j9nHt19ovtX/Xfq9F18HriHXBdcPrQupG1Y2tG1mH
rRtfF1W3sG5+3aq65XVL6jbWratbXRddl1SXWpdZt7Muq66z7nzdb3WMOladsO5O3dO6R3V/1b2pO0f5UAen+Or66/AUIiWMEkgZQxlKwVAmUOZQZlPmUz7X
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
TPJc8kryVvJJ8kXyTfJLEiOtL20sbSJtKm0pbSttJ+0g7STtIo2Tdpf2lCZK+0kHS4dKx0jHScdLp0pnSmdLQSkkpUlhqVAqk6qkDiku9dXNPELSfGmRtERa
KV0gXSxdJl0n3STdLN0i3Sc9KD0urZGekZ6TXpJekV6T3pW+lb6XfpR+khLSn9JfUhJaH22MNkGbo63RNmh7tAPaDY1De6A90V5obzQR7Yf2RwegA9HBaBI6
FE1GR6P/oJPQ6egMdA46D6WgZJSJslA2ykV5qBBF0G+oElWhatSNmlAz6kGtdXs1O+pEvagLzUSz0Gw0jOajpWgZWo5WoNXoAnQJuhbdiG5Ct6K70H3ofvQg
egg9jp5Cz6Bn0UvoTfQu+hR9gb5EX9ftxBrIGslayNrKOsm6yuJlPWXJsgmy6bKZslmyeTKajC7jy1CZWqaVYTKLzCnzyYKyHFmuLE9WIIvISmSlsnLZBtlG
2SbZVtku2W7ZHhkh2y87KDskOyI7LquRXZBdlV2X3ZLdlz2WvZW9l32WfZFB8nbyTvJu8u7yvvI+8oHyQfIh8iT5UHmyfKx8onyafLp8jnyenC5nyllyrlwl
18p1cr3cIDfKzXXDV4fcKXfJ/fKgPFWeLo/IS+Rl8gr5Qvli+VL5Svkq+Tr5Jvku+RH5cfkp+Vn5Ofl5+UX5Ffl1+S35bfkj+VP5c/kL+Uv5K/lb+Tv5J/ln
+Tf5d/kPeUNFE0VTRStFa0VbRQdFR8VQRbJihGKUYqxiimK6YraCrGAquAqxQqKQKlCFXKFQqBV6hUFhVDgUToVH4VVkK/IVEUWJYqFiqWKZYoVitWKtYr1i
m2K7Yqdit+KI4rjivOKK4qrigeKR4rXijeKd4oPik+KngqSMUdZTtlS2VrZXdlZ2U8Yreyv7KpOUw5TDlf8oxyonKCcqpytnKGcr5yjJSlBJUUJKupKh5Col
SplSqTT8riL5lAFlqjJNmaHMVOYpy5WVyipltXKpcrVyvXKDcqNyi3KPcq9yn/KoskZ5XHlKeU55SXlZeUV5S3lb+VD5RPlS+Vb5Tvle+V35QxmrqqdqqGqk
aqJqqWqlaq3qqOqiilP1VvVVDVANVA1RjVCNVI1VTaybw81RzVdBKoaKpeKrhCqZSqXSqvQqswpXuVV+VYqqWFWuqlYtUC1SLVatUK1UrVGtVa1TbVBtV+1Q
7VHtVR1SHVbVqE6prqhuqO6r/lM9Vj1RvVa9U31REapfqlh1fXUDdRN1c3ULdSt1G3UndXd1orqPuq96oHqwOlk9Qj1SPUY9Vj1RPUc9Vz1fDaghNU3NVnPV
PLVKrVHr1Jjaorap7WqnOkWdqk5TZ6gL1UXqYnWJukJdrd6g3qTeoj6oPqo+rT6rPqc+r76gvqS+or6hvqW+p36ifqZ+oX6pfq1+r/6orq9ppGmqaaFpqWmt
aavprEnU9NH01cjUgzVDNEM1ozXjNBM1TI1AA2sQjVQj0+g0eo1L49ekafI0+ZpCTURTrCnRrNKs0WzRbNPs0OzR7NMc1hzXnNCcqZs/X9Hc1NzW3NXc0zzQ
PNI807zRvNV81HzWfNeQtPW1cdqe2j7aYdqR2tHasdroG/HTtbO0s7VztYCWooW0VC1Ny9TytPy67bpIK9bKtaboy6/abG2BtlS7QLtcu1a7TrtRu1m7S7tP
u197QHtIe0x7XHtCe1p7RntW+0L7SvtaS2i/aX9o6+sa65rqmuma6zro/tZ11nXRJer66frrhuiSdMm6kbqxunG6QTpAR9FBOqqOqWPrODq+TqBDdCKdXKfW
4Tq3LqBL06XrMnVZumxdWJevK9AV6iK6Ml21boFuqW6ZbrluhW6dbr1ug26r7l/dbt0R3THdcd0J3Q3dHd3Tuhn8W90nHaH7rvuhI+kb6BvqG+mb6zvq4/W9
9EP0w/X/6Efrx+mn6qfpZ+ln6+fo5+pperqerxfoyXqJXqpX67V6s96id+t9+hR9qr5QX6SP6Iv1Jfpy/RL9av0G/Ub9Fv02/Qn9ef1F/SX9Zf0V/TX9Lf1D
fa2+nqG+oYGhoaGR4S9DM0NLQ5wh3jDAMMgwxJBkGGoYZZhsmP67HjbHMNcAGiAD08Ax8AwCg9AgN9gNXkOKIc2QZcg3lBnKDQsMiwzrDRsMmwyb6+bQ+wz7
DQcMhw0nDacMFw1XDNcNNwy3DF8NPw0kYyNjY2MTY1tjR2NnYzdjd2Nv4wDjEONw4yjjaONk4xTjVON0I9kIGEEj1Ug3MowcI88oMAqNYqPcqDJqjTqjwWg1
2oxOo8voMQaNGcZsY46xwFhuXGFca1xn3GjcYtxrPGA8ZqwxnjJeNl4xXjPeNT4yfjB+NNYavxl/GmNN9U0NTI1Mf5mam9qY2pr+NnUyxZl6mnqb+pj6mgaa
hpqGmUaYxpjGmsabpprmm0ATZGKYWCa+SWCCTUITapKZFCaVSW3SmnQmg8lqsptcJq/JZwqYUkypphxT2FRgKjIVm0pMFaYqU7VpgWmRaalpmWmVabVprWmr
aVvdXmi3aY9pn+mI6aipxnTSdMp01nTBdNF0xXTddNt03/Sf6bHpiemZ6aPpk+mLiTDVmr6Zfph+mUhYDFYfa4Q1xVpjnbEuWG8sEeuL9cP6YwOwgdggbDA2
BEvChmKjsUnYVGwaNgObic3F5mMUDMKYGB8TYSgmw+SYCtNgWsyAGTEv5sNSsLplD5aB5WJhLA/Lx0qwUqwMq8CqsQXYQmwxtgxbga3EVmGrsXXYemwjtgnb
iu3AdmH7sONYDXYKO4ddxK5hN7Cb2B3sLvYQe4o9x15gb7CPWC32DfuO/cIamtuYO5g7muPNPcy9zX3M/cz9zUPMI82jzePNE8wTzZPMU80zzbPMZDNohsxM
s8AMmxGzzmww280Os9PsMuNmt9lnTjGHzfnmAnORudRcYV5kXmLeYt5p3mfebz5gPmw+aj5lPmM+a75qvmW+a75nvm9+aH5ifml+bX5jfmcmzCRLrKWepb6l
kaWxpamlmaWlpY2lraW9pYOlk6WLpaulmyXO0suSYEm09LMMsgyzJFtGWEZZRlvGWMZZ5lgmWSZbplqmWaZbZlvmWugWtgW2SCxSi8aitegsBgtm8VlSLFmW
bEuRpdxSYam0VFsWWBZZFluWWJZallmWW1ZYVlnWWvZYDliOWGosJy2nLGcslyzXLfcsjy1PLS8tby3vLJ8thOW7hWRtaG1qbWFtY21nbW/taO1k7Wztau1p
7WsdZB1sHWIdbh1hHWkdbR1vnWCdYp1unWGdU7dlJFsBK2RlWJlWnlVgha1Cq8hat5a2Kq1qq95qtJqsmNVhxa1ea9CaZc22FlqLrBFrmbXausi63LrKus66
3rrRutW613rIWmM9b71gvWy9br1jvWu9Z31ofWx9bn1pfWt9Z/1o/Wr9Zm1ga2hrYmtua2Frbetm62HraetlG2QbbEuyjbD9Y5tqm2abaZtlm2cj2yAbzyaw
CW2ITWyT2OQ2pU1rc9jctpAt11ZoK7EttFXaqmzVtiW2FbY1trW2DbaNtk22zXVbwj22fbZjtuO2Gtsp2xnbBdtF22XbFdtD203bXds9233bY9tz23vbBxvJ
/tn2xVZr+2b7ZWtob2ZvZe9s72qPs3e3x9sT7H3s/eyD7EPtw+0j7GPt4+0T7dPs0+0z7HPsc+2AnWKn2Vl2rp1nl9kVdpXdaLfbnXaX3W3PtGfZ8+wF9kJ7
kT1iL7GX2yvsC+0r7Cvtq+3r7RvtW+zb7bvsB+2H7cfsx+0n7Gftl+xX7Dfst+137PfsD+yP7M/tL+yv7O/sX+3f7bGOeo5GjiaOpo5mjtaO9o4ujjhHD0cf
xwDHIMcQR5JjuGOEY5RjtGOMY5pjumOmY5ZjnoPuYDjYDp6D74AdQofUIXMoHRqH2WFzuB1eh9+R4kh1hByZjrAjz1HoqHIscCx2rHFsdmx17HDscux2HHXU
OE45zjjOO246njqeOV44XjreOT46vjl+OH46GjnbObs7ezn7OPs5+zsHOAc5BzuHOJOcQ53DneOdE52TnJOdM51kJ90pdEqcqFPhVDo1Tp3T6DQ5rc6gM8OZ
4ww785wRZ7mzyrnAudS5xrneucG5ybnV+a9zp3OXc7dzj/Og84jzuPOE85LzivOq87rzhvOm86nzufO986Pzk/Ork3DWOr87f9YtoGJd9Vz1XQ1dTVx/uZq5
Wrhaujq5urjiXQmuRFdf10DXUFeya7hrpGu0a4xrhmuOi+6iuCAX1cV2cVxcF8/FdwlciEvskrkULo1L69K7jC67y+XCXamuNFeuq9BV5VrgWuba4PrXtc21
07XLtdu1z3XYdcx13FXjOu0667rouuS67Lrquu664brteux65nrh+uSqhzfCG+NN8JZ4a7wN3hbvgHfD4/BeeCLeHx+ED8XH4ePxCfgkfDI+E5+Fz8cpOBVn
4mycg/NwPi7FZbgS1+M23IE7cQ/uw/14AE/BU/F0PBPPwrPxPDyCF+OVeBW+DF+Or8I34//i2/Ad+EH8EH4YP4IfxU/hp/Ez+FX8Ok5yP8Af4Y/x5/gL/BX+
Dv+Ef8YJvBZv7G7lbu1u7+7o7uru5o5393H3dQ90D3IPcSe7R7onuqe5p7tnuslu0A25WW7YjbhFbqlb5da6dW6T2+Z2u33uVHeaO+TOdue5i9wl7jJ3pbvK
Pc4z1jPeM8Ez0TPVM80z0wN4IA/Vw/XwPHwP4hF7JB6pB/VoPAYP7nF7PB6vJ9OT7cn1hD15noin2FPhWehZ5FnmWeVZ69ni2e3Z59nvOeQ57jnjOeu56bnr
+c/zyPPU89Lz2vPG895T6/nh+en55Wnkbext6m3ubeFt6W3tbett5+3g7eaN83b3xnt7exO9A72DvUne4d4R3n+8o71jvOO8E7yTvNO8Qq/Ei3o1XoPX7PV5
07053gpvlXeZd7l3tXe7d4f3uPe096z3gveS97L3qvea9573lfe19633vfeD97OX8NZ6f3rr+f7ydfB19P3t6+qL88X7evv6+Ab6knwjfGN843zTfTN9c3zz
fJCP6RP6EJ/MJ/cpfBqfzmf1+XxhX9CX4kv1ZfpyfBFfia/cV+Vb5Fvn2+Tb4tvlO+k75DviO+E74zvru+y76rvpu+2747vve+h74Xvpe+t753vv++T77Pvq
I3w/fL98JH89f0t/W387fyd/Z383fw9/T39f/zD/cP8Y/1T/NP90/wz/XD/ZD/gpfoaf5xf6xX6ZX+PH/E4/7vf4vX6fP+AP+tP8Gf6QP8ef5y/0R/wl/jJ/
uX+Bf6F/sX+Jf7l/hX+lf5V/nX+Df5N/i3+bf6d/t3+vf5//qP+c/7L/hv+e/4H/of+p/7n/lf+N/7P/i/+H/6efFIgJNAo0DjQN/BWgBboEugXiAt0DPQI9
AwMDgwKDA0mB5MA/gTGBcYHxgSmBqYFpgZmB+QFygBKgBxgBZkAfsAXwgCfgDfgDwUBqIDuQHygMFAVKAqWB8kBFoDKwLLA8sDKwJrA3sC+wP3AsUBM4GzgX
OB+4FLgdoAaeBp4HPge+BojA90BMsGGwabBlsHWwfbBTcG1gSHB0cHpwZnBWcE5wfhAIUoJQkBFkBdlBTpAXFAYlQWlQFlQG9UFTEAtagragK4gHfcGUYH6w
IFgUrAouC64IrgyuCq4PbgxuCf4fAAAA//9U3WVQG3vY+P2VeLJxkuB195b2tKfuGjS4BwgWPBBIvUSJB+JSpe5y6nrq7u7u7qfts927zz3/+0XT4QUMM/tj
J8kn3+va3rircXfj3sb9jYcbjzSeaDzdeL7xRuPjxmeNrxvfNL5tfNf4ubGf8lvj98YfjZASVhKVNCVdyVSGKSOU7ZTtlR2UHZWdld2U3ZW9lf2VA5QDlSOU
45XRyhhlrDJOGa9MVKYo05UZykxlljJbmaPMVeYpS5Tlynplg1KhnKGcpZyjVCpVSq2ySalXmpQ2pVPpUwaU85ULlUuUS5WblFuU/yi3Kncqdyl3K/co9ysP
K48pjytPKVcrryivKW8r7ygfKZ8oXyrfKz8p/1P+UgIqnAqvQlR0FVPFUrFVAlWwKlQVoWqr6qzqqhqo+ks1RDVUNUw1UjVaNV4Vp4pXJaqSVMmqFFWGKluV
o8pViVV5qiJVqapcJVPVqupUDSqDyqKyq5wqt8qrWqBqVS1VLVOtVq1XbVRtUm1W/aPaqtqm2qPaq9qnOqA6qDqrOqe6qLqsuqa6obqjuq96qHqs0qi+qf5T
/VDh1Hg1UU1V09UMNVPNUXPVweoIdaS6rbq9uou6l7q3uq+6n3qweoh6qHqYerh6pHqMepx6mjpZnaHOUeep89Xl6kp1lVqhnqduVCvVKrVarVFr1U1qvdqs
tqlb1A61U+1S+9Xz1YvUS9Wr1KvVa9Tr1ZvVu9V71PvUR9RH1cfUp9QX1ZfUV9XX1DfUt9X31PfVD9TP1M/VL9Vv1e/VX9Tf1L/UoAbWEDRkDUVD1TA1wRq2
hqPhagSaEE2oJkwToYnUdNH01PTS9NH000RphmiGakZpxmjGaSZqJmkma6ZohJpYjUiTqEnWpGrSNVmabE2epkhTqanXKDSzNU6NW+PReDUBzXzNMs0KzXbN
Ls1uzV7NMc1xzQnNSc0pzVnNOc15zXXNLc1jzWvNG81bzUfNZw2oJWgRLV3L0AZpeVqBNlgbog3TttF20nbWdtH20fbV9tNGaQdrh2iHa0dqR2vHacdrJ2mj
tXHaJG2qNk2brs3R5mrF2hJtmbZCW62VaRu0Cu107QytVmvQmrXN2hatR+vVBrTztUu067SbtJu1W7T/aHdqL2gvai9pL2uvaB9qn2qfa19q32rfaz9pv2p/
aH9pcTq8jqhj6Fg6to6rC9JF6Nro2uk66Drpuut66HrronSDdMN0w3UjdWN043QTdJN003RCXbwuUZekS9al6zJ0Obp8nUQn09Xq6nT1ugadQjdTN0s3WzdP
p9I16Uw6s86qs+scOpcuoFuqW65bo1ur26jbovtHt0O3W3dAd0h3RHdUd0x3Vnded0F3UXdZd1N3W/dC90b3QfdR90n3n+6XDt9EaKI2sZrCmiKaIpsoTT2b
+jQNahraNLppTNPYpnFN45smNsU1xTclNKU0TWvKbBI3SZtqm+RN9U3Tm2Y2zWlqbFI2NTUZmkxNzU0tTd4mf1Og6S/9YP0w/XD9OP0E/ST9FH20PlYfr0/Q
J+mT9Wn6DH2KXqzP0xfoC/VFeqm+Wi/T1+oV+pl6lV6tb9Kb9Va9Te/Se/Re/WL9Nv12/UH9If1R/XH9af0l/UX9Vf1N/V39E/0L/Wv9G/07/Uf9Z/0X/U/9
Lz1ogA1kA9vAN4Qa8g1FhlJDmWGWYa6h0aAxGAxmg8XQYvAbAob5hlbDSsMqw1rDBsNmwz+GbYYdhr2Gg4ZDhsOGI4ZjhlOGs4YLhouGy4arhgeGh4bHhheG
N4adhreGd4YPhh8G0Igz4o0EI9XIMnKNPGMbY1tjO2N7YydjZ2NfY3/jQOMg41/GwcZhxpHGUcYpxmlGoTHamGBMM6YbM4yZxhxjrrHIWGqUGsuNFcZKY72x
wagwzjXOM2qNZqPV2GJ0Gz1Gn9FvXGhcalxuXG1cY9xo3Gzcbtxh3GvcZzxg/Nd42HjaeNZ4wXjD+MT4yvjG+Nb42fjV+M340giYIBPRRDIxTEwTz8Q3CUwR
pjamtqb2po6mzqYuph6mnqZepgGmKNNA0yDTENNI0yjTGNMEU7Qp1hRnijclmESmZFOGKdOUb/KZ5psWmBablphaTZtNW0xbTbtNe037TIdMx0zHTSdNZ0zn
TOdNF013TPdND0xPTK9Mb00fTZ9M300/TZAZZyaZaWaBOdTcxdzV3NvczdzD3NPc3zzAPMg8wjzGPNY81ZxmzjDnmgvMEnOpucJcY643K80ac5NZbzaazeYW
s8PsNLvMHvN88wLzQvMS8zrzBvNG8ybzFvMu8wnzbvMB87/mg+bD5iPmi+bL5ivmq+Yb5pvm2+aH5nPmT+bn5tfmN+YP5p/mX2bAgrPgLQQLyYJYmBauhWfh
WwSWEEuYJcLSxtLR0s7S3tLZ0tXSy9Lb0tcywDLQMsgy2DLEMtQyzDLGMsEy0RJtibckWVIsqZY0S44lzyKxSC01lnpLg0VhmWOZZ1FaVBadxWixWGyWZkuL
xWnxWxZYWi3LLKssqy1rLOss6y0bLBstWyw7LDstuyx7LPstBywHLectFyyXLVct1yy3sI3vTy3PLC+w/e+vLW8sby2fLV8t3y0/LIAVtOKseCvBSrSSrRQr
zcq0sq0cK88qsIZZw63trR2sHa2drF2svay9rX2s/a1R1oHWv6yDrUOsQ63DrSOto61jrOOtE6yTrdOsQmu0NdaabE2xplszrNnWHGu+VWIttBZZy6zl1gqr
zFqL7Zivtyqs060zrLOsGqvWqrMarEar1eqwuqwB63zrYusS61LrMutK61rrBusW61brdusO607rLuse617rPut+6wHrQesh62HrEetx6wnrSesp6xnreetF
62XrFetV6w3rTett6x3rXet960PrY+sT6wvrK+sb61frd+svK2CDbCQbYmPZuLYgW5gt3BZhi7T9nlrV0dbZ1tXWzdbfNsA20DbINsE20TbJFmOLtcXZRLYk
W7It1ZZpy7Pl2yS2IluxTWort1XYKm3Vthpbra3BNsM2yzbbNsc216ax6WxNNoPNZLPaWmxOm8fmty2wLbIttrXaltlW2jbZNtu22Lbbltv22f61HbQdsh22
HbUdsx23nbCdtJ23XbXdsN2y3bbdsz2yPbZ9tX22fbF9s323/bCBzVAzrpnUTG5GmunNjOagZl4zvzmyuVdz7+a+zf2a+zcPaP67eUTzsOYxzeOaJzZPbp7a
LGpOaU5vzmrOaRY3FzaXNEuby5rLmyubq5obm+c1y1vqW2a2NLZoWvQthhZji6/F3xJoWdDS2rK8ZWXLqpZNLVtatrfsatnTcqjlSMvRluMtZ1rOtpxrOd9y
teVay82WWy23W+60PGh51BJuj7C3s3ewd7R3svew97X3tw+y/2UfbB9iH2ofZh9lj7Mn2BPtSfZke469zF5jV9in22faZ9nn2Ofa59kb7Vq7xW63u+0+e8C+
2L7E3mpfbl9jX2vfaN9uP2Y/Z9+QccV+zX7Tfst+2/7U/tr+1v7NDjlgB95BdoQ4Qh3hjraOdo72ji6Ovo7+jlGOMY7JDqEj2iFyJDmSHamONIfYIXEUO8oc
1Y5aR51D7lA4ZjhmOWY7tI4Wh93hcLgcboffEXAsdKxyrHGsd2xwbHZscWx1bHNsd+x07Hbscexz/Os46DjsOOo45jjhOOk45TjjOOu44LjsuOK46rjpuOW4
47juuOt44HjteOv44Pjs+OL45iA6Kc5gJ+KkO7lOnjPMGeFs42zv7OTs7uzl7O3s4+zn7O+McnZ0DneOdU5wTnbGOuOc8c5EZ5IzxZnqzHWKnfnOAmexs9S5
0rnauca5zrnJ+Y9zq3O7c4dzj3O/86DziPOE867zvvOh85HzsfOZ873zkxNyEV0kF8sV5OK5+K4QV6grzBXpaufq5Ors6u7q6+rn6u8a4IpyDXYNcf3tGuoa
6RrlGu+a4JromuYSuhJcya4UV5or3ZXpynJluzwunyvganWtc613bXBtdm1zbXftcu1xHXAddZ13XXBddV1z3XDdcj12PXM9d71wvXF9cH10fXX9cP10QW7Y
jXNT3TQ3081y89wR7jbudu727g7uzu6e7l7u/u4o90D3X+4J7lHuse7J7inuqW6hO9ad4E50Z7hXuFe517jXuje4N7k3u7e4t7l3uHe797j3uQ+4D7mPuE+5
z7jPuS+6L7kvu6+7b7jvuB+4H7ofu5+6X7jfud+7P7q/ur+5f7h/uQEP6IE8sAfnwXtIHrKH6qF5EA/dw/SwPTxPsCfUE+Zp4+nk6e7p6envGeCJ8gzyDPYM
8QzzTPRM8Uz1iDyJniRPmifTk+MRe/I9BZ5CT7GnxFPqkXrKPNUemafOI/fUe2Z5ZnsaPUqPyqP2aD06T5PH4DF5zJ5mj9vj8/g9rZ6lnuWeVZ51nvWeDZ5/
PFs9Ozw7Pbs9ezz7PIc9RzynPGc8lz1XPDc9tz0PPY89zzzPPa897z2fPV88Xz3fPD88vzyAF/JSvQwvy8vzCrzB3hBvmDfC287b3tvJ29nbxdvV283b1xvl
Hegd5B3mHeUd4x3rHeed5J3sFXqjvTHeeG+CN9Gb7E3zZngzvVlesbfIW+xN95Z4C71l3gpvlVfmrfMqvI+877yfvV+9VB/kY/n4PoEvzBfui/D19vXx9fP1
9w3wDfEN9Y3zDfON9o3xTfBN9sX7EnxZPrEv15fvK/IV+0p8Fb5aX51P4Zvum+mb52v0qXw6n8Fn9Fl9Nl+Lz+5z+Jy+Bb4VvlW+Nb71vs2+bb6dvj2+A77D
vqO+Y74Lvou+S77Lvmu+W77bvju+h77Hvqe+575Xvje+974Pvp8+ih/yE/10P9PP8rP9QX6eP9gf5g/3N/gV/un+2f65/nn+Rr/Sr/Yb/Sa/3e/0e/x+/2L/
Mv8q/xr/Wv86/0b/Jv9m/yH/Ef9x/0X/bf8D/2P/C/9L/yv/G/9b/zv/R/8X/y8/FIAD5AAjwAywAuwAN8AL8APBgZBAaCAy0C7QKdAt0D3QO9A30C8wIDAo
MDgwJDA0MCwwIjAqMCYwNjAuMD4wIRAfEAUSA0mB5EBqICOQGSgMFAWkgbJAeaAiUBmoDsgCDYEZAVPAHLAErIHmgD3gCPgDCwILA4sCSwJXoMPQVuAqdBNa
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
diTtZNrZtAtpd9LupT1Ke4oVxz/QNxqhdHw6MZ2azkxnp/PTg9ND0yOw+rhLek+sOx6TPj59anpcemJ6anpWem56XrokvSK9Kl2RPjt9Xro23ZhuTW9J96Uv
Tl+RvgZrjbekb0vfnb43fX/6wfQT6efTr6XfS3+c/jT9OdYd/5eOyyBlMDKCMvgZYRmRGR0zumR0y+idEZUxImNixrSMlIz0jMw/jbEsY16GO8OfsTXjUMap
jBsZtzPuZzzLeJHxJuNjxpeMXxm4TGImGSuI+ZkRmV0ye2f2yxycOTxzTOb4zGmZiZnpmVmZ4kxZZl1mfebMzDmZykxNpj7TmunM9GT6MhdkLstck7kpc3vm
nszjmRcyL2feyHya+TzzY+aXzO+Z+CxyFi2LmcXO4mbxsF64LdYJ/66E+2GN8Kis2KyErJSszCxxVn6WJKskqwwrg/+nC56XpcoyZFmybFn2LDdWBi/PWpm1
NmtL1tas3VmHs45lnco6n3Ut61bWvayHWU+yXmAN8Kesr1gBTM1mZnOy+dkh2RHZ7bJ7ZPfJHpg9LHtk9tjsqdnC7Njs+OzE7LTszOz87LLsyuya7Lrsmdmz
s5VY/fu7/XVke7P92QuyF2cvzV6evSZ7XfbG7M3Z27J3ZR/OPpF9LvsSVvzeyr6b/Sz7bfbH7M/Z3//UvswcXk5oTtucjjldcnrkjMyZlDMlZ1pOdE5cTmJO
Zo44pyinMqc2R56jzzHltOT4/9S7e3IO5BzNOZFzPudizuOcTzlALjGXnMvJDcYa3fa5nXK75/bM7Z0blftX7ujcsbmTc6NzRbkpWJlbmFuZW5Nbh7W5c3KV
uU25zbmuXG/uotzW3OW5q3M35G7BCt29uQdyj+eezj2bezH3Zu6d3Ae5z3Lf5L7L/Zj7JRcQw2KKmCFmi/niMHEncVdxD3EfcX/x3+Lh4rHiCeLJ4lhxojhb
nCcuFBeLy8VVWJE7RzxP3CQ2iC1im9ghdokXYC3uSvFa8XrxZvE28Q7xLvEe8UHxYfExrMi9LL4tvid+IH4ufoXVuJ/FX8U/0TdiCXlIHisvKC88LzKvXV7n
vO55vfKi8v7OG543Mm903qS8KXnxeaK8lLysvMK84ryyPEXevDxVnibPlufIc+cF8pbkrchbm7c+b0vetrwdebvy9uUdyDuUdzrvbN75vKt5t/Pu5z3Me5wH
5lPyOfnB+Z3ye+T3yR+EtbQj88fnT86fhrW0Sfmp+en5Wfl5+ZJ8aX5lfnW+LF+er8k35Fvzm/Od+W6sqV2Y35q/LH9F/qr8Nfnr87fn787fn384/2T+mfzz
+Vfy7+bfz3+W/y7/S/73fLAAV0AsoBYgBcwCXkEI1tL+rmh/97P9CgYVDCsYUTC6YGzBtIKYguSCtILsgtyC/AJJQVFBZYGsQF6gKJhVMK9AWaApMBRYC5wF
/oLlBWsLNhdsL9hTcK3gVsHjgmcFbws+Fnwp+FbwowCU0CR0CUvCkwgkYZIISRtJZ0lXSS9JH0k/yUDJ35LhklGSsZIJksmSaZI4SYIkSZIhyZUUSEokZZJK
rJKVS2ZIZkvmSpQSjUQn0UssEjvWyQYkiyWtkuWSVZI1kvWSTZJtkv2Sg5KLkuuS25K7kvuSR5JnkpeSd5KPkp8SsJBQiBQyC9mF3EJBYURhu8LuhQMKhxSO
KJxQOKVwWmF0YVxhYmFxYWmhrFCO1bDqQnNhc6GzcFHh8sI1hesLNxVuKdxXeKDwWOGJwlN/GtjrhXcLHxS+LnyHda8/CqEiQhGtiIFVr22LOhb1KupbFFU0
pGh40ciiMUWiouSitKKsopyivCJJUWlROVa7ziiaUzSvSFmkKzIW2YtcRb6i5UWritYUbSjaXLS1aGfR/qLjRSeLThedLbpYdKPobtGrovdY5UotDi5uU9yu
uGtxd6xuHYh1rROLY4tTi9OLc4sLiquKG4pnFM8pVhabiq3FzuIFxSuKVxd3LOlS0r/kL6w4HVsyEWtOU0sKS0pKGkpmlChLNCX6EmNJc4mjxFuysGRlyZaS
rSV7Sw6UHCo5UXKq5EzJlZJrJTdK7pW8KHlT8qHkU8m3kp8lpFJ6KbuUXxpW2qa0fWnH0u6lfUv7lw4sHVw6vHRM6cTSKaWxpYmlyaW5pfmlJaWVpdWlstK6
0obSWaWNpepSXamh1FLaUuou9ZbOL11Yuqx0Vena0k2l20v3lh4qPV56svRs6ZXSG6W3Sx+UPip9WvoCK0i/lv4qhaR4KUmKSBlSjlQgDZNGSjtJu0h7SHtL
B0gHSodIR0hHS8dKJ0mnSmOkImmaNAPrSfOkEmmJtEIqk9ZLZ0jnSVVSndQgNUmtUrvUK10oXSJdJV0n3SjdIt0m3Sc9Ij0pPSe9LL0mvY3VpI+lL6Wvpe+k
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
tecJLxq1mmZ+C9/Od6BK4+J7+F6+j+/nB/jz+Qv4C/mLMLlp5S/F9GYFfxV/Ez9MEC6IEEQK2gjaCtoJ2gs6CLoLegn6CAYIogQDBYMEfwmGCIYJRgvGCcYL
JggmCSYLogUxggxBpiBbkCPIFeQLJIIiQbVAIZghmCWYI5gnaBSoBGqBVtAkMAgcAr9goWCJYKlgmWCVYLVgrWCdYKNgi2CrYJdgt+Co4LjgpOCU4LzgsuCZ
4IXgleC14K3gneCD4LMACAaDCcH0YE4wN5gfLAgODW4X3CG4e3CP4J7BvYP7BOcE5wZLgguDHwU/Dn4S/DT4WfDz4BfB7BBuSFAIPyQkpG3IuJAJIXkh2hB7
iCPEGeIK8YR4Q3whgZD5IQtCFoasDlkbUhVaHVoTKgutC60PbQhVhM4NVYWqQzWhTaGGUGuoPdQR6gldELowtDV0RejK0FWhm0O3hO4K3Rd6OPRY6MXQK6H3
Qx+Gvgx9G/ou9GPop9DPoV9D24S3C28f3jG8c3iX8K7h3cJ7hfcO7xPeN7xfeP/wv8KHhA8NHx4+Mnx6xIyImRGzImZHzImYF9EYoYxQRWgjdBFNEfoIc4Ql
whbRHOGPmB+xOKI1YlXE5ogtETsjjkaciDgVcTriQsSViOsRNyJuRdyNuB/xIOJhxOOIJxFPI15GfIr4HPElAheJjyREkiKpkbRIdiQnMiwyIrJjZKfIzpFd
IntG/hWZHymJrI6sjbxRdbvqXtWzqo9VX6t+YPNmqNWMam61oDqyun11p+qe1b3/zJgZWS2sjq2Or06uzqkuq66onlWtrNZU66r11aZqa7Wj2ls9v3pR9Yrq
VdXrqzdVb63eWb2v+kD18epT1eeqr1Xfrr5b/aj6SfWz6lfV76t/z4Wh1rBqwmra13Su6VrTvaZnTe+avjWDaobVjK5JrEmuyajJxqa+yGtm1cytaazR1Ohr
TDWWGl9NoGZFzY6a8zU3a27X3K15WPO45k3Nx5ov6MsnvIwuY8rYMq4sVBYuayPrJOsm6yUbgM1uGSobIRslGy+bJJsmi5GJZBkyiaxEVi2TyRpks2WNMrVM
LzNj01qcMo/ML1soa5Wtlm3BJrYckh2XnZKdl12WXcWmtTyUPZW9kL2TfZR9k/2QQbW4WkIttRapZdXyakNqw2rb1rav7Vzbo7ZXbd/agbWDa4fVjqodWyus
FdUm1WZgk1hKaytq62un186qnVerrNXW6mtNtdba5lpHrbt2Se3a2o21m2v31h6oPYzNXjlfe7H2au0NbPbKm9r3tR9rv9X+qP1VC9Xh6yh1tDp6XWhd27r2
dZ3rutX1qutTN7ju77phdaPrxtZNrIurS8fmqhTVSesa6ubUqepMdba6BXWL6lrrltWtrFtdt75uU92Wup11u+v21p2qu1J3E5uf8qTuWd3rug91n+u+1sFy
ipwu58iD5MHyUHmEvI28g7yLvJu8l7yvPEo+TD5CPko+Xj5RPk0eLY+Vx8uT5ZnycrlcPkOuweamWOXNcpfcJ58vXyhfLG+VL5Nvlm+X75Hvlx+Sn5CflV+S
X5M/lb+Uv5d/lH+Rf0dfvhHqufWR9R3ro7AJKKPrJ9RPxiaf5NSL6wvqi+rL6iuwySdz61X1TfXmek/9svpN9Tvr9/yZcHKs/kT9qfrz9Zfqr9bfqX9Y/6T+
Wf2L+lf1b+u/1v9X/7MebMA1EBtoDYyGoAZBQ2hDZEPbhg4NAxr+ahjSMLxhZMOEhriG5IbKBlmDAptcom7QNhgbbA2uBn/DgoalDcsb1jRsatjbcKLhcsO1
hrsNDxoeN7xqeNPwveFnA6DAK4gKsoKmYCrYCp4iRBGmiFS0xSaX9FT0VvRTDFAMVvyNTS0Zr5iomKyYpohXiBRJihRFuiJTkaMQK8oV1YpahVzRoJiumKWY
o1ApjNjsEqfCr1ikWINNLdmm2K84ojipOKe4oLiuuKW4p3iseK74/wAAAP//TL2Fdxr5/4dbd3dvmrqn7u422ABBAgQnSAgEJ8wwgxYGhgYGCYW6u2y93Xbr
7rJ1T73dtltv73d7f+ee+0fMmfN5vc/zPG9s/9g+237Yftnq2Bvam9hb23Psvex97aPsk+2A3WB32Ofby+2EPWlfZF9qX2Ffa99o32bfbT9gP2Q/aj9hP2U/
a7/+2yhy3/7M/tb+xf7dXr+sS1nXsl5l/cryyorLzGUryzaWjXVMdsx0oI60Y4Njm2OP46rjkeOl44ujHtQE6gSNgEZBY6Ap0HSICjEgFsSBBJAIUkLFkB4y
QFYIgpD/c2/EoApoEbQEWg6tgjZDW6Hd0H7oT+gQdBQ6BZ2BzkFXoRvQA+gp9Py3c+MD9AOqBteGG/02bbSDO8Jd4K5wX3gwPBQe9f+ZNWbAAEyD6TAL5sBK
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
ddGN0U3RLdFt0T+iO6I7o7uiu6N7o/uiB6KHo8ejJ6Ino6eip6Nnomej56MXohejV6JXo9eiN6LXozejd6J3o/eiD6KPoo+jT6OV0efRZ9EX0dfRN9H30Q/R
j9FP0S/R79Ef0V/R6rFqsVqx2rG6sXqxhrFGscaxZrHmsRaxlrFWsTax9rGOsU6xzrHcWJ9Y31jvWL/YoNjg2NDY8NiI2MjY2Nj42ITY5Niw2NTYtNj02KzY
3BgQI8WoMVoMjDFizFh+jBXjxHgxfqwgVhgTxsQxSUwak8XkMUWsKKaMqWLFsZKYLqaPjY49Nb00nSCuWF5ZHlpeWGpZZxRUt1azdrK2sI6yjrBSrOcyy5Na
q88YMpYbk8Zlxjul90r7GXIyuZlemd6ZPpm+mX6ZwZlBmeGZkZkRmVGZ0ZnxmUmZyZmpmemZGZmZmVmZOZm5GSBDydAzzAw7w8lwM7yMKCPNyDLyjCJTlFFm
VJmSjDqjzywwRA2EYZFhoWGdYalhq2GbYafhsGGzYZPhL8Mhw1XDGcNDQ6XhieGR4YXhqaG68Z3hu+GXoYmxirGmsYGxtbGesbuxjbGlsa2xvXGsMdeYY5xo
7G/MM04wDjNOMY43DjHOM/KMoJFrZBiVxmLjSeiJ1Wy1WGGrx+qzxqwrrIus66yrrOutW63/9YJ1vjIf5EN8S3xHfTt8e30nfA98Z30PfY9973zt/N99lb6f
vre+Lv62/ub+9v56/qH+vv7h/kl+qd/mDxgew1uM24y3TM1+V9Y7wDlwLtwd7gH3hHvDveBBcH14GDwFng7Pg6mwAi6BUb85ASfQhD8RTGCJcCKaSCUqEplE
NrE4sSSxPLEiMc8DelQejQfyWD12j82zyoN5Ap51noWelZ6lnjWecs9qzx+ew57tnrOeTZ7dns2ejZ4TnnOebZ5nnneefzyvPO895z3NvXc8Hzx3Pdc9FzzV
vbW9nz11vPW8Db11vV29Y7ydvN29A7ztvOO9M71DvYO8vb0jvBO8iDfXW+Z1eG1egVfrnevVeANemlfktXvFXpZX4i33bvSu8l70HvX6vG7vem/ci3rXeh97
13m3e7d6T3kvefd5L3j/9J703vQ+997zvva28jX3/fTW87X3dfGN8o31DYcmQ1OhaVAT5Kv1h7WOrbqthq2lrZ6tr62xbYZtpK2Pra1tgG2QLcfW3dbNNsQ2
3tbJlm9j26bZDLa5tgKbwKax2WxCm85WYsNtK2wrbTtt62wLbatsbtsaW9q2xLbWts12wXbQdtp22/a37bHtie25rYH9p+27rbG9lb2+vbO9j72HfaR9kn2i
/aezKlINqYG8dE71/VeH74r0RwYivZC+yEhkDDIEGYqMR6Yis5A5CAlhI3xEjjh8bp/Pd91318fzL4Sy0EpoI7QJ2gLZ7bMkEftCe9qesS+xb7Hvte+zH7Qf
s5+2n7Eftx+xX7NX2jXIKukB6Cx0BXoM3YeeQM+g19B76LPdVLaibEPZDEeFY2dmW0aPubAoFsE2YzJMjf3XO54dIUeACCkijggjhRFtRBEpjpRFHBHd71Zs
MOKO4BEsEoksiSyNrPndhd0Y2R7ZFtkdoQcdmZ3YC6xmiBVShLZjB7C92G7sMHYVu4b9jd3BzmLnsJvYUewl9gn7jD3EvmDfsEdY3dAPrEWoY6hzqF9oQKhr
aGBodGhiaFRoWGhcaFBoVmhSaHKIEqKGZoe0IWPIHioOlYbcoXAoGsJD6VAmZA4iwflBdzARjAYrJFf9d/x/+2/5H/tf+N/4x8/vEaDFnxHviTdErXjVeJ14
43ijeJ94/3hefHwczqJZd9aT9WZ9WX92fjaY/Zmpn22Y3UXsJfYRZ4mLxAHTPSK0YMOC4wvGlxeVnywPl4+PKqNQGkm70560N+1Ld7UG0qE0no6kF6Sj6Vg6
la5IZ9LZ9KL04vSS9NL08vSK9Mr0qvTq9Nr0+vSG9Kb05vSW9Nb0tvT29B/pHend6T3pvel96cPpI+mj6WPpk+lT6dPpM+mz6XPp8+lL6cvpK+lr6evpG+lb
6dvpu+kHaXvcHY/EF8Sj8Y3xtfGl8S3xbfHNqU2pHan8zB+p3am9qYOpP1NHUodSp1KnUxdS0yqmVMyomFUxs2JeBaWiMtEwOSBJT4LJu6n7qSepN6kXqW+p
V6kvqToVjSuaV3Su6FqxL7M/M8aBZLwZXyaQWZC5Wr4wk83czNzK3M7cy9zNPMg8yzzNPM48z7zJ5Gb7ZQdmR2VHZMdlx2enZqvkVc2rlrejyolqx6qtqlI9
r2Zeixzer1Y5PXLa5LTN6ZDTMadFXsu8Onl18+rl1c9rkNcwr1Fe47xWea3zmuQ1zdtc5VqVT1WG5/bM7ZXbNLdxbp/c3rl1ckfktstdnts9Nye3Wddkbt/c
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
AA==
`;

  // src/entry/html-rewriter-polyfill.ts
  self.HTMLRewriter = HTMLRewriter2;

  // src/routes/index.ts
  init_env();

  // node_modules/.pnpm/@worker-tools+middleware@0.1.0-pre.15/node_modules/@worker-tools/middleware/esm/index.js
  init_env();

  // node_modules/.pnpm/@worker-tools+middleware@0.1.0-pre.15/node_modules/@worker-tools/middleware/esm/context.js
  init_env();

  // node_modules/.pnpm/ts-functional-pipe@3.1.2/node_modules/ts-functional-pipe/dist/ts-functional-pipe.es5.js
  init_env();

  // node_modules/.pnpm/tslib@2.4.0/node_modules/tslib/modules/index.js
  init_env();
  var import_tslib = __toESM(require_tslib(), 1);
  var {
    __extends,
    __assign,
    __rest,
    __decorate,
    __param,
    __metadata,
    __awaiter,
    __generator,
    __exportStar,
    __createBinding,
    __values,
    __read,
    __spread,
    __spreadArrays,
    __spreadArray,
    __await,
    __asyncGenerator,
    __asyncDelegator,
    __asyncValues,
    __makeTemplateObject,
    __importStar,
    __importDefault,
    __classPrivateFieldGet: __classPrivateFieldGet3,
    __classPrivateFieldSet: __classPrivateFieldSet2,
    __classPrivateFieldIn
  } = import_tslib.default;

  // node_modules/.pnpm/ts-functional-pipe@3.1.2/node_modules/ts-functional-pipe/dist/ts-functional-pipe.es5.js
  function pipeImpl() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }
    var _a8 = __read(args), o1 = _a8[0], operations = _a8.slice(1);
    return function() {
      var args2 = [];
      for (var _i2 = 0; _i2 < arguments.length; _i2++) {
        args2[_i2] = arguments[_i2];
      }
      return operations.reduce(function(acc, f) {
        return f(acc);
      }, o1.apply(void 0, __spreadArray([], __read(args2), false)));
    };
  }
  function pipe(o1) {
    var operations = [];
    for (var _i = 1; _i < arguments.length; _i++) {
      operations[_i - 1] = arguments[_i];
    }
    return pipeImpl.apply(void 0, __spreadArray([o1], __read(operations), false));
  }

  // node_modules/.pnpm/@worker-tools+middleware@0.1.0-pre.15/node_modules/@worker-tools/middleware/esm/utils/append-only-list.js
  init_env();
  var _arr = /* @__PURE__ */ new WeakMap();
  var AppendOnlyList = class {
    constructor() {
      _arr.set(this, []);
    }
    get length() {
      return _arr.get(this).length;
    }
    toString() {
      return _arr.get(this).toString();
    }
    toLocaleString() {
      return _arr.get(this).toLocaleString();
    }
    push(...items) {
      return _arr.get(this).push(...items);
    }
    entries() {
      return _arr.get(this).entries();
    }
    keys() {
      return _arr.get(this).keys();
    }
    values() {
      return _arr.get(this).values();
    }
    [Symbol.iterator]() {
      return _arr.get(this)[Symbol.iterator]();
    }
    [Symbol.unscopables]() {
      throw new Error("Method not implemented.");
    }
  };

  // node_modules/.pnpm/@worker-tools+middleware@0.1.0-pre.15/node_modules/@worker-tools/middleware/esm/context.js
  var EffectsList = class extends AppendOnlyList {
  };
  function executeEffects(effects, response) {
    var _a8;
    return (_a8 = [...effects].reduceRight(async (response2, effect) => {
      var _a9;
      return (_a9 = effect(await response2)) !== null && _a9 !== void 0 ? _a9 : response2;
    }, response)) !== null && _a8 !== void 0 ? _a8 : response;
  }

  // node_modules/.pnpm/@worker-tools+middleware@0.1.0-pre.15/node_modules/@worker-tools/middleware/esm/basics.js
  init_env();
  var basics = () => async (ax) => {
    var _a8, _b3, _c, _d, _e, _f;
    const x4 = await ax;
    const { request, match: match2 } = x4;
    const { headers } = request;
    const method = request.method;
    const url = new URL(request.url);
    const { pathname, searchParams } = url;
    const userAgent = (_a8 = headers.get("user-agent")) !== null && _a8 !== void 0 ? _a8 : "";
    const ip = (_e = (_b3 = headers.get("x-forwarded-for")) !== null && _b3 !== void 0 ? _b3 : (_d = (_c = x4.connInfo) === null || _c === void 0 ? void 0 : _c.remoteAddr) === null || _d === void 0 ? void 0 : _d.hostname) !== null && _e !== void 0 ? _e : "";
    const params = (_f = match2 === null || match2 === void 0 ? void 0 : match2.pathname.groups) !== null && _f !== void 0 ? _f : {};
    const query2 = Object.fromEntries(searchParams);
    return Object.assign(x4, { headers, method, url, pathname, searchParams, userAgent, ip, params, query: query2 });
  };

  // node_modules/.pnpm/@worker-tools+middleware@0.1.0-pre.15/node_modules/@worker-tools/middleware/esm/content-negotiation.js
  init_env();

  // node_modules/.pnpm/@worker-tools+response-creators@1.2.0-pre.5/node_modules/@worker-tools/response-creators/esm/index.js
  init_env();
  var mkResponse = (status, statusText) => (body = null, init2 = {}) => new Response(body, {
    ...init2,
    status,
    statusText
  });
  var mkRedirect = (status, statusText) => (location2, init2 = {}) => new Response(null, {
    ...init2,
    status,
    statusText,
    headers: [
      ...(init2 === null || init2 === void 0 ? void 0 : init2.headers) ? Array.isArray(init2.headers) ? init2.headers : new Headers(init2.headers) : [],
      ["Location", location2.toString()]
    ]
  });
  var mkUnauthorized = (status, statusText) => (realm = "", init2 = {}) => new Response(null, {
    ...init2,
    status,
    statusText,
    headers: [
      ...(init2 === null || init2 === void 0 ? void 0 : init2.headers) ? Array.isArray(init2.headers) ? init2.headers : new Headers(init2.headers) : [],
      ["WWW-Authenticate", `Basic realm="${realm}", charset="UTF-8"`]
    ]
  });
  var mkNotModified = (status, statusText) => (ifNoneMatch, ifModifiedSince, init2 = {}) => new Response(null, {
    ...init2,
    status,
    statusText,
    headers: [
      ...(init2 === null || init2 === void 0 ? void 0 : init2.headers) ? Array.isArray(init2.headers) ? init2.headers : new Headers(init2.headers) : [],
      ["If-None-Match", ifNoneMatch],
      ["If-Modified-Since", ifModifiedSince.toUTCString()]
    ]
  });
  var ok = mkResponse(200, "OK");
  var created = mkResponse(201, "Created");
  var accepted = mkResponse(202, "Accepted");
  var nonAuthoritativeInformation = mkResponse(203, "Non-Authoritative Information");
  var noContent = mkResponse(204, "No Content");
  var resetContent = mkResponse(205, "Reset Content");
  var partialContent = mkResponse(206, "Partial Content");
  var multiStatus = mkResponse(207, "Multi-Status");
  var alreadyReported = mkResponse(208, "Already Reported");
  var imUsed = mkResponse(226, "IM Used");
  var multipleChoices = mkRedirect(300, "Multiple Choices");
  var movedPermanently = mkRedirect(301, "Moved Permanently");
  var found = mkRedirect(302, "Found");
  var seeOther = mkRedirect(303, "See Other");
  var notModified = mkNotModified(304, "Not Modified");
  var temporaryRedirect = mkRedirect(307, "Temporary Redirect");
  var permanentRedirect = mkRedirect(308, "Permanent Redirect");
  var badRequest = mkResponse(400, "Bad Request");
  var unauthorized = mkUnauthorized(401, "Unauthorized");
  var paymentRequired = mkResponse(402, "Payment Required");
  var forbidden = mkResponse(403, "Forbidden");
  var notFound = mkResponse(404, "Not Found");
  var methodNotAllowed = mkResponse(405, "Method Not Allowed");
  var notAcceptable = mkResponse(406, "Not Acceptable");
  var proxyAuthenticationRequired = mkResponse(407, "Proxy Authentication Required");
  var requestTimeout = mkResponse(408, "Request Timeout");
  var conflict = mkResponse(409, "Conflict");
  var gone = mkResponse(410, "Gone");
  var lengthRequired = mkResponse(411, "Length Required");
  var preconditionFailed = mkResponse(412, "Precondition Failed");
  var payloadTooLarge = mkResponse(413, "Payload Too Large");
  var uriTooLong = mkResponse(414, "URI Too Long");
  var unsupportedMediaType = mkResponse(415, "Unsupported Media Type");
  var rangeNotSatisfiable = mkResponse(416, "Range Not Satisfiable");
  var expectationFailed = mkResponse(417, "Expectation Failed");
  var imATeapot = mkResponse(418, "I'm a teapot");
  var misdirectedRequest = mkResponse(421, "Misdirected Request");
  var unprocessableEntity = mkResponse(422, "Unprocessable Entity");
  var locked = mkResponse(423, "Locked");
  var failedDependency = mkResponse(424, "Failed Dependency");
  var tooEarly = mkResponse(425, "Too Early");
  var upgradeRequired = mkResponse(426, "Upgrade Required");
  var preconditionRequired = mkResponse(428, "Precondition Required");
  var tooManyRequests = mkResponse(429, "Too Many Requests");
  var requestHeaderFieldsTooLarge = mkResponse(431, "Request Header Fields Too Large");
  var unavailableForLegalReasons = mkResponse(451, "Unavailable For Legal Reasons");
  var internalServerError = mkResponse(500, "Internal Server Error");
  var notImplemented = mkResponse(501, "Not Implemented");
  var badGateway = mkResponse(502, "Bad Gateway");
  var serviceUnavailable = mkResponse(503, "Service Unavailable");
  var gatewayTimeout = mkResponse(504, "Gateway Timeout");
  var httpVersionNotSupported = mkResponse(505, "HTTP Version Not Supported");
  var variantAlsoNegotiates = mkResponse(506, "Variant Also Negotiates");
  var insufficientStorage = mkResponse(507, "Insufficient Storage");
  var loopDetected = mkResponse(508, "Loop Detected");
  var notExtended = mkResponse(510, "Not Extended");
  var networkAuthenticationRequired = mkResponse(511, "Network Authentication Required");

  // node_modules/.pnpm/@worker-tools+middleware@0.1.0-pre.15/node_modules/@worker-tools/middleware/esm/content-negotiation.js
  var import_negotiated = __toESM(require_lib(), 1);
  var weightSortFn = (a, b) => a.weight >= b.weight ? a : b;
  var ACCEPT = "Accept";
  var CONTENT_TYPE = "Content-Type";
  var VARY = "Vary";
  function contentTypes(types) {
    return async (ax) => {
      const ctx = await ax;
      const { headers } = ctx.request;
      const type = [...import_negotiated.default.mediaTypes(headers.get(ACCEPT))].filter((t) => !types || types.includes(t.type)).reduce(weightSortFn, { weight: -1 }).type;
      if (headers.has(ACCEPT) && types && !type)
        throw notAcceptable();
      ctx.effects.push((response) => {
        var _a8;
        response.headers.set(CONTENT_TYPE, type);
        if (((_a8 = types === null || types === void 0 ? void 0 : types.length) !== null && _a8 !== void 0 ? _a8 : 0) > 1)
          response.headers.append(VARY, ACCEPT);
        return response;
      });
      return Object.assign(ctx, { type });
    };
  }

  // node_modules/.pnpm/@worker-tools+middleware@0.1.0-pre.15/node_modules/@worker-tools/middleware/esm/body-parser.js
  init_env();

  // node_modules/.pnpm/@worker-tools+middleware@0.1.0-pre.15/node_modules/@worker-tools/middleware/esm/cookies.js
  init_env();

  // node_modules/.pnpm/@worker-tools+request-cookie-store@0.5.0-pre.9/node_modules/@worker-tools/request-cookie-store/esm/index.js
  init_env();

  // node_modules/.pnpm/cookie-store-interface@0.1.1/node_modules/cookie-store-interface/index.js
  init_env();

  // node_modules/.pnpm/@worker-tools+request-cookie-store@0.5.0-pre.9/node_modules/@worker-tools/request-cookie-store/esm/set-cookie.js
  init_env();

  // node_modules/.pnpm/@worker-tools+request-cookie-store@0.5.0-pre.9/node_modules/@worker-tools/request-cookie-store/esm/index.js
  var _RequestCookieStore_origin;
  var _RequestCookieStore_map;
  var _RequestCookieStore_changes;
  _RequestCookieStore_origin = /* @__PURE__ */ new WeakMap(), _RequestCookieStore_map = /* @__PURE__ */ new WeakMap(), _RequestCookieStore_changes = /* @__PURE__ */ new WeakMap();

  // node_modules/.pnpm/@worker-tools+signed-cookie-store@0.3.0-pre.7/node_modules/@worker-tools/signed-cookie-store/esm/index.js
  init_env();

  // node_modules/.pnpm/typed-array-utils@0.2.2/node_modules/typed-array-utils/index.js
  init_env();
  var bufferSourceToUint8Array = (bs) => bs instanceof ArrayBuffer ? new Uint8Array(bs) : new Uint8Array(bs.buffer, bs.byteOffset, bs.byteLength);
  var bs2u8 = bufferSourceToUint8Array;
  var byteToHex = (byte) => byte.toString(16).padStart(2, "0");
  var hexToByte = (hexOctet) => parseInt(hexOctet, 16);
  var hexStringToBytes = (hexString) => new Uint8Array(hexString.match(/[0-9a-f]{1,2}/ig).map(hexToByte));
  var bytesToHexArray = (bufferSource) => Array.from(bs2u8(bufferSource), (byte) => byteToHex(byte));
  function concatUint8Arrays(...uint8Arrays) {
    const size = uint8Arrays.reduce((size2, u8) => size2 + u8.length, 0);
    const res = new Uint8Array(size);
    let i = 0;
    for (const u8 of uint8Arrays) {
      res.set(u8, i);
      i += u8.length;
    }
    return res;
  }

  // node_modules/.pnpm/base64-encoding@0.15.0-alpha.0/node_modules/base64-encoding/esm/index.js
  init_env();

  // node_modules/.pnpm/base64-encoding@0.15.0-alpha.0/node_modules/base64-encoding/esm/base64.js
  init_env();

  // node_modules/.pnpm/base64-encoding@0.15.0-alpha.0/node_modules/base64-encoding/esm/base64-js.js
  init_env();
  var b64lookup = [];
  var urlLookup = [];
  var revLookup = [];
  var CODE = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
  var CODE_B64 = CODE + "+/";
  var CODE_URL = CODE + "-_";
  for (let i = 0, len = CODE_B64.length; i < len; ++i) {
    b64lookup[i] = CODE_B64[i];
    urlLookup[i] = CODE_URL[i];
    revLookup[CODE_B64.charCodeAt(i)] = i;
  }
  revLookup["-".charCodeAt(0)] = 62;
  revLookup["_".charCodeAt(0)] = 63;

  // node_modules/.pnpm/base64-encoding@0.15.0-alpha.0/node_modules/base64-encoding/esm/base64.js
  var WASM2 = `
AGFzbQEAAAABFwRgAABgAX8Bf2ACf38Bf2AEf39/fwF/AwYFAAECAQMFAwEAAgYrB38BQaCLBAt/AEGA
CAt/AEGRCwt/AEGACAt/AEGgiwQLfwBBAAt/AEEBCwe7AQwGbWVtb3J5AgARX193YXNtX2NhbGxfY3Rv
cnMAABBCYXNlNjRkZWNvZGVfbGVuAAEMQmFzZTY0ZGVjb2RlAAIQQmFzZTY0ZW5jb2RlX2xlbgADDEJh
c2U2NGVuY29kZQAEDF9fZHNvX2hhbmRsZQMBCl9fZGF0YV9lbmQDAg1fX2dsb2JhbF9iYXNlAwMLX19o
ZWFwX2Jhc2UDBA1fX21lbW9yeV9iYXNlAwUMX190YWJsZV9iYXNlAwYKqAcFAgALPgEDf0EAIQEDQCAA
IAFqIQIgAUEBaiIDIQEgAi0AAEGAiICAAGotAABBwABJDQALIANBAmpBBG1BA2xBAWoLxQMBBH9BAyEC
A0AgASACaiEDIAJBAWoiBCECIANBfWotAABBgIiAgABqLQAAQcAASQ0ACwJAIARBfGoiAkEFSA0AIAQh
AgNAIAAgAUEBaiIDLQAAQYCIgIAAai0AAEEEdiABLQAAQYCIgIAAai0AAEECdHI6AAAgAEEBaiABQQJq
IgUtAABBgIiAgABqLQAAQQJ2IAMtAABBgIiAgABqLQAAQQR0cjoAACAAQQJqIAFBA2otAABBgIiAgABq
LQAAIAUtAABBgIiAgABqLQAAQQZ0cjoAACAAQQNqIQAgAUEEaiEBIAJBfGoiAkEISg0ACyACQXxqIQIL
AkAgAkECSA0AIAAgAS0AAUGAiICAAGotAABBBHYgAS0AAEGAiICAAGotAABBAnRyOgAAAkAgAkECRw0A
IABBAWohAAwBCyAAIAEtAAJBgIiAgABqLQAAQQJ2IAEtAAFBgIiAgABqLQAAQQR0cjoAAQJAIAJBBE4N
ACAAQQJqIQAMAQsgACABLQADQYCIgIAAai0AACABLQACQYCIgIAAai0AAEEGdHI6AAIgAEEDaiEACyAA
QQA6AAAgBEF/akEEbUEDbEEAIAJrQQNxawsQACAAQQJqQQNtQQJ0QQFyC4sDAQZ/QYCKgIAAQdCKgIAA
IANBAUYbIQRBACEFIAAhBgJAIAJBA0gNACACQX5qIQdBACEFIAAhBgNAIAYgBCABIAVqIggtAABBAnZq
LQAAOgAAIAZBAWogBCAILQAAQQR0QTBxIAhBAWoiCS0AAEEEdnJqLQAAOgAAIAZBAmogBCAJLQAAQQJ0
QTxxIAhBAmoiCC0AAEEGdnJqLQAAOgAAIAZBA2ogBCAILQAAQT9xai0AADoAACAGQQRqIQYgBUEDaiIF
IAdIDQALCwJAIAUgAk4NACAGIAQgASAFaiIILQAAQQJ2ai0AADoAACAILQAAQQR0QTBxIQkCQAJAAkAg
BSACQX9qRw0AIAYgBCAJai0AADoAASADRQ0BIAZBAmohBgwDCyAGIAQgCSAIQQFqIggtAABBBHZyai0A
ADoAASAGIAQgCC0AAEECdEE8cWotAAA6AAIgA0UNASAGQQNqIQYMAgsgBkE9OgACCyAGQT06AAMgBkEE
aiEGCyAGQQA6AAAgBiAAa0EBagsLmQMBAEGACAuRA0BAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBA
QEBAQEBAQEBAQEBAQEA+QD5APzQ1Njc4OTo7PD1AQEBAQEBAAAECAwQFBgcICQoLDA0ODxAREhMUFRYX
GBlAQEBAP0AaGxwdHh8gISIjJCUmJygpKissLS4vMDEyM0BAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBA
QEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBA
QEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBBQkNERUZHSElKS0xN
Tk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OS1fAAAAAAAAAAAA
AAAAAAAAAEFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXow
MTIzNDU2Nzg5Ky8AAHsEbmFtZQFUBQARX193YXNtX2NhbGxfY3RvcnMBEEJhc2U2NGRlY29kZV9sZW4C
DEJhc2U2NGRlY29kZQMQQmFzZTY0ZW5jb2RlX2xlbgQMQmFzZTY0ZW5jb2RlBxIBAA9fX3N0YWNrX3Bv
aW50ZXIJCgEABy5yb2RhdGEALwlwcm9kdWNlcnMBDHByb2Nlc3NlZC1ieQEOSG9tZWJyZXcgY2xhbmcG
MTMuMC4x
`.replace(/\n/g, "").trim();
  var BYTES_PER_PAGE = 64 * 1024;
  var textEncodeInto = "encodeInto" in TextEncoder.prototype ? (encoder, uint8, str) => (encoder.encodeInto(str, uint8), uint8) : (encoder, uint8, str) => (uint8.set(encoder.encode(str)), uint8);

  // node_modules/.pnpm/base64-encoding@0.15.0-alpha.0/node_modules/base64-encoding/esm/index.js
  var _Base64Encoder_provider;
  var _Base64Encoder_urlFriendly;
  var _Base64Decoder_provider;
  _Base64Encoder_provider = /* @__PURE__ */ new WeakMap(), _Base64Encoder_urlFriendly = /* @__PURE__ */ new WeakMap();
  _Base64Decoder_provider = /* @__PURE__ */ new WeakMap();

  // node_modules/.pnpm/@worker-tools+signed-cookie-store@0.3.0-pre.7/node_modules/@worker-tools/signed-cookie-store/esm/index.js
  var _SignedCookieStore_store;
  var _SignedCookieStore_keyring;
  var _SignedCookieStore_key;
  var _SignedCookieStore_verify;
  var _SignedCookieStore_sign;
  _SignedCookieStore_store = /* @__PURE__ */ new WeakMap(), _SignedCookieStore_keyring = /* @__PURE__ */ new WeakMap(), _SignedCookieStore_key = /* @__PURE__ */ new WeakMap(), _SignedCookieStore_verify = /* @__PURE__ */ new WeakMap(), _SignedCookieStore_sign = /* @__PURE__ */ new WeakMap();

  // node_modules/.pnpm/@worker-tools+encrypted-cookie-store@0.3.0-pre.5/node_modules/@worker-tools/encrypted-cookie-store/esm/index.js
  init_env();

  // node_modules/.pnpm/@worker-tools+encrypted-cookie-store@0.3.0-pre.5/node_modules/@worker-tools/encrypted-cookie-store/esm/aggregate-error.js
  init_env();
  var __classPrivateFieldSet3 = function(receiver, state, value, kind, f) {
    if (kind === "m")
      throw new TypeError("Private method is not writable");
    if (kind === "a" && !f)
      throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
      throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
  };
  var __classPrivateFieldGet4 = function(receiver, state, kind, f) {
    if (kind === "a" && !f)
      throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
      throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
  };
  var _AggregateErrorPolyfill_errors;
  var AggregateErrorPolyfill = class extends Error {
    constructor(errors, message = "") {
      super(message);
      _AggregateErrorPolyfill_errors.set(this, void 0);
      __classPrivateFieldSet3(this, _AggregateErrorPolyfill_errors, [...errors], "f");
    }
    get name() {
      return "AggregateError";
    }
    get errors() {
      return [...__classPrivateFieldGet4(this, _AggregateErrorPolyfill_errors, "f")];
    }
  };
  _AggregateErrorPolyfill_errors = /* @__PURE__ */ new WeakMap();
  var AggregateError = "AggregateError" in self ? self.AggregateError : AggregateErrorPolyfill;

  // node_modules/.pnpm/@worker-tools+encrypted-cookie-store@0.3.0-pre.5/node_modules/@worker-tools/encrypted-cookie-store/esm/index.js
  var _EncryptedCookieStore_store;
  var _EncryptedCookieStore_keyring;
  var _EncryptedCookieStore_key;
  var _EncryptedCookieStore_decrypt;
  _EncryptedCookieStore_store = /* @__PURE__ */ new WeakMap(), _EncryptedCookieStore_keyring = /* @__PURE__ */ new WeakMap(), _EncryptedCookieStore_key = /* @__PURE__ */ new WeakMap(), _EncryptedCookieStore_decrypt = /* @__PURE__ */ new WeakMap();

  // node_modules/.pnpm/@worker-tools+middleware@0.1.0-pre.15/node_modules/@worker-tools/middleware/esm/utils/middleware-cookie-store.js
  init_env();

  // node_modules/.pnpm/@worker-tools+extendable-promise@0.2.0-pre.8/node_modules/@worker-tools/extendable-promise/esm/index.js
  init_env();
  var __classPrivateFieldSet4 = function(receiver, state, value, kind, f) {
    if (kind === "m")
      throw new TypeError("Private method is not writable");
    if (kind === "a" && !f)
      throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
      throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
  };
  var __classPrivateFieldGet5 = function(receiver, state, kind, f) {
    if (kind === "a" && !f)
      throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
      throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
  };
  var _ExtendablePromise_instances;
  var _ExtendablePromise_values;
  var _ExtendablePromise_promise;
  var _ExtendablePromise_numAdded;
  var _ExtendablePromise_numSettled;
  var _ExtendablePromise_fulfill;
  var _ExtendablePromise_reject;
  var _a3;
  _ExtendablePromise_values = /* @__PURE__ */ new WeakMap(), _ExtendablePromise_promise = /* @__PURE__ */ new WeakMap(), _ExtendablePromise_numAdded = /* @__PURE__ */ new WeakMap(), _ExtendablePromise_numSettled = /* @__PURE__ */ new WeakMap(), _ExtendablePromise_instances = /* @__PURE__ */ new WeakSet(), _ExtendablePromise_fulfill = function _ExtendablePromise_fulfill2(i, value) {
    var _b3;
    __classPrivateFieldGet5(this, _ExtendablePromise_values, "f")[i] = { status: "fulfilled", value };
    if (__classPrivateFieldSet4(this, _ExtendablePromise_numSettled, (_b3 = __classPrivateFieldGet5(this, _ExtendablePromise_numSettled, "f"), ++_b3), "f") === __classPrivateFieldGet5(this, _ExtendablePromise_numAdded, "f")) {
      __classPrivateFieldGet5(this, _ExtendablePromise_promise, "f").resolve(__classPrivateFieldGet5(this, _ExtendablePromise_values, "f"));
    }
  }, _ExtendablePromise_reject = function _ExtendablePromise_reject2(i, reason) {
    var _b3;
    __classPrivateFieldGet5(this, _ExtendablePromise_values, "f")[i] = { status: "rejected", reason };
    if (__classPrivateFieldSet4(this, _ExtendablePromise_numSettled, (_b3 = __classPrivateFieldGet5(this, _ExtendablePromise_numSettled, "f"), ++_b3), "f") === __classPrivateFieldGet5(this, _ExtendablePromise_numAdded, "f")) {
      __classPrivateFieldGet5(this, _ExtendablePromise_promise, "f").resolve(__classPrivateFieldGet5(this, _ExtendablePromise_values, "f"));
    }
  }, _a3 = Symbol.toStringTag;

  // node_modules/.pnpm/@worker-tools+middleware@0.1.0-pre.15/node_modules/@worker-tools/middleware/esm/utils/middleware-cookie-store.js
  var _MiddlewareCookieStore_promise;
  var _MiddlewareCookieStore_store;
  _MiddlewareCookieStore_promise = /* @__PURE__ */ new WeakMap(), _MiddlewareCookieStore_store = /* @__PURE__ */ new WeakMap();

  // node_modules/.pnpm/@worker-tools+middleware@0.1.0-pre.15/node_modules/@worker-tools/middleware/esm/utils/headers-set-cookie-fix.js
  init_env();

  // node_modules/.pnpm/@worker-tools+middleware@0.1.0-pre.15/node_modules/@worker-tools/middleware/esm/utils/unsettle.js
  init_env();

  // node_modules/.pnpm/@worker-tools+middleware@0.1.0-pre.15/node_modules/@worker-tools/middleware/esm/utils/aggregate-error.js
  init_env();
  var __classPrivateFieldSet5 = function(receiver, state, value, kind, f) {
    if (kind === "m")
      throw new TypeError("Private method is not writable");
    if (kind === "a" && !f)
      throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
      throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
  };
  var __classPrivateFieldGet6 = function(receiver, state, kind, f) {
    if (kind === "a" && !f)
      throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
      throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
  };
  var _AggregateErrorPolyfill_errors2;
  var AggregateErrorPolyfill2 = class extends Error {
    constructor(errors, message = "") {
      super(message);
      _AggregateErrorPolyfill_errors2.set(this, void 0);
      __classPrivateFieldSet5(this, _AggregateErrorPolyfill_errors2, [...errors], "f");
    }
    get name() {
      return "AggregateError";
    }
    get errors() {
      return [...__classPrivateFieldGet6(this, _AggregateErrorPolyfill_errors2, "f")];
    }
  };
  _AggregateErrorPolyfill_errors2 = /* @__PURE__ */ new WeakMap();
  var AggregateError2 = "AggregateError" in self ? self.AggregateError : AggregateErrorPolyfill2;

  // node_modules/.pnpm/@worker-tools+middleware@0.1.0-pre.15/node_modules/@worker-tools/middleware/esm/cors.js
  init_env();

  // node_modules/.pnpm/@worker-tools+middleware@0.1.0-pre.15/node_modules/@worker-tools/middleware/esm/session.js
  init_env();

  // node_modules/.pnpm/uuid-class@0.13.0-alpha.0/node_modules/uuid-class/esm/index.js
  init_env();
  function _bytesToUUIDString(uint8Array) {
    const hexArray = bytesToHexArray(uint8Array);
    hexArray.splice(4, 0, "-");
    hexArray.splice(7, 0, "-");
    hexArray.splice(10, 0, "-");
    hexArray.splice(13, 0, "-");
    return hexArray.join("");
  }
  function _v4() {
    const uuid = crypto.getRandomValues(new Uint8Array(16));
    uuid[6] = uuid[6] & 15 | 64;
    uuid[8] = uuid[8] & 63 | 128;
    return uuid.buffer;
  }
  function _fromString(str) {
    const hex = str.replace(/[^0-9a-f]/gi, "").slice(0, 32);
    if (hex.length < 32)
      throw Error("UUID too short");
    return hexStringToBytes(hex).buffer;
  }
  function stringToBytes(str) {
    str = unescape(encodeURIComponent(str));
    return new TextEncoder().encode(str);
  }
  async function _v5(value, namespace) {
    const valueBytes = typeof value === "string" ? stringToBytes(value) : bufferSourceToUint8Array(value);
    const namespaceUUID = typeof namespace === "string" ? new UUID(namespace) : namespace;
    const hashBytes = new Uint8Array(await crypto.subtle.digest("SHA-1", concatUint8Arrays(namespaceUUID, valueBytes)));
    hashBytes[6] = hashBytes[6] & 15 | 80;
    hashBytes[8] = hashBytes[8] & 63 | 128;
    return hashBytes.buffer.slice(0, 16);
  }
  var UUID = class extends Uint8Array {
    static v4() {
      return new UUID(_v4());
    }
    static async v5(value, namespace) {
      return new UUID(await _v5(value, namespace));
    }
    constructor(value, byteOffset) {
      if (value == null) {
        super(_v4());
      } else if (typeof value === "string") {
        super(_fromString(value));
      } else if (value instanceof UUID) {
        super(value.buffer.slice(0));
      } else {
        const u8 = value instanceof ArrayBuffer || value instanceof SharedArrayBuffer ? new Uint8Array(value, byteOffset !== null && byteOffset !== void 0 ? byteOffset : 0, 16) : "length" in value ? new Uint8Array(value) : new Uint8Array(value);
        if (u8.length < 16)
          throw Error("UUID too short");
        super(u8.buffer.slice(0, 16));
      }
    }
    get id() {
      return _bytesToUUIDString(this);
    }
    get uuid() {
      return _bytesToUUIDString(this);
    }
    toString() {
      return _bytesToUUIDString(this);
    }
    toJSON() {
      return _bytesToUUIDString(this);
    }
    static get [Symbol.species]() {
      return Uint8Array;
    }
    [Symbol.for("nodejs.util.inspect.custom")]() {
      return `UUID [ ${this.uuid} ]`;
    }
    [Symbol.for("Deno.customInspect")]() {
      return `UUID [ ${this.uuid} ]`;
    }
  };

  // node_modules/.pnpm/msgpackr@1.5.6/node_modules/msgpackr/index.js
  init_env();

  // node_modules/.pnpm/msgpackr@1.5.6/node_modules/msgpackr/pack.js
  init_env();

  // node_modules/.pnpm/msgpackr@1.5.6/node_modules/msgpackr/unpack.js
  init_env();
  var decoder;
  try {
    decoder = new TextDecoder();
  } catch (error) {
  }
  var src;
  var srcEnd;
  var position = 0;
  var EMPTY_ARRAY = [];
  var strings = EMPTY_ARRAY;
  var stringPosition = 0;
  var currentUnpackr = {};
  var currentStructures;
  var srcString;
  var srcStringStart = 0;
  var srcStringEnd = 0;
  var bundledStrings;
  var referenceMap;
  var currentExtensions = [];
  var dataView;
  var defaultOptions = {
    useRecords: false,
    mapsAsObjects: true
  };
  var C1Type = class {
  };
  var C1 = new C1Type();
  C1.name = "MessagePack 0xC1";
  var sequentialMode = false;
  var inlineObjectReadThreshold = 2;
  try {
    new Function("");
  } catch (error) {
    inlineObjectReadThreshold = Infinity;
  }
  var Unpackr = class {
    constructor(options) {
      if (options) {
        if (options.useRecords === false && options.mapsAsObjects === void 0)
          options.mapsAsObjects = true;
        if (options.structures)
          options.structures.sharedLength = options.structures.length;
        else if (options.getStructures) {
          (options.structures = []).uninitialized = true;
          options.structures.sharedLength = 0;
        }
      }
      Object.assign(this, options);
    }
    unpack(source, end) {
      if (src) {
        return saveState(() => {
          clearSource();
          return this ? this.unpack(source, end) : Unpackr.prototype.unpack.call(defaultOptions, source, end);
        });
      }
      srcEnd = end > -1 ? end : source.length;
      position = 0;
      stringPosition = 0;
      srcStringEnd = 0;
      srcString = null;
      strings = EMPTY_ARRAY;
      bundledStrings = null;
      src = source;
      try {
        dataView = source.dataView || (source.dataView = new DataView(source.buffer, source.byteOffset, source.byteLength));
      } catch (error) {
        src = null;
        if (source instanceof Uint8Array)
          throw error;
        throw new Error("Source must be a Uint8Array or Buffer but was a " + (source && typeof source == "object" ? source.constructor.name : typeof source));
      }
      if (this instanceof Unpackr) {
        currentUnpackr = this;
        if (this.structures) {
          currentStructures = this.structures;
          return checkedRead();
        } else if (!currentStructures || currentStructures.length > 0) {
          currentStructures = [];
        }
      } else {
        currentUnpackr = defaultOptions;
        if (!currentStructures || currentStructures.length > 0)
          currentStructures = [];
      }
      return checkedRead();
    }
    unpackMultiple(source, forEach) {
      let values, lastPosition = 0;
      try {
        sequentialMode = true;
        let size = source.length;
        let value = this ? this.unpack(source, size) : defaultUnpackr.unpack(source, size);
        if (forEach) {
          forEach(value);
          while (position < size) {
            lastPosition = position;
            if (forEach(checkedRead()) === false) {
              return;
            }
          }
        } else {
          values = [value];
          while (position < size) {
            lastPosition = position;
            values.push(checkedRead());
          }
          return values;
        }
      } catch (error) {
        error.lastPosition = lastPosition;
        error.values = values;
        throw error;
      } finally {
        sequentialMode = false;
        clearSource();
      }
    }
    _mergeStructures(loadedStructures, existingStructures) {
      loadedStructures = loadedStructures || [];
      for (let i = 0, l = loadedStructures.length; i < l; i++) {
        let structure = loadedStructures[i];
        if (structure) {
          structure.isShared = true;
          if (i >= 32)
            structure.highByte = i - 32 >> 5;
        }
      }
      loadedStructures.sharedLength = loadedStructures.length;
      for (let id in existingStructures || []) {
        if (id >= 0) {
          let structure = loadedStructures[id];
          let existing = existingStructures[id];
          if (existing) {
            if (structure)
              (loadedStructures.restoreStructures || (loadedStructures.restoreStructures = []))[id] = structure;
            loadedStructures[id] = existing;
          }
        }
      }
      return this.structures = loadedStructures;
    }
    decode(source, end) {
      return this.unpack(source, end);
    }
  };
  function checkedRead() {
    try {
      if (!currentUnpackr.trusted && !sequentialMode) {
        let sharedLength = currentStructures.sharedLength || 0;
        if (sharedLength < currentStructures.length)
          currentStructures.length = sharedLength;
      }
      let result = read();
      if (bundledStrings)
        position = bundledStrings.postBundlePosition;
      if (position == srcEnd) {
        if (currentStructures.restoreStructures)
          restoreStructures();
        currentStructures = null;
        src = null;
        if (referenceMap)
          referenceMap = null;
      } else if (position > srcEnd) {
        let error = new Error("Unexpected end of MessagePack data");
        error.incomplete = true;
        throw error;
      } else if (!sequentialMode) {
        throw new Error("Data read, but end of buffer not reached");
      }
      return result;
    } catch (error) {
      if (currentStructures.restoreStructures)
        restoreStructures();
      clearSource();
      if (error instanceof RangeError || error.message.startsWith("Unexpected end of buffer")) {
        error.incomplete = true;
      }
      throw error;
    }
  }
  function restoreStructures() {
    for (let id in currentStructures.restoreStructures) {
      currentStructures[id] = currentStructures.restoreStructures[id];
    }
    currentStructures.restoreStructures = null;
  }
  function read() {
    let token = src[position++];
    if (token < 160) {
      if (token < 128) {
        if (token < 64)
          return token;
        else {
          let structure = currentStructures[token & 63] || currentUnpackr.getStructures && loadStructures()[token & 63];
          if (structure) {
            if (!structure.read) {
              structure.read = createStructureReader(structure, token & 63);
            }
            return structure.read();
          } else
            return token;
        }
      } else if (token < 144) {
        token -= 128;
        if (currentUnpackr.mapsAsObjects) {
          let object = {};
          for (let i = 0; i < token; i++) {
            object[readKey()] = read();
          }
          return object;
        } else {
          let map = /* @__PURE__ */ new Map();
          for (let i = 0; i < token; i++) {
            map.set(read(), read());
          }
          return map;
        }
      } else {
        token -= 144;
        let array = new Array(token);
        for (let i = 0; i < token; i++) {
          array[i] = read();
        }
        return array;
      }
    } else if (token < 192) {
      let length = token - 160;
      if (srcStringEnd >= position) {
        return srcString.slice(position - srcStringStart, (position += length) - srcStringStart);
      }
      if (srcStringEnd == 0 && srcEnd < 140) {
        let string = length < 16 ? shortStringInJS(length) : longStringInJS(length);
        if (string != null)
          return string;
      }
      return readFixedString(length);
    } else {
      let value;
      switch (token) {
        case 192:
          return null;
        case 193:
          if (bundledStrings) {
            value = read();
            if (value > 0)
              return bundledStrings[1].slice(bundledStrings.position1, bundledStrings.position1 += value);
            else
              return bundledStrings[0].slice(bundledStrings.position0, bundledStrings.position0 -= value);
          }
          return C1;
        case 194:
          return false;
        case 195:
          return true;
        case 196:
          return readBin(src[position++]);
        case 197:
          value = dataView.getUint16(position);
          position += 2;
          return readBin(value);
        case 198:
          value = dataView.getUint32(position);
          position += 4;
          return readBin(value);
        case 199:
          return readExt(src[position++]);
        case 200:
          value = dataView.getUint16(position);
          position += 2;
          return readExt(value);
        case 201:
          value = dataView.getUint32(position);
          position += 4;
          return readExt(value);
        case 202:
          value = dataView.getFloat32(position);
          if (currentUnpackr.useFloat32 > 2) {
            let multiplier = mult10[(src[position] & 127) << 1 | src[position + 1] >> 7];
            position += 4;
            return (multiplier * value + (value > 0 ? 0.5 : -0.5) >> 0) / multiplier;
          }
          position += 4;
          return value;
        case 203:
          value = dataView.getFloat64(position);
          position += 8;
          return value;
        case 204:
          return src[position++];
        case 205:
          value = dataView.getUint16(position);
          position += 2;
          return value;
        case 206:
          value = dataView.getUint32(position);
          position += 4;
          return value;
        case 207:
          if (currentUnpackr.int64AsNumber) {
            value = dataView.getUint32(position) * 4294967296;
            value += dataView.getUint32(position + 4);
          } else
            value = dataView.getBigUint64(position);
          position += 8;
          return value;
        case 208:
          return dataView.getInt8(position++);
        case 209:
          value = dataView.getInt16(position);
          position += 2;
          return value;
        case 210:
          value = dataView.getInt32(position);
          position += 4;
          return value;
        case 211:
          if (currentUnpackr.int64AsNumber) {
            value = dataView.getInt32(position) * 4294967296;
            value += dataView.getUint32(position + 4);
          } else
            value = dataView.getBigInt64(position);
          position += 8;
          return value;
        case 212:
          value = src[position++];
          if (value == 114) {
            return recordDefinition(src[position++] & 63);
          } else {
            let extension = currentExtensions[value];
            if (extension) {
              if (extension.read) {
                position++;
                return extension.read(read());
              } else if (extension.noBuffer) {
                position++;
                return extension();
              } else
                return extension(src.subarray(position, ++position));
            } else
              throw new Error("Unknown extension " + value);
          }
        case 213:
          value = src[position];
          if (value == 114) {
            position++;
            return recordDefinition(src[position++] & 63, src[position++]);
          } else
            return readExt(2);
        case 214:
          return readExt(4);
        case 215:
          return readExt(8);
        case 216:
          return readExt(16);
        case 217:
          value = src[position++];
          if (srcStringEnd >= position) {
            return srcString.slice(position - srcStringStart, (position += value) - srcStringStart);
          }
          return readString8(value);
        case 218:
          value = dataView.getUint16(position);
          position += 2;
          if (srcStringEnd >= position) {
            return srcString.slice(position - srcStringStart, (position += value) - srcStringStart);
          }
          return readString16(value);
        case 219:
          value = dataView.getUint32(position);
          position += 4;
          if (srcStringEnd >= position) {
            return srcString.slice(position - srcStringStart, (position += value) - srcStringStart);
          }
          return readString32(value);
        case 220:
          value = dataView.getUint16(position);
          position += 2;
          return readArray(value);
        case 221:
          value = dataView.getUint32(position);
          position += 4;
          return readArray(value);
        case 222:
          value = dataView.getUint16(position);
          position += 2;
          return readMap(value);
        case 223:
          value = dataView.getUint32(position);
          position += 4;
          return readMap(value);
        default:
          if (token >= 224)
            return token - 256;
          if (token === void 0) {
            let error = new Error("Unexpected end of MessagePack data");
            error.incomplete = true;
            throw error;
          }
          throw new Error("Unknown MessagePack token " + token);
      }
    }
  }
  var validName = /^[a-zA-Z_$][a-zA-Z\d_$]*$/;
  function createStructureReader(structure, firstId) {
    function readObject() {
      if (readObject.count++ > inlineObjectReadThreshold) {
        let readObject2 = structure.read = new Function("r", "return function(){return {" + structure.map((key2) => validName.test(key2) ? key2 + ":r()" : "[" + JSON.stringify(key2) + "]:r()").join(",") + "}}")(read);
        if (structure.highByte === 0)
          structure.read = createSecondByteReader(firstId, structure.read);
        return readObject2();
      }
      let object = {};
      for (let i = 0, l = structure.length; i < l; i++) {
        let key2 = structure[i];
        object[key2] = read();
      }
      return object;
    }
    readObject.count = 0;
    if (structure.highByte === 0) {
      return createSecondByteReader(firstId, readObject);
    }
    return readObject;
  }
  var createSecondByteReader = (firstId, read0) => {
    return function() {
      let highByte = src[position++];
      if (highByte === 0)
        return read0();
      let id = firstId < 32 ? -(firstId + (highByte << 5)) : firstId + (highByte << 5);
      let structure = currentStructures[id] || loadStructures()[id];
      if (!structure) {
        throw new Error("Record id is not defined for " + id);
      }
      if (!structure.read)
        structure.read = createStructureReader(structure, firstId);
      return structure.read();
    };
  };
  function loadStructures() {
    let loadedStructures = saveState(() => {
      src = null;
      return currentUnpackr.getStructures();
    });
    return currentStructures = currentUnpackr._mergeStructures(loadedStructures, currentStructures);
  }
  var readFixedString = readStringJS;
  var readString8 = readStringJS;
  var readString16 = readStringJS;
  var readString32 = readStringJS;
  function readStringJS(length) {
    let result;
    if (length < 16) {
      if (result = shortStringInJS(length))
        return result;
    }
    if (length > 64 && decoder)
      return decoder.decode(src.subarray(position, position += length));
    const end = position + length;
    const units = [];
    result = "";
    while (position < end) {
      const byte1 = src[position++];
      if ((byte1 & 128) === 0) {
        units.push(byte1);
      } else if ((byte1 & 224) === 192) {
        const byte2 = src[position++] & 63;
        units.push((byte1 & 31) << 6 | byte2);
      } else if ((byte1 & 240) === 224) {
        const byte2 = src[position++] & 63;
        const byte3 = src[position++] & 63;
        units.push((byte1 & 31) << 12 | byte2 << 6 | byte3);
      } else if ((byte1 & 248) === 240) {
        const byte2 = src[position++] & 63;
        const byte3 = src[position++] & 63;
        const byte4 = src[position++] & 63;
        let unit = (byte1 & 7) << 18 | byte2 << 12 | byte3 << 6 | byte4;
        if (unit > 65535) {
          unit -= 65536;
          units.push(unit >>> 10 & 1023 | 55296);
          unit = 56320 | unit & 1023;
        }
        units.push(unit);
      } else {
        units.push(byte1);
      }
      if (units.length >= 4096) {
        result += fromCharCode.apply(String, units);
        units.length = 0;
      }
    }
    if (units.length > 0) {
      result += fromCharCode.apply(String, units);
    }
    return result;
  }
  function readArray(length) {
    let array = new Array(length);
    for (let i = 0; i < length; i++) {
      array[i] = read();
    }
    return array;
  }
  function readMap(length) {
    if (currentUnpackr.mapsAsObjects) {
      let object = {};
      for (let i = 0; i < length; i++) {
        object[readKey()] = read();
      }
      return object;
    } else {
      let map = /* @__PURE__ */ new Map();
      for (let i = 0; i < length; i++) {
        map.set(read(), read());
      }
      return map;
    }
  }
  var fromCharCode = String.fromCharCode;
  function longStringInJS(length) {
    let start = position;
    let bytes = new Array(length);
    for (let i = 0; i < length; i++) {
      const byte = src[position++];
      if ((byte & 128) > 0) {
        position = start;
        return;
      }
      bytes[i] = byte;
    }
    return fromCharCode.apply(String, bytes);
  }
  function shortStringInJS(length) {
    if (length < 4) {
      if (length < 2) {
        if (length === 0)
          return "";
        else {
          let a = src[position++];
          if ((a & 128) > 1) {
            position -= 1;
            return;
          }
          return fromCharCode(a);
        }
      } else {
        let a = src[position++];
        let b = src[position++];
        if ((a & 128) > 0 || (b & 128) > 0) {
          position -= 2;
          return;
        }
        if (length < 3)
          return fromCharCode(a, b);
        let c2 = src[position++];
        if ((c2 & 128) > 0) {
          position -= 3;
          return;
        }
        return fromCharCode(a, b, c2);
      }
    } else {
      let a = src[position++];
      let b = src[position++];
      let c2 = src[position++];
      let d = src[position++];
      if ((a & 128) > 0 || (b & 128) > 0 || (c2 & 128) > 0 || (d & 128) > 0) {
        position -= 4;
        return;
      }
      if (length < 6) {
        if (length === 4)
          return fromCharCode(a, b, c2, d);
        else {
          let e = src[position++];
          if ((e & 128) > 0) {
            position -= 5;
            return;
          }
          return fromCharCode(a, b, c2, d, e);
        }
      } else if (length < 8) {
        let e = src[position++];
        let f = src[position++];
        if ((e & 128) > 0 || (f & 128) > 0) {
          position -= 6;
          return;
        }
        if (length < 7)
          return fromCharCode(a, b, c2, d, e, f);
        let g = src[position++];
        if ((g & 128) > 0) {
          position -= 7;
          return;
        }
        return fromCharCode(a, b, c2, d, e, f, g);
      } else {
        let e = src[position++];
        let f = src[position++];
        let g = src[position++];
        let h = src[position++];
        if ((e & 128) > 0 || (f & 128) > 0 || (g & 128) > 0 || (h & 128) > 0) {
          position -= 8;
          return;
        }
        if (length < 10) {
          if (length === 8)
            return fromCharCode(a, b, c2, d, e, f, g, h);
          else {
            let i = src[position++];
            if ((i & 128) > 0) {
              position -= 9;
              return;
            }
            return fromCharCode(a, b, c2, d, e, f, g, h, i);
          }
        } else if (length < 12) {
          let i = src[position++];
          let j = src[position++];
          if ((i & 128) > 0 || (j & 128) > 0) {
            position -= 10;
            return;
          }
          if (length < 11)
            return fromCharCode(a, b, c2, d, e, f, g, h, i, j);
          let k = src[position++];
          if ((k & 128) > 0) {
            position -= 11;
            return;
          }
          return fromCharCode(a, b, c2, d, e, f, g, h, i, j, k);
        } else {
          let i = src[position++];
          let j = src[position++];
          let k = src[position++];
          let l = src[position++];
          if ((i & 128) > 0 || (j & 128) > 0 || (k & 128) > 0 || (l & 128) > 0) {
            position -= 12;
            return;
          }
          if (length < 14) {
            if (length === 12)
              return fromCharCode(a, b, c2, d, e, f, g, h, i, j, k, l);
            else {
              let m = src[position++];
              if ((m & 128) > 0) {
                position -= 13;
                return;
              }
              return fromCharCode(a, b, c2, d, e, f, g, h, i, j, k, l, m);
            }
          } else {
            let m = src[position++];
            let n = src[position++];
            if ((m & 128) > 0 || (n & 128) > 0) {
              position -= 14;
              return;
            }
            if (length < 15)
              return fromCharCode(a, b, c2, d, e, f, g, h, i, j, k, l, m, n);
            let o = src[position++];
            if ((o & 128) > 0) {
              position -= 15;
              return;
            }
            return fromCharCode(a, b, c2, d, e, f, g, h, i, j, k, l, m, n, o);
          }
        }
      }
    }
  }
  function readOnlyJSString() {
    let token = src[position++];
    let length;
    if (token < 192) {
      length = token - 160;
    } else {
      switch (token) {
        case 217:
          length = src[position++];
          break;
        case 218:
          length = dataView.getUint16(position);
          position += 2;
          break;
        case 219:
          length = dataView.getUint32(position);
          position += 4;
          break;
        default:
          throw new Error("Expected string");
      }
    }
    return readStringJS(length);
  }
  function readBin(length) {
    return currentUnpackr.copyBuffers ? Uint8Array.prototype.slice.call(src, position, position += length) : src.subarray(position, position += length);
  }
  function readExt(length) {
    let type = src[position++];
    if (currentExtensions[type]) {
      return currentExtensions[type](src.subarray(position, position += length));
    } else
      throw new Error("Unknown extension type " + type);
  }
  var keyCache = new Array(4096);
  function readKey() {
    let length = src[position++];
    if (length >= 160 && length < 192) {
      length = length - 160;
      if (srcStringEnd >= position)
        return srcString.slice(position - srcStringStart, (position += length) - srcStringStart);
      else if (!(srcStringEnd == 0 && srcEnd < 180))
        return readFixedString(length);
    } else {
      position--;
      return read();
    }
    let key2 = (length << 5 ^ (length > 1 ? dataView.getUint16(position) : length > 0 ? src[position] : 0)) & 4095;
    let entry = keyCache[key2];
    let checkPosition = position;
    let end = position + length - 3;
    let chunk;
    let i = 0;
    if (entry && entry.bytes == length) {
      while (checkPosition < end) {
        chunk = dataView.getUint32(checkPosition);
        if (chunk != entry[i++]) {
          checkPosition = 1879048192;
          break;
        }
        checkPosition += 4;
      }
      end += 3;
      while (checkPosition < end) {
        chunk = src[checkPosition++];
        if (chunk != entry[i++]) {
          checkPosition = 1879048192;
          break;
        }
      }
      if (checkPosition === end) {
        position = checkPosition;
        return entry.string;
      }
      end -= 3;
      checkPosition = position;
    }
    entry = [];
    keyCache[key2] = entry;
    entry.bytes = length;
    while (checkPosition < end) {
      chunk = dataView.getUint32(checkPosition);
      entry.push(chunk);
      checkPosition += 4;
    }
    end += 3;
    while (checkPosition < end) {
      chunk = src[checkPosition++];
      entry.push(chunk);
    }
    let string = length < 16 ? shortStringInJS(length) : longStringInJS(length);
    if (string != null)
      return entry.string = string;
    return entry.string = readFixedString(length);
  }
  var recordDefinition = (id, highByte) => {
    var structure = read();
    let firstByte = id;
    if (highByte !== void 0) {
      id = id < 32 ? -((highByte << 5) + id) : (highByte << 5) + id;
      structure.highByte = highByte;
    }
    let existingStructure = currentStructures[id];
    if (existingStructure && existingStructure.isShared) {
      (currentStructures.restoreStructures || (currentStructures.restoreStructures = []))[id] = existingStructure;
    }
    currentStructures[id] = structure;
    structure.read = createStructureReader(structure, firstByte);
    return structure.read();
  };
  var glbl = typeof self == "object" ? self : self;
  currentExtensions[0] = () => {
  };
  currentExtensions[0].noBuffer = true;
  currentExtensions[101] = () => {
    let data = read();
    return (glbl[data[0]] || Error)(data[1]);
  };
  currentExtensions[105] = (data) => {
    let id = dataView.getUint32(position - 4);
    if (!referenceMap)
      referenceMap = /* @__PURE__ */ new Map();
    let token = src[position];
    let target2;
    if (token >= 144 && token < 160 || token == 220 || token == 221)
      target2 = [];
    else
      target2 = {};
    let refEntry = { target: target2 };
    referenceMap.set(id, refEntry);
    let targetProperties = read();
    if (refEntry.used)
      return Object.assign(target2, targetProperties);
    refEntry.target = targetProperties;
    return targetProperties;
  };
  currentExtensions[112] = (data) => {
    let id = dataView.getUint32(position - 4);
    let refEntry = referenceMap.get(id);
    refEntry.used = true;
    return refEntry.target;
  };
  currentExtensions[115] = () => new Set(read());
  var typedArrays = ["Int8", "Uint8", "Uint8Clamped", "Int16", "Uint16", "Int32", "Uint32", "Float32", "Float64", "BigInt64", "BigUint64"].map((type) => type + "Array");
  currentExtensions[116] = (data) => {
    let typeCode = data[0];
    let typedArrayName = typedArrays[typeCode];
    if (!typedArrayName)
      throw new Error("Could not find typed array for code " + typeCode);
    return new glbl[typedArrayName](Uint8Array.prototype.slice.call(data, 1).buffer);
  };
  currentExtensions[120] = () => {
    let data = read();
    return new RegExp(data[0], data[1]);
  };
  var TEMP_BUNDLE = [];
  currentExtensions[98] = (data) => {
    let dataSize = (data[0] << 24) + (data[1] << 16) + (data[2] << 8) + data[3];
    let dataPosition = position;
    position += dataSize - data.length;
    bundledStrings = TEMP_BUNDLE;
    bundledStrings = [readOnlyJSString(), readOnlyJSString()];
    bundledStrings.position0 = 0;
    bundledStrings.position1 = 0;
    bundledStrings.postBundlePosition = position;
    position = dataPosition;
    return read();
  };
  currentExtensions[255] = (data) => {
    if (data.length == 4)
      return new Date((data[0] * 16777216 + (data[1] << 16) + (data[2] << 8) + data[3]) * 1e3);
    else if (data.length == 8)
      return new Date(((data[0] << 22) + (data[1] << 14) + (data[2] << 6) + (data[3] >> 2)) / 1e6 + ((data[3] & 3) * 4294967296 + data[4] * 16777216 + (data[5] << 16) + (data[6] << 8) + data[7]) * 1e3);
    else if (data.length == 12)
      return new Date(((data[0] << 24) + (data[1] << 16) + (data[2] << 8) + data[3]) / 1e6 + ((data[4] & 128 ? -281474976710656 : 0) + data[6] * 1099511627776 + data[7] * 4294967296 + data[8] * 16777216 + (data[9] << 16) + (data[10] << 8) + data[11]) * 1e3);
    else
      return new Date("invalid");
  };
  function saveState(callback) {
    let savedSrcEnd = srcEnd;
    let savedPosition = position;
    let savedStringPosition = stringPosition;
    let savedSrcStringStart = srcStringStart;
    let savedSrcStringEnd = srcStringEnd;
    let savedSrcString = srcString;
    let savedStrings = strings;
    let savedReferenceMap = referenceMap;
    let savedBundledStrings = bundledStrings;
    let savedSrc = new Uint8Array(src.slice(0, srcEnd));
    let savedStructures = currentStructures;
    let savedStructuresContents = currentStructures.slice(0, currentStructures.length);
    let savedPackr = currentUnpackr;
    let savedSequentialMode = sequentialMode;
    let value = callback();
    srcEnd = savedSrcEnd;
    position = savedPosition;
    stringPosition = savedStringPosition;
    srcStringStart = savedSrcStringStart;
    srcStringEnd = savedSrcStringEnd;
    srcString = savedSrcString;
    strings = savedStrings;
    referenceMap = savedReferenceMap;
    bundledStrings = savedBundledStrings;
    src = savedSrc;
    sequentialMode = savedSequentialMode;
    currentStructures = savedStructures;
    currentStructures.splice(0, currentStructures.length, ...savedStructuresContents);
    currentUnpackr = savedPackr;
    dataView = new DataView(src.buffer, src.byteOffset, src.byteLength);
    return value;
  }
  function clearSource() {
    src = null;
    referenceMap = null;
    currentStructures = null;
  }
  var mult10 = new Array(147);
  for (let i = 0; i < 256; i++) {
    mult10[i] = +("1e" + Math.floor(45.15 - i * 0.30103));
  }
  var defaultUnpackr = new Unpackr({ useRecords: false });
  var unpack = defaultUnpackr.unpack;
  var unpackMultiple = defaultUnpackr.unpackMultiple;
  var decode2 = defaultUnpackr.unpack;
  var FLOAT32_OPTIONS = {
    NEVER: 0,
    ALWAYS: 1,
    DECIMAL_ROUND: 3,
    DECIMAL_FIT: 4
  };
  var f32Array = new Float32Array(1);
  var u8Array = new Uint8Array(f32Array.buffer, 0, 4);

  // node_modules/.pnpm/msgpackr@1.5.6/node_modules/msgpackr/pack.js
  var textEncoder;
  try {
    textEncoder = new TextEncoder();
  } catch (error) {
  }
  var extensions;
  var extensionClasses;
  var hasNodeBuffer = typeof Buffer !== "undefined";
  var ByteArrayAllocate = hasNodeBuffer ? Buffer.allocUnsafeSlow : Uint8Array;
  var ByteArray = hasNodeBuffer ? Buffer : Uint8Array;
  var MAX_BUFFER_SIZE = hasNodeBuffer ? 4294967296 : 2144337920;
  var target;
  var keysTarget;
  var targetView;
  var position2 = 0;
  var safeEnd;
  var bundledStrings2 = null;
  var MAX_BUNDLE_SIZE = 61440;
  var hasNonLatin = /[\u0080-\uFFFF]/;
  var RECORD_SYMBOL = Symbol("record-id");
  var Packr = class extends Unpackr {
    constructor(options) {
      super(options);
      this.offset = 0;
      let typeBuffer;
      let start;
      let hasSharedUpdate;
      let structures;
      let referenceMap2;
      let lastSharedStructuresLength = 0;
      let encodeUtf8 = ByteArray.prototype.utf8Write ? function(string, position3, maxBytes) {
        return target.utf8Write(string, position3, maxBytes);
      } : textEncoder && textEncoder.encodeInto ? function(string, position3) {
        return textEncoder.encodeInto(string, target.subarray(position3)).written;
      } : false;
      let packr = this;
      if (!options)
        options = {};
      let isSequential = options && options.sequential;
      let hasSharedStructures = options.structures || options.saveStructures;
      let maxSharedStructures = options.maxSharedStructures;
      if (maxSharedStructures == null)
        maxSharedStructures = hasSharedStructures ? 32 : 0;
      if (maxSharedStructures > 8160)
        throw new Error("Maximum maxSharedStructure is 8160");
      if (options.structuredClone && options.moreTypes == void 0) {
        options.moreTypes = true;
      }
      let maxOwnStructures = options.maxOwnStructures;
      if (maxOwnStructures == null)
        maxOwnStructures = hasSharedStructures ? 32 : 64;
      if (!this.structures && options.useRecords != false)
        this.structures = [];
      let useTwoByteRecords = maxSharedStructures > 32 || maxOwnStructures + maxSharedStructures > 64;
      let sharedLimitId = maxSharedStructures + 64;
      let maxStructureId = maxSharedStructures + maxOwnStructures + 64;
      if (maxStructureId > 8256) {
        throw new Error("Maximum maxSharedStructure + maxOwnStructure is 8192");
      }
      let recordIdsToRemove = [];
      let transitionsCount = 0;
      let serializationsSinceTransitionRebuild = 0;
      this.pack = this.encode = function(value, encodeOptions) {
        if (!target) {
          target = new ByteArrayAllocate(8192);
          targetView = new DataView(target.buffer, 0, 8192);
          position2 = 0;
        }
        safeEnd = target.length - 10;
        if (safeEnd - position2 < 2048) {
          target = new ByteArrayAllocate(target.length);
          targetView = new DataView(target.buffer, 0, target.length);
          safeEnd = target.length - 10;
          position2 = 0;
        } else
          position2 = position2 + 7 & 2147483640;
        start = position2;
        referenceMap2 = packr.structuredClone ? /* @__PURE__ */ new Map() : null;
        if (packr.bundleStrings && typeof value !== "string") {
          bundledStrings2 = [];
          bundledStrings2.size = Infinity;
        } else
          bundledStrings2 = null;
        structures = packr.structures;
        if (structures) {
          if (structures.uninitialized)
            structures = packr._mergeStructures(packr.getStructures());
          let sharedLength = structures.sharedLength || 0;
          if (sharedLength > maxSharedStructures) {
            throw new Error("Shared structures is larger than maximum shared structures, try increasing maxSharedStructures to " + structures.sharedLength);
          }
          if (!structures.transitions) {
            structures.transitions = /* @__PURE__ */ Object.create(null);
            for (let i = 0; i < sharedLength; i++) {
              let keys2 = structures[i];
              if (!keys2)
                continue;
              let nextTransition, transition = structures.transitions;
              for (let j = 0, l = keys2.length; j < l; j++) {
                let key2 = keys2[j];
                nextTransition = transition[key2];
                if (!nextTransition) {
                  nextTransition = transition[key2] = /* @__PURE__ */ Object.create(null);
                }
                transition = nextTransition;
              }
              transition[RECORD_SYMBOL] = i + 64;
            }
            lastSharedStructuresLength = sharedLength;
          }
          if (!isSequential) {
            structures.nextId = sharedLength + 64;
          }
        }
        if (hasSharedUpdate)
          hasSharedUpdate = false;
        try {
          pack2(value);
          if (bundledStrings2) {
            writeBundles(start, pack2);
          }
          packr.offset = position2;
          if (referenceMap2 && referenceMap2.idsToInsert) {
            position2 += referenceMap2.idsToInsert.length * 6;
            if (position2 > safeEnd)
              makeRoom(position2);
            packr.offset = position2;
            let serialized = insertIds(target.subarray(start, position2), referenceMap2.idsToInsert);
            referenceMap2 = null;
            return serialized;
          }
          if (encodeOptions & REUSE_BUFFER_MODE) {
            target.start = start;
            target.end = position2;
            return target;
          }
          return target.subarray(start, position2);
        } finally {
          if (structures) {
            if (serializationsSinceTransitionRebuild < 10)
              serializationsSinceTransitionRebuild++;
            let sharedLength = structures.sharedLength || maxSharedStructures;
            if (structures.length > sharedLength)
              structures.length = sharedLength;
            if (transitionsCount > 1e4) {
              structures.transitions = null;
              serializationsSinceTransitionRebuild = 0;
              transitionsCount = 0;
              if (recordIdsToRemove.length > 0)
                recordIdsToRemove = [];
            } else if (recordIdsToRemove.length > 0 && !isSequential) {
              for (let i = 0, l = recordIdsToRemove.length; i < l; i++) {
                recordIdsToRemove[i][RECORD_SYMBOL] = 0;
              }
              recordIdsToRemove = [];
            }
            if (hasSharedUpdate && packr.saveStructures) {
              let returnBuffer = target.subarray(start, position2);
              if (packr.saveStructures(structures, lastSharedStructuresLength) === false) {
                packr._mergeStructures(packr.getStructures());
                return packr.pack(value);
              }
              lastSharedStructuresLength = sharedLength;
              return returnBuffer;
            }
          }
          if (encodeOptions & RESET_BUFFER_MODE)
            position2 = start;
        }
      };
      const pack2 = (value) => {
        if (position2 > safeEnd)
          target = makeRoom(position2);
        var type = typeof value;
        var length;
        if (type === "string") {
          let strLength = value.length;
          if (bundledStrings2 && strLength >= 4 && strLength < 4096) {
            if ((bundledStrings2.size += strLength) > MAX_BUNDLE_SIZE) {
              let extStart;
              let maxBytes2 = (bundledStrings2[0] ? bundledStrings2[0].length * 3 + bundledStrings2[1].length : 0) + 10;
              if (position2 + maxBytes2 > safeEnd)
                target = makeRoom(position2 + maxBytes2);
              if (bundledStrings2.position) {
                target[position2] = 200;
                position2 += 3;
                target[position2++] = 98;
                extStart = position2 - start;
                position2 += 4;
                writeBundles(start, pack2);
                targetView.setUint16(extStart + start - 3, position2 - start - extStart);
              } else {
                target[position2++] = 214;
                target[position2++] = 98;
                extStart = position2 - start;
                position2 += 4;
              }
              bundledStrings2 = ["", ""];
              bundledStrings2.size = 0;
              bundledStrings2.position = extStart;
            }
            let twoByte = hasNonLatin.test(value);
            bundledStrings2[twoByte ? 0 : 1] += value;
            target[position2++] = 193;
            pack2(twoByte ? -strLength : strLength);
            return;
          }
          let headerSize;
          if (strLength < 32) {
            headerSize = 1;
          } else if (strLength < 256) {
            headerSize = 2;
          } else if (strLength < 65536) {
            headerSize = 3;
          } else {
            headerSize = 5;
          }
          let maxBytes = strLength * 3;
          if (position2 + maxBytes > safeEnd)
            target = makeRoom(position2 + maxBytes);
          if (strLength < 64 || !encodeUtf8) {
            let i, c1, c2, strPosition = position2 + headerSize;
            for (i = 0; i < strLength; i++) {
              c1 = value.charCodeAt(i);
              if (c1 < 128) {
                target[strPosition++] = c1;
              } else if (c1 < 2048) {
                target[strPosition++] = c1 >> 6 | 192;
                target[strPosition++] = c1 & 63 | 128;
              } else if ((c1 & 64512) === 55296 && ((c2 = value.charCodeAt(i + 1)) & 64512) === 56320) {
                c1 = 65536 + ((c1 & 1023) << 10) + (c2 & 1023);
                i++;
                target[strPosition++] = c1 >> 18 | 240;
                target[strPosition++] = c1 >> 12 & 63 | 128;
                target[strPosition++] = c1 >> 6 & 63 | 128;
                target[strPosition++] = c1 & 63 | 128;
              } else {
                target[strPosition++] = c1 >> 12 | 224;
                target[strPosition++] = c1 >> 6 & 63 | 128;
                target[strPosition++] = c1 & 63 | 128;
              }
            }
            length = strPosition - position2 - headerSize;
          } else {
            length = encodeUtf8(value, position2 + headerSize, maxBytes);
          }
          if (length < 32) {
            target[position2++] = 160 | length;
          } else if (length < 256) {
            if (headerSize < 2) {
              target.copyWithin(position2 + 2, position2 + 1, position2 + 1 + length);
            }
            target[position2++] = 217;
            target[position2++] = length;
          } else if (length < 65536) {
            if (headerSize < 3) {
              target.copyWithin(position2 + 3, position2 + 2, position2 + 2 + length);
            }
            target[position2++] = 218;
            target[position2++] = length >> 8;
            target[position2++] = length & 255;
          } else {
            if (headerSize < 5) {
              target.copyWithin(position2 + 5, position2 + 3, position2 + 3 + length);
            }
            target[position2++] = 219;
            targetView.setUint32(position2, length);
            position2 += 4;
          }
          position2 += length;
        } else if (type === "number") {
          if (value >>> 0 === value) {
            if (value < 64) {
              target[position2++] = value;
            } else if (value < 256) {
              target[position2++] = 204;
              target[position2++] = value;
            } else if (value < 65536) {
              target[position2++] = 205;
              target[position2++] = value >> 8;
              target[position2++] = value & 255;
            } else {
              target[position2++] = 206;
              targetView.setUint32(position2, value);
              position2 += 4;
            }
          } else if (value >> 0 === value) {
            if (value >= -32) {
              target[position2++] = 256 + value;
            } else if (value >= -128) {
              target[position2++] = 208;
              target[position2++] = value + 256;
            } else if (value >= -32768) {
              target[position2++] = 209;
              targetView.setInt16(position2, value);
              position2 += 2;
            } else {
              target[position2++] = 210;
              targetView.setInt32(position2, value);
              position2 += 4;
            }
          } else {
            let useFloat32;
            if ((useFloat32 = this.useFloat32) > 0 && value < 4294967296 && value >= -2147483648) {
              target[position2++] = 202;
              targetView.setFloat32(position2, value);
              let xShifted;
              if (useFloat32 < 4 || (xShifted = value * mult10[(target[position2] & 127) << 1 | target[position2 + 1] >> 7]) >> 0 === xShifted) {
                position2 += 4;
                return;
              } else
                position2--;
            }
            target[position2++] = 203;
            targetView.setFloat64(position2, value);
            position2 += 8;
          }
        } else if (type === "object") {
          if (!value)
            target[position2++] = 192;
          else {
            if (referenceMap2) {
              let referee = referenceMap2.get(value);
              if (referee) {
                if (!referee.id) {
                  let idsToInsert = referenceMap2.idsToInsert || (referenceMap2.idsToInsert = []);
                  referee.id = idsToInsert.push(referee);
                }
                target[position2++] = 214;
                target[position2++] = 112;
                targetView.setUint32(position2, referee.id);
                position2 += 4;
                return;
              } else
                referenceMap2.set(value, { offset: position2 - start });
            }
            let constructor = value.constructor;
            if (constructor === Object) {
              writeObject(value, true);
            } else if (constructor === Array) {
              length = value.length;
              if (length < 16) {
                target[position2++] = 144 | length;
              } else if (length < 65536) {
                target[position2++] = 220;
                target[position2++] = length >> 8;
                target[position2++] = length & 255;
              } else {
                target[position2++] = 221;
                targetView.setUint32(position2, length);
                position2 += 4;
              }
              for (let i = 0; i < length; i++) {
                pack2(value[i]);
              }
            } else if (constructor === Map) {
              length = value.size;
              if (length < 16) {
                target[position2++] = 128 | length;
              } else if (length < 65536) {
                target[position2++] = 222;
                target[position2++] = length >> 8;
                target[position2++] = length & 255;
              } else {
                target[position2++] = 223;
                targetView.setUint32(position2, length);
                position2 += 4;
              }
              for (let [key2, entryValue] of value) {
                pack2(key2);
                pack2(entryValue);
              }
            } else {
              for (let i = 0, l = extensions.length; i < l; i++) {
                let extensionClass = extensionClasses[i];
                if (value instanceof extensionClass) {
                  let extension = extensions[i];
                  if (extension.write) {
                    if (extension.type) {
                      target[position2++] = 212;
                      target[position2++] = extension.type;
                      target[position2++] = 0;
                    }
                    pack2(extension.write.call(this, value));
                    return;
                  }
                  let currentTarget = target;
                  let currentTargetView = targetView;
                  let currentPosition = position2;
                  target = null;
                  let result;
                  try {
                    result = extension.pack.call(this, value, (size) => {
                      target = currentTarget;
                      currentTarget = null;
                      position2 += size;
                      if (position2 > safeEnd)
                        makeRoom(position2);
                      return {
                        target,
                        targetView,
                        position: position2 - size
                      };
                    }, pack2);
                  } finally {
                    if (currentTarget) {
                      target = currentTarget;
                      targetView = currentTargetView;
                      position2 = currentPosition;
                      safeEnd = target.length - 10;
                    }
                  }
                  if (result) {
                    if (result.length + position2 > safeEnd)
                      makeRoom(result.length + position2);
                    position2 = writeExtensionData(result, target, position2, extension.type);
                  }
                  return;
                }
              }
              writeObject(value, !value.hasOwnProperty);
            }
          }
        } else if (type === "boolean") {
          target[position2++] = value ? 195 : 194;
        } else if (type === "bigint") {
          if (value < BigInt(1) << BigInt(63) && value >= -(BigInt(1) << BigInt(63))) {
            target[position2++] = 211;
            targetView.setBigInt64(position2, value);
          } else if (value < BigInt(1) << BigInt(64) && value > 0) {
            target[position2++] = 207;
            targetView.setBigUint64(position2, value);
          } else {
            if (this.largeBigIntToFloat) {
              target[position2++] = 203;
              targetView.setFloat64(position2, Number(value));
            } else {
              throw new RangeError(value + " was too large to fit in MessagePack 64-bit integer format, set largeBigIntToFloat to convert to float-64");
            }
          }
          position2 += 8;
        } else if (type === "undefined") {
          if (this.encodeUndefinedAsNil)
            target[position2++] = 192;
          else {
            target[position2++] = 212;
            target[position2++] = 0;
            target[position2++] = 0;
          }
        } else if (type === "function") {
          pack2(this.writeFunction && this.writeFunction());
        } else {
          throw new Error("Unknown type: " + type);
        }
      };
      const writeObject = this.useRecords === false ? this.variableMapSize ? (object) => {
        let keys2 = Object.keys(object);
        let length = keys2.length;
        if (length < 16) {
          target[position2++] = 128 | length;
        } else if (length < 65536) {
          target[position2++] = 222;
          target[position2++] = length >> 8;
          target[position2++] = length & 255;
        } else {
          target[position2++] = 223;
          targetView.setUint32(position2, length);
          position2 += 4;
        }
        let key2;
        for (let i = 0; i < length; i++) {
          pack2(key2 = keys2[i]);
          pack2(object[key2]);
        }
      } : (object, safePrototype) => {
        target[position2++] = 222;
        let objectOffset = position2 - start;
        position2 += 2;
        let size = 0;
        for (let key2 in object) {
          if (safePrototype || object.hasOwnProperty(key2)) {
            pack2(key2);
            pack2(object[key2]);
            size++;
          }
        }
        target[objectOffset++ + start] = size >> 8;
        target[objectOffset + start] = size & 255;
      } : options.progressiveRecords && !useTwoByteRecords ? (object, safePrototype) => {
        let nextTransition, transition = structures.transitions || (structures.transitions = /* @__PURE__ */ Object.create(null));
        let objectOffset = position2++ - start;
        let wroteKeys;
        for (let key2 in object) {
          if (safePrototype || object.hasOwnProperty(key2)) {
            nextTransition = transition[key2];
            if (nextTransition)
              transition = nextTransition;
            else {
              let keys2 = Object.keys(object);
              let lastTransition = transition;
              transition = structures.transitions;
              let newTransitions = 0;
              for (let i = 0, l = keys2.length; i < l; i++) {
                let key3 = keys2[i];
                nextTransition = transition[key3];
                if (!nextTransition) {
                  nextTransition = transition[key3] = /* @__PURE__ */ Object.create(null);
                  newTransitions++;
                }
                transition = nextTransition;
              }
              if (objectOffset + start + 1 == position2) {
                position2--;
                newRecord(transition, keys2, newTransitions);
              } else
                insertNewRecord(transition, keys2, objectOffset, newTransitions);
              wroteKeys = true;
              transition = lastTransition[key2];
            }
            pack2(object[key2]);
          }
        }
        if (!wroteKeys) {
          let recordId = transition[RECORD_SYMBOL];
          if (recordId)
            target[objectOffset + start] = recordId;
          else
            insertNewRecord(transition, Object.keys(object), objectOffset, 0);
        }
      } : (object, safePrototype) => {
        let nextTransition, transition = structures.transitions || (structures.transitions = /* @__PURE__ */ Object.create(null));
        let newTransitions = 0;
        for (let key2 in object)
          if (safePrototype || object.hasOwnProperty(key2)) {
            nextTransition = transition[key2];
            if (!nextTransition) {
              nextTransition = transition[key2] = /* @__PURE__ */ Object.create(null);
              newTransitions++;
            }
            transition = nextTransition;
          }
        let recordId = transition[RECORD_SYMBOL];
        if (recordId) {
          if (recordId >= 96 && useTwoByteRecords) {
            target[position2++] = ((recordId -= 96) & 31) + 96;
            target[position2++] = recordId >> 5;
          } else
            target[position2++] = recordId;
        } else {
          newRecord(transition, transition.__keys__ || Object.keys(object), newTransitions);
        }
        for (let key2 in object)
          if (safePrototype || object.hasOwnProperty(key2))
            pack2(object[key2]);
      };
      const makeRoom = (end) => {
        let newSize;
        if (end > 16777216) {
          if (end - start > MAX_BUFFER_SIZE)
            throw new Error("Packed buffer would be larger than maximum buffer size");
          newSize = Math.min(MAX_BUFFER_SIZE, Math.round(Math.max((end - start) * (end > 67108864 ? 1.25 : 2), 4194304) / 4096) * 4096);
        } else
          newSize = (Math.max(end - start << 2, target.length - 1) >> 12) + 1 << 12;
        let newBuffer = new ByteArrayAllocate(newSize);
        targetView = new DataView(newBuffer.buffer, 0, newSize);
        if (target.copy)
          target.copy(newBuffer, 0, start, end);
        else
          newBuffer.set(target.slice(start, end));
        position2 -= start;
        start = 0;
        safeEnd = newBuffer.length - 10;
        return target = newBuffer;
      };
      const newRecord = (transition, keys2, newTransitions) => {
        let recordId = structures.nextId;
        if (!recordId)
          recordId = 64;
        if (recordId < sharedLimitId && this.shouldShareStructure && !this.shouldShareStructure(keys2)) {
          recordId = structures.nextOwnId;
          if (!(recordId < maxStructureId))
            recordId = sharedLimitId;
          structures.nextOwnId = recordId + 1;
        } else {
          if (recordId >= maxStructureId)
            recordId = sharedLimitId;
          structures.nextId = recordId + 1;
        }
        let highByte = keys2.highByte = recordId >= 96 && useTwoByteRecords ? recordId - 96 >> 5 : -1;
        transition[RECORD_SYMBOL] = recordId;
        transition.__keys__ = keys2;
        structures[recordId - 64] = keys2;
        if (recordId < sharedLimitId) {
          keys2.isShared = true;
          structures.sharedLength = recordId - 63;
          hasSharedUpdate = true;
          if (highByte >= 0) {
            target[position2++] = (recordId & 31) + 96;
            target[position2++] = highByte;
          } else {
            target[position2++] = recordId;
          }
        } else {
          if (highByte >= 0) {
            target[position2++] = 213;
            target[position2++] = 114;
            target[position2++] = (recordId & 31) + 96;
            target[position2++] = highByte;
          } else {
            target[position2++] = 212;
            target[position2++] = 114;
            target[position2++] = recordId;
          }
          if (newTransitions)
            transitionsCount += serializationsSinceTransitionRebuild * newTransitions;
          if (recordIdsToRemove.length >= maxOwnStructures)
            recordIdsToRemove.shift()[RECORD_SYMBOL] = 0;
          recordIdsToRemove.push(transition);
          pack2(keys2);
        }
      };
      const insertNewRecord = (transition, keys2, insertionOffset, newTransitions) => {
        let mainTarget = target;
        let mainPosition = position2;
        let mainSafeEnd = safeEnd;
        let mainStart = start;
        target = keysTarget;
        position2 = 0;
        start = 0;
        if (!target)
          keysTarget = target = new ByteArrayAllocate(8192);
        safeEnd = target.length - 10;
        newRecord(transition, keys2, newTransitions);
        keysTarget = target;
        let keysPosition = position2;
        target = mainTarget;
        position2 = mainPosition;
        safeEnd = mainSafeEnd;
        start = mainStart;
        if (keysPosition > 1) {
          let newEnd = position2 + keysPosition - 1;
          if (newEnd > safeEnd)
            makeRoom(newEnd);
          let insertionPosition = insertionOffset + start;
          target.copyWithin(insertionPosition + keysPosition, insertionPosition + 1, position2);
          target.set(keysTarget.slice(0, keysPosition), insertionPosition);
          position2 = newEnd;
        } else {
          target[insertionOffset + start] = keysTarget[0];
        }
      };
    }
    useBuffer(buffer2) {
      target = buffer2;
      targetView = new DataView(target.buffer, target.byteOffset, target.byteLength);
      position2 = 0;
    }
    clearSharedData() {
      if (this.structures)
        this.structures = [];
    }
  };
  extensionClasses = [Date, Set, Error, RegExp, ArrayBuffer, Object.getPrototypeOf(Uint8Array.prototype).constructor, C1Type];
  extensions = [{
    pack(date, allocateForWrite, pack2) {
      let seconds = date.getTime() / 1e3;
      if ((this.useTimestamp32 || date.getMilliseconds() === 0) && seconds >= 0 && seconds < 4294967296) {
        let { target: target2, targetView: targetView2, position: position3 } = allocateForWrite(6);
        target2[position3++] = 214;
        target2[position3++] = 255;
        targetView2.setUint32(position3, seconds);
      } else if (seconds > 0 && seconds < 17179869184) {
        let { target: target2, targetView: targetView2, position: position3 } = allocateForWrite(10);
        target2[position3++] = 215;
        target2[position3++] = 255;
        targetView2.setUint32(position3, date.getMilliseconds() * 4e6 + (seconds / 1e3 / 4294967296 >> 0));
        targetView2.setUint32(position3 + 4, seconds);
      } else if (isNaN(seconds)) {
        if (this.onInvalidDate) {
          allocateForWrite(0);
          return pack2(this.onInvalidDate());
        }
        let { target: target2, targetView: targetView2, position: position3 } = allocateForWrite(3);
        target2[position3++] = 212;
        target2[position3++] = 255;
        target2[position3++] = 255;
      } else {
        let { target: target2, targetView: targetView2, position: position3 } = allocateForWrite(15);
        target2[position3++] = 199;
        target2[position3++] = 12;
        target2[position3++] = 255;
        targetView2.setUint32(position3, date.getMilliseconds() * 1e6);
        targetView2.setBigInt64(position3 + 4, BigInt(Math.floor(seconds)));
      }
    }
  }, {
    pack(set, allocateForWrite, pack2) {
      let array = Array.from(set);
      let { target: target2, position: position3 } = allocateForWrite(this.moreTypes ? 3 : 0);
      if (this.moreTypes) {
        target2[position3++] = 212;
        target2[position3++] = 115;
        target2[position3++] = 0;
      }
      pack2(array);
    }
  }, {
    pack(error, allocateForWrite, pack2) {
      let { target: target2, position: position3 } = allocateForWrite(this.moreTypes ? 3 : 0);
      if (this.moreTypes) {
        target2[position3++] = 212;
        target2[position3++] = 101;
        target2[position3++] = 0;
      }
      pack2([error.name, error.message]);
    }
  }, {
    pack(regex, allocateForWrite, pack2) {
      let { target: target2, position: position3 } = allocateForWrite(this.moreTypes ? 3 : 0);
      if (this.moreTypes) {
        target2[position3++] = 212;
        target2[position3++] = 120;
        target2[position3++] = 0;
      }
      pack2([regex.source, regex.flags]);
    }
  }, {
    pack(arrayBuffer, allocateForWrite) {
      if (this.moreTypes)
        writeExtBuffer(arrayBuffer, 16, allocateForWrite);
      else
        writeBuffer(hasNodeBuffer ? Buffer.from(arrayBuffer) : new Uint8Array(arrayBuffer), allocateForWrite);
    }
  }, {
    pack(typedArray, allocateForWrite) {
      let constructor = typedArray.constructor;
      if (constructor !== ByteArray && this.moreTypes)
        writeExtBuffer(typedArray, typedArrays.indexOf(constructor.name), allocateForWrite);
      else
        writeBuffer(typedArray, allocateForWrite);
    }
  }, {
    pack(c1, allocateForWrite) {
      let { target: target2, position: position3 } = allocateForWrite(1);
      target2[position3] = 193;
    }
  }];
  function writeExtBuffer(typedArray, type, allocateForWrite, encode2) {
    let length = typedArray.byteLength;
    if (length + 1 < 256) {
      var { target: target2, position: position3 } = allocateForWrite(4 + length);
      target2[position3++] = 199;
      target2[position3++] = length + 1;
    } else if (length + 1 < 65536) {
      var { target: target2, position: position3 } = allocateForWrite(5 + length);
      target2[position3++] = 200;
      target2[position3++] = length + 1 >> 8;
      target2[position3++] = length + 1 & 255;
    } else {
      var { target: target2, position: position3, targetView: targetView2 } = allocateForWrite(7 + length);
      target2[position3++] = 201;
      targetView2.setUint32(position3, length + 1);
      position3 += 4;
    }
    target2[position3++] = 116;
    target2[position3++] = type;
    target2.set(new Uint8Array(typedArray.buffer, typedArray.byteOffset, typedArray.byteLength), position3);
  }
  function writeBuffer(buffer2, allocateForWrite) {
    let length = buffer2.byteLength;
    var target2, position3;
    if (length < 256) {
      var { target: target2, position: position3 } = allocateForWrite(length + 2);
      target2[position3++] = 196;
      target2[position3++] = length;
    } else if (length < 65536) {
      var { target: target2, position: position3 } = allocateForWrite(length + 3);
      target2[position3++] = 197;
      target2[position3++] = length >> 8;
      target2[position3++] = length & 255;
    } else {
      var { target: target2, position: position3, targetView: targetView2 } = allocateForWrite(length + 5);
      target2[position3++] = 198;
      targetView2.setUint32(position3, length);
      position3 += 4;
    }
    target2.set(buffer2, position3);
  }
  function writeExtensionData(result, target2, position3, type) {
    let length = result.length;
    switch (length) {
      case 1:
        target2[position3++] = 212;
        break;
      case 2:
        target2[position3++] = 213;
        break;
      case 4:
        target2[position3++] = 214;
        break;
      case 8:
        target2[position3++] = 215;
        break;
      case 16:
        target2[position3++] = 216;
        break;
      default:
        if (length < 256) {
          target2[position3++] = 199;
          target2[position3++] = length;
        } else if (length < 65536) {
          target2[position3++] = 200;
          target2[position3++] = length >> 8;
          target2[position3++] = length & 255;
        } else {
          target2[position3++] = 201;
          target2[position3++] = length >> 24;
          target2[position3++] = length >> 16 & 255;
          target2[position3++] = length >> 8 & 255;
          target2[position3++] = length & 255;
        }
    }
    target2[position3++] = type;
    target2.set(result, position3);
    position3 += length;
    return position3;
  }
  function insertIds(serialized, idsToInsert) {
    let nextId;
    let distanceToMove = idsToInsert.length * 6;
    let lastEnd = serialized.length - distanceToMove;
    idsToInsert.sort((a, b) => a.offset > b.offset ? 1 : -1);
    while (nextId = idsToInsert.pop()) {
      let offset = nextId.offset;
      let id = nextId.id;
      serialized.copyWithin(offset + distanceToMove, offset, lastEnd);
      distanceToMove -= 6;
      let position3 = offset + distanceToMove;
      serialized[position3++] = 214;
      serialized[position3++] = 105;
      serialized[position3++] = id >> 24;
      serialized[position3++] = id >> 16 & 255;
      serialized[position3++] = id >> 8 & 255;
      serialized[position3++] = id & 255;
      lastEnd = offset;
    }
    return serialized;
  }
  function writeBundles(start, pack2) {
    targetView.setUint32(bundledStrings2.position + start, position2 - bundledStrings2.position - start);
    let writeStrings = bundledStrings2;
    bundledStrings2 = null;
    let startPosition = position2;
    pack2(writeStrings[0]);
    pack2(writeStrings[1]);
  }
  var defaultPackr = new Packr({ useRecords: false });
  var pack = defaultPackr.pack;
  var encode = defaultPackr.pack;
  var { NEVER, ALWAYS, DECIMAL_ROUND, DECIMAL_FIT } = FLOAT32_OPTIONS;
  var REUSE_BUFFER_MODE = 512;
  var RESET_BUFFER_MODE = 1024;

  // node_modules/.pnpm/msgpackr@1.5.6/node_modules/msgpackr/iterators.js
  init_env();

  // node_modules/.pnpm/@worker-tools+middleware@0.1.0-pre.15/node_modules/@worker-tools/middleware/esm/caching.js
  init_env();
  var caching = (opt = {}) => async (ax) => {
    const x4 = await ax;
    x4.effects.push((res) => {
      var _a8;
      res.headers.set("cache-control", (_a8 = opt.cacheControl) !== null && _a8 !== void 0 ? _a8 : "");
      if (typeof opt.maxAge === "number") {
        if (opt.maxAge > 31536e3)
          console.warn(`Provided maxAge appears to be too large. Perhaps you meant ${opt.maxAge / 1e3}? maxAge is defined in seconds!`);
        res.headers.append("cache-control", `max-age=${opt.maxAge}`);
      }
      if (opt.mustRevalidate) {
        res.headers.append("cache-control", "must-revalidate");
      }
      if (opt.immutable) {
        res.headers.append("cache-control", "immutable");
      }
      return res;
    });
    return x4;
  };

  // src/router.ts
  init_env();

  // node_modules/.pnpm/@worker-tools+router@0.2.0-pre.6/node_modules/@worker-tools/router/esm/index.js
  init_env();

  // node_modules/.pnpm/@worker-tools+router@0.2.0-pre.6/node_modules/@worker-tools/router/esm/deps/raw.githubusercontent.com/worker-tools/resolvable-promise/master/index.js
  init_env();
  var __classPrivateFieldSet6 = function(receiver, state, value, kind, f) {
    if (kind === "m")
      throw new TypeError("Private method is not writable");
    if (kind === "a" && !f)
      throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
      throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
  };
  var __classPrivateFieldGet7 = function(receiver, state, kind, f) {
    if (kind === "a" && !f)
      throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
      throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
  };
  var _ResolvablePromise_promise2;
  var _ResolvablePromise_resolve2;
  var _ResolvablePromise_reject2;
  var _ResolvablePromise_settled2;
  var _a4;
  var ResolvablePromise2 = class {
    constructor(init2) {
      _ResolvablePromise_promise2.set(this, void 0);
      _ResolvablePromise_resolve2.set(this, void 0);
      _ResolvablePromise_reject2.set(this, void 0);
      _ResolvablePromise_settled2.set(this, false);
      Object.defineProperty(this, _a4, {
        enumerable: true,
        configurable: true,
        writable: true,
        value: "ResolvablePromise"
      });
      __classPrivateFieldSet6(this, _ResolvablePromise_promise2, new Promise((res, rej) => {
        const resolve = __classPrivateFieldSet6(this, _ResolvablePromise_resolve2, (v2) => (__classPrivateFieldSet6(this, _ResolvablePromise_settled2, true, "f"), res(v2)), "f");
        const reject = __classPrivateFieldSet6(this, _ResolvablePromise_reject2, (r2) => (__classPrivateFieldSet6(this, _ResolvablePromise_settled2, true, "f"), rej(r2)), "f");
        if (init2 == null)
          return;
        if (typeof init2 === "function")
          init2(resolve, reject);
        else if (typeof init2.then === "function")
          init2.then(resolve, reject);
      }), "f");
    }
    resolve(x4) {
      __classPrivateFieldGet7(this, _ResolvablePromise_resolve2, "f").call(this, x4);
    }
    reject(reason) {
      __classPrivateFieldGet7(this, _ResolvablePromise_reject2, "f").call(this, reason);
    }
    get settled() {
      return __classPrivateFieldGet7(this, _ResolvablePromise_settled2, "f");
    }
    then(onfulfilled, onrejected) {
      return __classPrivateFieldGet7(this, _ResolvablePromise_promise2, "f").then(onfulfilled, onrejected);
    }
    catch(onrejected) {
      return __classPrivateFieldGet7(this, _ResolvablePromise_promise2, "f").catch(onrejected);
    }
    finally(onfinally) {
      return __classPrivateFieldGet7(this, _ResolvablePromise_promise2, "f").finally(onfinally);
    }
  };
  _ResolvablePromise_promise2 = /* @__PURE__ */ new WeakMap(), _ResolvablePromise_resolve2 = /* @__PURE__ */ new WeakMap(), _ResolvablePromise_reject2 = /* @__PURE__ */ new WeakMap(), _ResolvablePromise_settled2 = /* @__PURE__ */ new WeakMap(), _a4 = Symbol.toStringTag;

  // node_modules/.pnpm/@worker-tools+router@0.2.0-pre.6/node_modules/@worker-tools/router/esm/utils/aggregate-error.js
  init_env();
  var __classPrivateFieldSet7 = function(receiver, state, value, kind, f) {
    if (kind === "m")
      throw new TypeError("Private method is not writable");
    if (kind === "a" && !f)
      throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
      throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
  };
  var __classPrivateFieldGet8 = function(receiver, state, kind, f) {
    if (kind === "a" && !f)
      throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
      throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
  };
  var _AggregateErrorPolyfill_errors3;
  var AggregateErrorPolyfill3 = class extends Error {
    constructor(errors, message = "") {
      super(message);
      _AggregateErrorPolyfill_errors3.set(this, void 0);
      __classPrivateFieldSet7(this, _AggregateErrorPolyfill_errors3, [...errors], "f");
    }
    get name() {
      return "AggregateError";
    }
    get errors() {
      return [...__classPrivateFieldGet8(this, _AggregateErrorPolyfill_errors3, "f")];
    }
  };
  _AggregateErrorPolyfill_errors3 = /* @__PURE__ */ new WeakMap();
  var AggregateError3 = "AggregateError" in self ? self.AggregateError : AggregateErrorPolyfill3;

  // node_modules/.pnpm/@worker-tools+router@0.2.0-pre.6/node_modules/@worker-tools/router/esm/index.js
  var __classPrivateFieldSet8 = function(receiver, state, value, kind, f) {
    if (kind === "m")
      throw new TypeError("Private method is not writable");
    if (kind === "a" && !f)
      throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
      throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
  };
  var __classPrivateFieldGet9 = function(receiver, state, kind, f) {
    if (kind === "a" && !f)
      throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
      throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
  };
  var _WorkerRouter_instances;
  var _WorkerRouter_middleware;
  var _WorkerRouter_routes;
  var _WorkerRouter_recoverRoutes;
  var _WorkerRouter_route;
  var _WorkerRouter_execPatterns;
  var _WorkerRouter_pushRoute;
  var _WorkerRouter_pushMiddlewareRoute;
  var _WorkerRouter_registerPattern;
  var _WorkerRouter_registerRecoverPattern;
  var _WorkerRouter_pushRecoverRoute;
  var _WorkerRouter_pushMiddlewareRecoverRoute;
  var _WorkerRouter_routeHandler;
  function toPattern(pathname) {
    var _a8, _b3, _c;
    const pattern = new URLPattern({
      pathname,
      protocol: (_a8 = self.location) === null || _a8 === void 0 ? void 0 : _a8.protocol,
      hostname: (_b3 = self.location) === null || _b3 === void 0 ? void 0 : _b3.hostname,
      port: (_c = self.location) === null || _c === void 0 ? void 0 : _c.port
    });
    return pattern;
  }
  var WorkerRouter = class {
    constructor(middleware = (_) => _) {
      _WorkerRouter_instances.add(this);
      _WorkerRouter_middleware.set(this, void 0);
      _WorkerRouter_routes.set(this, []);
      _WorkerRouter_recoverRoutes.set(this, []);
      _WorkerRouter_routeHandler.set(this, (ctx) => {
        var _a8, _b3;
        const values = Object.values((_b3 = (_a8 = ctx.match) === null || _a8 === void 0 ? void 0 : _a8.pathname.groups) !== null && _b3 !== void 0 ? _b3 : {});
        if (values.length) {
          const baseURL = new URL(ctx.request.url).origin;
          const subURL = new URL(values.at(-1), baseURL);
          return __classPrivateFieldGet9(this, _WorkerRouter_instances, "m", _WorkerRouter_route).call(this, subURL.href, ctx);
        }
        throw TypeError("Pattern not suitable for nested routing. Did you forget to add a wildcard (*)?");
      });
      Object.defineProperty(this, "handle", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: (request, ctx) => {
          var _a8, _b3;
          return __classPrivateFieldGet9(this, _WorkerRouter_instances, "m", _WorkerRouter_route).call(this, request.url, {
            ...ctx,
            request,
            waitUntil: (_b3 = (_a8 = ctx === null || ctx === void 0 ? void 0 : ctx.waitUntil) === null || _a8 === void 0 ? void 0 : _a8.bind(ctx)) !== null && _b3 !== void 0 ? _b3 : (_f) => {
            }
          });
        }
      });
      Object.defineProperty(this, "handleEvent", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: (object) => {
          const event = object;
          event.respondWith(__classPrivateFieldGet9(this, _WorkerRouter_instances, "m", _WorkerRouter_route).call(this, event.request.url, {
            request: event.request,
            waitUntil: event.waitUntil.bind(event),
            event
          }));
        }
      });
      Object.defineProperty(this, "fetch", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: (request, env, ctx) => {
          var _a8, _b3;
          return __classPrivateFieldGet9(this, _WorkerRouter_instances, "m", _WorkerRouter_route).call(this, request.url, {
            request,
            waitUntil: (_b3 = (_a8 = ctx === null || ctx === void 0 ? void 0 : ctx.waitUntil) === null || _a8 === void 0 ? void 0 : _a8.bind(ctx)) !== null && _b3 !== void 0 ? _b3 : (_f) => {
            },
            env,
            ctx
          });
        }
      });
      Object.defineProperty(this, "serveCallback", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: (request, connInfo) => {
          return __classPrivateFieldGet9(this, _WorkerRouter_instances, "m", _WorkerRouter_route).call(this, request.url, { request, waitUntil: (_f) => {
          }, connInfo });
        }
      });
      __classPrivateFieldSet8(this, _WorkerRouter_middleware, middleware, "f");
    }
    any(path, middlewareOrHandler, handler5) {
      return __classPrivateFieldGet9(this, _WorkerRouter_instances, "m", _WorkerRouter_registerPattern).call(this, "ANY", arguments.length, toPattern(path), middlewareOrHandler, handler5);
    }
    all(path, middlewareOrHandler, handler5) {
      return __classPrivateFieldGet9(this, _WorkerRouter_instances, "m", _WorkerRouter_registerPattern).call(this, "ANY", arguments.length, toPattern(path), middlewareOrHandler, handler5);
    }
    get(path, middlewareOrHandler, handler5) {
      return __classPrivateFieldGet9(this, _WorkerRouter_instances, "m", _WorkerRouter_registerPattern).call(this, "GET", arguments.length, toPattern(path), middlewareOrHandler, handler5);
    }
    post(path, middlewareOrHandler, handler5) {
      return __classPrivateFieldGet9(this, _WorkerRouter_instances, "m", _WorkerRouter_registerPattern).call(this, "POST", arguments.length, toPattern(path), middlewareOrHandler, handler5);
    }
    put(path, middlewareOrHandler, handler5) {
      return __classPrivateFieldGet9(this, _WorkerRouter_instances, "m", _WorkerRouter_registerPattern).call(this, "PUT", arguments.length, toPattern(path), middlewareOrHandler, handler5);
    }
    patch(path, middlewareOrHandler, handler5) {
      return __classPrivateFieldGet9(this, _WorkerRouter_instances, "m", _WorkerRouter_registerPattern).call(this, "PATCH", arguments.length, toPattern(path), middlewareOrHandler, handler5);
    }
    delete(path, middlewareOrHandler, handler5) {
      return __classPrivateFieldGet9(this, _WorkerRouter_instances, "m", _WorkerRouter_registerPattern).call(this, "DELETE", arguments.length, toPattern(path), middlewareOrHandler, handler5);
    }
    head(path, middlewareOrHandler, handler5) {
      return __classPrivateFieldGet9(this, _WorkerRouter_instances, "m", _WorkerRouter_registerPattern).call(this, "HEAD", arguments.length, toPattern(path), middlewareOrHandler, handler5);
    }
    options(path, middlewareOrHandler, handler5) {
      return __classPrivateFieldGet9(this, _WorkerRouter_instances, "m", _WorkerRouter_registerPattern).call(this, "OPTIONS", arguments.length, toPattern(path), middlewareOrHandler, handler5);
    }
    external(init2, middlewareOrHandler, handler5) {
      return __classPrivateFieldGet9(this, _WorkerRouter_instances, "m", _WorkerRouter_registerPattern).call(this, "ANY", arguments.length, new URLPattern(init2), middlewareOrHandler, handler5);
    }
    externalGET(init2, middlewareOrHandler, handler5) {
      return __classPrivateFieldGet9(this, _WorkerRouter_instances, "m", _WorkerRouter_registerPattern).call(this, "GET", arguments.length, new URLPattern(init2), middlewareOrHandler, handler5);
    }
    externalPOST(init2, middlewareOrHandler, handler5) {
      return __classPrivateFieldGet9(this, _WorkerRouter_instances, "m", _WorkerRouter_registerPattern).call(this, "POST", arguments.length, new URLPattern(init2), middlewareOrHandler, handler5);
    }
    externalPUT(init2, middlewareOrHandler, handler5) {
      return __classPrivateFieldGet9(this, _WorkerRouter_instances, "m", _WorkerRouter_registerPattern).call(this, "PUT", arguments.length, new URLPattern(init2), middlewareOrHandler, handler5);
    }
    externalPATCH(init2, middlewareOrHandler, handler5) {
      return __classPrivateFieldGet9(this, _WorkerRouter_instances, "m", _WorkerRouter_registerPattern).call(this, "PATCH", arguments.length, new URLPattern(init2), middlewareOrHandler, handler5);
    }
    externalDELETE(init2, middlewareOrHandler, handler5) {
      return __classPrivateFieldGet9(this, _WorkerRouter_instances, "m", _WorkerRouter_registerPattern).call(this, "DELETE", arguments.length, new URLPattern(init2), middlewareOrHandler, handler5);
    }
    externalOPTIONS(init2, middlewareOrHandler, handler5) {
      return __classPrivateFieldGet9(this, _WorkerRouter_instances, "m", _WorkerRouter_registerPattern).call(this, "OPTIONS", arguments.length, new URLPattern(init2), middlewareOrHandler, handler5);
    }
    externalHEAD(init2, middlewareOrHandler, handler5) {
      return __classPrivateFieldGet9(this, _WorkerRouter_instances, "m", _WorkerRouter_registerPattern).call(this, "HEAD", arguments.length, new URLPattern(init2), middlewareOrHandler, handler5);
    }
    use(path, subRouter) {
      if (!path.endsWith("*")) {
        console.warn("Path for 'use' does not appear to end in a wildcard (*). This is likely to produce unexpected results.");
      }
      __classPrivateFieldGet9(this, _WorkerRouter_routes, "f").push({
        method: "ANY",
        pattern: toPattern(path),
        handler: __classPrivateFieldGet9(subRouter, _WorkerRouter_routeHandler, "f")
      });
      return this;
    }
    useExternal(init2, subRouter) {
      const pattern = new URLPattern(init2);
      if (!pattern.pathname.endsWith("*")) {
        console.warn("Pathname pattern for 'use' does not appear to end in a wildcard (*). This is likely to produce unexpected results.");
      }
      __classPrivateFieldGet9(this, _WorkerRouter_routes, "f").push({
        method: "ANY",
        pattern,
        handler: __classPrivateFieldGet9(subRouter, _WorkerRouter_routeHandler, "f")
      });
      return this;
    }
    recover(path, middlewareOrHandler, handler5) {
      return __classPrivateFieldGet9(this, _WorkerRouter_instances, "m", _WorkerRouter_registerRecoverPattern).call(this, "ANY", arguments.length, toPattern(path), middlewareOrHandler, handler5);
    }
    recoverExternal(init2, middlewareOrHandler, handler5) {
      return __classPrivateFieldGet9(this, _WorkerRouter_instances, "m", _WorkerRouter_registerRecoverPattern).call(this, "ANY", arguments.length, new URLPattern(init2), middlewareOrHandler, handler5);
    }
  };
  _WorkerRouter_middleware = /* @__PURE__ */ new WeakMap(), _WorkerRouter_routes = /* @__PURE__ */ new WeakMap(), _WorkerRouter_recoverRoutes = /* @__PURE__ */ new WeakMap(), _WorkerRouter_routeHandler = /* @__PURE__ */ new WeakMap(), _WorkerRouter_instances = /* @__PURE__ */ new WeakSet(), _WorkerRouter_route = async function _WorkerRouter_route2(fqURL, ctx) {
    var _a8, _b3, _c, _d;
    const result = __classPrivateFieldGet9(this, _WorkerRouter_instances, "m", _WorkerRouter_execPatterns).call(this, fqURL, ctx.request);
    const handled = new ResolvablePromise2();
    try {
      if (!result)
        throw notFound();
      const [handler5, match2] = result;
      const response = await handler5(Object.assign(ctx, { match: match2, handled, effects: new EffectsList() }));
      handled.resolve((_b3 = (_a8 = ctx.event) === null || _a8 === void 0 ? void 0 : _a8.handled) !== null && _b3 !== void 0 ? _b3 : Promise.resolve());
      return response;
    } catch (err) {
      if (err instanceof Response) {
        const recoverResult = __classPrivateFieldGet9(this, _WorkerRouter_instances, "m", _WorkerRouter_execPatterns).call(this, fqURL, ctx.request, __classPrivateFieldGet9(this, _WorkerRouter_recoverRoutes, "f"));
        if (recoverResult) {
          try {
            const [handler5, match2] = recoverResult;
            const response = await handler5(Object.assign(ctx, { match: match2, response: err, handled, effects: new EffectsList() }));
            handled.resolve((_d = (_c = ctx.event) === null || _c === void 0 ? void 0 : _c.handled) !== null && _d !== void 0 ? _d : Promise.resolve());
            return response;
          } catch (recoverErr) {
            throw new AggregateError3([err, recoverErr], "Route handler as well as recover handler failed");
          }
        }
      }
      throw err;
    }
  }, _WorkerRouter_execPatterns = function _WorkerRouter_execPatterns2(fqURL, request, routes = __classPrivateFieldGet9(this, _WorkerRouter_routes, "f")) {
    for (const { method, pattern, handler: handler5 } of routes) {
      if (method !== "ANY" && method !== request.method.toUpperCase())
        continue;
      const match2 = pattern.exec(fqURL);
      if (!match2)
        continue;
      return [handler5, match2];
    }
    return null;
  }, _WorkerRouter_pushRoute = function _WorkerRouter_pushRoute2(method, pattern, handler5) {
    __classPrivateFieldGet9(this, _WorkerRouter_routes, "f").push({
      method,
      pattern,
      handler: async (event) => {
        const ctx = await __classPrivateFieldGet9(this, _WorkerRouter_middleware, "f").call(this, event);
        const response = handler5(event.request, ctx);
        return executeEffects(event.effects, response);
      }
    });
  }, _WorkerRouter_pushMiddlewareRoute = function _WorkerRouter_pushMiddlewareRoute2(method, pattern, middleware, handler5) {
    __classPrivateFieldGet9(this, _WorkerRouter_routes, "f").push({
      method,
      pattern,
      handler: async (event) => {
        const ctx = await middleware(__classPrivateFieldGet9(this, _WorkerRouter_middleware, "f").call(this, event));
        const response = handler5(event.request, ctx);
        return executeEffects(event.effects, response);
      }
    });
  }, _WorkerRouter_registerPattern = function _WorkerRouter_registerPattern2(method, argsN, pattern, middlewareOrHandler, handler5) {
    if (argsN === 2) {
      const handler6 = middlewareOrHandler;
      __classPrivateFieldGet9(this, _WorkerRouter_instances, "m", _WorkerRouter_pushRoute).call(this, method, pattern, handler6);
    } else if (argsN === 3) {
      const middleware = middlewareOrHandler;
      __classPrivateFieldGet9(this, _WorkerRouter_instances, "m", _WorkerRouter_pushMiddlewareRoute).call(this, method, pattern, middleware, handler5);
    } else {
      throw Error(`Router '${method.toLowerCase()}' called with invalid number of arguments`);
    }
    return this;
  }, _WorkerRouter_registerRecoverPattern = function _WorkerRouter_registerRecoverPattern2(method, argsN, pattern, middlewareOrHandler, handler5) {
    if (argsN === 2) {
      const handler6 = middlewareOrHandler;
      __classPrivateFieldGet9(this, _WorkerRouter_instances, "m", _WorkerRouter_pushRecoverRoute).call(this, method, pattern, handler6);
    } else if (argsN === 3) {
      const middleware = middlewareOrHandler;
      __classPrivateFieldGet9(this, _WorkerRouter_instances, "m", _WorkerRouter_pushMiddlewareRecoverRoute).call(this, method, pattern, middleware, handler5);
    } else {
      throw Error(`Router '${method.toLowerCase()}' called with invalid number of arguments`);
    }
    return this;
  }, _WorkerRouter_pushRecoverRoute = function _WorkerRouter_pushRecoverRoute2(method, pattern, handler5) {
    __classPrivateFieldGet9(this, _WorkerRouter_recoverRoutes, "f").push({
      method,
      pattern,
      handler: (event) => {
        const response = handler5(event.request, event);
        return executeEffects(event.effects, response);
      }
    });
  }, _WorkerRouter_pushMiddlewareRecoverRoute = function _WorkerRouter_pushMiddlewareRecoverRoute2(method, pattern, middleware, handler5) {
    __classPrivateFieldGet9(this, _WorkerRouter_recoverRoutes, "f").push({
      method,
      pattern,
      handler: async (event) => {
        const ctx = await middleware(event);
        const response = handler5(event.request, ctx);
        return executeEffects(event.effects, response);
      }
    });
  };

  // src/router.ts
  var mw = pipe(basics(), contentTypes(["text/html", "application/json"]));
  var router = new WorkerRouter();

  // src/routes/assets.ts
  init_env();
  var import_kv_asset_handler = __toESM(require_dist());

  // node_modules/.pnpm/@worker-tools+response-creators@1.0.8/node_modules/@worker-tools/response-creators/index.js
  init_env();
  var mkResponse2 = (status, statusText) => (body = null, init2 = {}) => new Response(body, {
    ...init2,
    status,
    statusText
  });
  var mkRedirect2 = (status, statusText) => (location2, init2 = {}) => new Response(null, {
    ...init2,
    status,
    statusText,
    headers: [
      ...(init2 === null || init2 === void 0 ? void 0 : init2.headers) ? Array.isArray(init2.headers) ? init2.headers : new Headers(init2.headers) : [],
      ["Location", location2.toString()]
    ]
  });
  var mkUnauthorized2 = (status, statusText) => (realm = "", init2 = {}) => new Response(null, {
    ...init2,
    status,
    statusText,
    headers: [
      ...(init2 === null || init2 === void 0 ? void 0 : init2.headers) ? Array.isArray(init2.headers) ? init2.headers : new Headers(init2.headers) : [],
      ["WWW-Authenticate", `Basic realm="${realm}", charset="UTF-8"`]
    ]
  });
  var mkNotModified2 = (status, statusText) => (ifNoneMatch, ifModifiedSince, init2 = {}) => new Response(null, {
    ...init2,
    status,
    statusText,
    headers: [
      ...(init2 === null || init2 === void 0 ? void 0 : init2.headers) ? Array.isArray(init2.headers) ? init2.headers : new Headers(init2.headers) : [],
      ["If-None-Match", ifNoneMatch],
      ["If-Modified-Since", ifModifiedSince.toUTCString()]
    ]
  });
  var ok2 = mkResponse2(200, "OK");
  var created2 = mkResponse2(201, "Created");
  var accepted2 = mkResponse2(202, "Accepted");
  var nonAuthoritativeInformation2 = mkResponse2(203, "Non-Authoritative Information");
  var noContent2 = mkResponse2(204, "No Content");
  var resetContent2 = mkResponse2(205, "Reset Content");
  var partialContent2 = mkResponse2(206, "Partial Content");
  var multiStatus2 = mkResponse2(207, "Multi-Status");
  var alreadyReported2 = mkResponse2(208, "Already Reported");
  var imUsed2 = mkResponse2(226, "IM Used");
  var multipleChoices2 = mkRedirect2(300, "Multiple Choices");
  var movedPermanently2 = mkRedirect2(301, "Moved Permanently");
  var found2 = mkRedirect2(302, "Found");
  var seeOther2 = mkRedirect2(303, "See Other");
  var notModified2 = mkNotModified2(304, "Not Modified");
  var temporaryRedirect2 = mkRedirect2(307, "Temporary Redirect");
  var permanentRedirect2 = mkRedirect2(308, "Permanent Redirect");
  var badRequest2 = mkResponse2(400, "Bad Request");
  var unauthorized2 = mkUnauthorized2(401, "Unauthorized");
  var paymentRequired2 = mkResponse2(402, "Payment Required");
  var forbidden2 = mkResponse2(403, "Forbidden");
  var notFound2 = mkResponse2(404, "Not Found");
  var methodNotAllowed2 = mkResponse2(405, "Method Not Allowed");
  var notAcceptable2 = mkResponse2(406, "Not Acceptable");
  var proxyAuthenticationRequired2 = mkResponse2(407, "Proxy Authentication Required");
  var requestTimeout2 = mkResponse2(408, "Request Timeout");
  var conflict2 = mkResponse2(409, "Conflict");
  var gone2 = mkResponse2(410, "Gone");
  var lengthRequired2 = mkResponse2(411, "Length Required");
  var preconditionFailed2 = mkResponse2(412, "Precondition Failed");
  var payloadTooLarge2 = mkResponse2(413, "Payload Too Large");
  var uriTooLong2 = mkResponse2(414, "URI Too Long");
  var unsupportedMediaType2 = mkResponse2(415, "Unsupported Media Type");
  var rangeNotSatisfiable2 = mkResponse2(416, "Range Not Satisfiable");
  var expectationFailed2 = mkResponse2(417, "Expectation Failed");
  var imATeapot2 = mkResponse2(418, "I'm a teapot");
  var misdirectedRequest2 = mkResponse2(421, "Misdirected Request");
  var unprocessableEntity2 = mkResponse2(422, "Unprocessable Entity");
  var locked2 = mkResponse2(423, "Locked");
  var failedDependency2 = mkResponse2(424, "Failed Dependency");
  var tooEarly2 = mkResponse2(425, "Too Early");
  var upgradeRequired2 = mkResponse2(426, "Upgrade Required");
  var preconditionRequired2 = mkResponse2(428, "Precondition Required");
  var tooManyRequests2 = mkResponse2(429, "Too Many Requests");
  var requestHeaderFieldsTooLarge2 = mkResponse2(431, "Request Header Fields Too Large");
  var unavailableForLegalReasons2 = mkResponse2(451, "Unavailable For Legal Reasons");
  var internalServerError2 = mkResponse2(500, "Internal Server Error");
  var notImplemented2 = mkResponse2(501, "Not Implemented");
  var badGateway2 = mkResponse2(502, "Bad Gateway");
  var serviceUnavailable2 = mkResponse2(503, "Service Unavailable");
  var gatewayTimeout2 = mkResponse2(504, "Gateway Timeout");
  var httpVersionNotSupported2 = mkResponse2(505, "HTTP Version Not Supported");
  var variantAlsoNegotiates2 = mkResponse2(506, "Variant Also Negotiates");
  var insufficientStorage2 = mkResponse2(507, "Insufficient Storage");
  var loopDetected2 = mkResponse2(508, "Loop Detected");
  var notExtended2 = mkResponse2(510, "Not Extended");
  var networkAuthenticationRequired2 = mkResponse2(511, "Network Authentication Required");

  // src/routes/assets.ts
  var import_meta = {};
  async function handler(_req, event) {
    const options = {};
    try {
      if (false) {
        options.cacheControl = {
          bypassCache: true
        };
      }
      let page;
      if ("__STATIC_CONTENT" in self) {
        page = await (0, import_kv_asset_handler.getAssetFromKV)(event, options);
      } else if ("Deno" in globalThis) {
        const url = new URL(event.request.url);
        const assetURL = new URL(`../public${url.pathname}`, import_meta.url).href;
        page = await fetch(assetURL);
      } else {
        page = await self.caches.match(event.request) ?? await fetch(event.request, { mode: "cors" });
      }
      const response = new Response(page.body, page);
      return response;
    } catch (e) {
      console.error(e);
      return internalServerError2(e instanceof Error ? e.message : e);
    }
  }

  // src/routes/news.ts
  init_env();

  // node_modules/.pnpm/@worker-tools+html@2.0.0-pre.8/node_modules/@worker-tools/html/esm/index.js
  init_env();

  // node_modules/.pnpm/@worker-tools+html@2.0.0-pre.8/node_modules/@worker-tools/html/esm/html.js
  init_env();

  // node_modules/.pnpm/@worker-tools+html@2.0.0-pre.8/node_modules/@worker-tools/html/esm/deps/deno.land/x/escape_html@1.0.0/mod.js
  init_env();
  var matchHtmlRegExp = /["'&<>]/;
  function escapeHtml(string) {
    const str = "" + string;
    const match2 = matchHtmlRegExp.exec(str);
    if (!match2) {
      return str;
    }
    let escape2;
    let html2 = "";
    let index = 0;
    let lastIndex = 0;
    for (index = match2.index; index < str.length; index++) {
      switch (str.charCodeAt(index)) {
        case 34:
          escape2 = "&quot;";
          break;
        case 38:
          escape2 = "&amp;";
          break;
        case 39:
          escape2 = "&#39;";
          break;
        case 60:
          escape2 = "&lt;";
          break;
        case 62:
          escape2 = "&gt;";
          break;
        default:
          continue;
      }
      if (lastIndex !== index) {
        html2 += str.substring(lastIndex, index);
      }
      lastIndex = index + 1;
      html2 += escape2;
    }
    return lastIndex !== index ? html2 + str.substring(lastIndex, index) : html2;
  }

  // node_modules/.pnpm/@worker-tools+html@2.0.0-pre.8/node_modules/@worker-tools/html/esm/html.js
  var __classPrivateFieldSet9 = function(receiver, state, value, kind, f) {
    if (kind === "m")
      throw new TypeError("Private method is not writable");
    if (kind === "a" && !f)
      throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
      throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
  };
  var __classPrivateFieldGet10 = function(receiver, state, kind, f) {
    if (kind === "a" && !f)
      throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
      throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
  };
  var _HTML_strings;
  var _HTML_args;
  var _UnsafeHTML_value;
  var _Fallback_content;
  var _Fallback_fallback;
  var isIterable = (x4) => typeof x4 === "object" && x4 !== null && Symbol.iterator in x4;
  var isAsyncIterable = (x4) => typeof x4 === "object" && x4 !== null && Symbol.asyncIterator in x4;
  async function* unpackContent(content) {
    const x4 = await content;
    if (x4 == null || x4 === "" || x4 === false) {
      yield " ";
    } else if (x4 instanceof AbstractHTML) {
      yield* x4;
    } else if (isIterable(x4)) {
      for (const xi of x4) {
        yield* unpackContent(xi);
      }
    } else if (isAsyncIterable(x4)) {
      for await (const xi of x4) {
        yield* unpackContent(xi);
      }
    } else {
      yield escapeHtml(x4);
    }
  }
  async function* unpack2(content) {
    try {
      yield* unpackContent(typeof content === "function" ? content() : content);
    } catch (err) {
      if (err instanceof AbstractHTML)
        yield* err;
      else
        throw err;
    }
  }
  var AbstractHTML = class {
  };
  var HTML = class extends AbstractHTML {
    constructor(strings2, args) {
      super();
      _HTML_strings.set(this, void 0);
      _HTML_args.set(this, void 0);
      __classPrivateFieldSet9(this, _HTML_strings, strings2, "f");
      __classPrivateFieldSet9(this, _HTML_args, args, "f");
    }
    async *[(_HTML_strings = /* @__PURE__ */ new WeakMap(), _HTML_args = /* @__PURE__ */ new WeakMap(), Symbol.asyncIterator)]() {
      const stringsIt = __classPrivateFieldGet10(this, _HTML_strings, "f")[Symbol.iterator]();
      const argsIt = __classPrivateFieldGet10(this, _HTML_args, "f")[Symbol.iterator]();
      while (true) {
        const { done: stringDone2, value: string2 } = stringsIt.next();
        if (stringDone2)
          break;
        else
          yield string2;
        const { done: argDone, value: arg } = argsIt.next();
        if (argDone)
          break;
        else
          yield* unpack2(arg);
      }
      const { done: stringDone, value: string } = stringsIt.next();
      if (stringDone)
        return;
      else
        yield string;
    }
  };
  var UnsafeHTML = class extends AbstractHTML {
    constructor(value) {
      super();
      _UnsafeHTML_value.set(this, void 0);
      __classPrivateFieldSet9(this, _UnsafeHTML_value, value || " ", "f");
    }
    async *[(_UnsafeHTML_value = /* @__PURE__ */ new WeakMap(), Symbol.asyncIterator)]() {
      yield __classPrivateFieldGet10(this, _UnsafeHTML_value, "f");
    }
    toString() {
      return __classPrivateFieldGet10(this, _UnsafeHTML_value, "f");
    }
    toJSON() {
      return __classPrivateFieldGet10(this, _UnsafeHTML_value, "f");
    }
  };
  var Fallback = class extends AbstractHTML {
    constructor(content, fallback) {
      super();
      _Fallback_content.set(this, void 0);
      _Fallback_fallback.set(this, void 0);
      __classPrivateFieldSet9(this, _Fallback_content, content, "f");
      __classPrivateFieldSet9(this, _Fallback_fallback, fallback, "f");
    }
    async *[(_Fallback_content = /* @__PURE__ */ new WeakMap(), _Fallback_fallback = /* @__PURE__ */ new WeakMap(), Symbol.asyncIterator)]() {
      try {
        yield* unpack2(__classPrivateFieldGet10(this, _Fallback_content, "f"));
      } catch (e) {
        yield* typeof __classPrivateFieldGet10(this, _Fallback_fallback, "f") === "function" ? __classPrivateFieldGet10(this, _Fallback_fallback, "f").call(this, e) : __classPrivateFieldGet10(this, _Fallback_fallback, "f");
      }
    }
  };
  function html(strings2, ...args) {
    return new HTML(strings2, args);
  }
  function unsafeHTML(content) {
    return new UnsafeHTML(content);
  }

  // node_modules/.pnpm/@worker-tools+html@2.0.0-pre.8/node_modules/@worker-tools/html/esm/html-response.js
  init_env();

  // node_modules/.pnpm/@worker-tools+stream-response@0.1.0-pre.0/node_modules/@worker-tools/stream-response/esm/index.js
  init_env();

  // node_modules/.pnpm/whatwg-stream-to-async-iter@0.5.0/node_modules/whatwg-stream-to-async-iter/index.js
  init_env();
  function asyncIterableToStreamTS(iterable) {
    const { readable, writable } = new TransformStream();
    (async () => {
      const writer = writable.getWriter();
      try {
        for await (const x4 of iterable)
          writer.write(x4);
        writer.close();
      } catch (err) {
        writer.abort(err);
      }
    })();
    return readable;
  }
  function asyncIterableToStreamRS(iterable) {
    return new ReadableStream({
      async pull(controller) {
        try {
          for await (const x4 of iterable)
            controller.enqueue(x4);
          controller.close();
        } catch (err) {
          controller.error(err);
        }
      }
    });
  }
  var tryReadableStream = () => {
    try {
      return !!new ReadableStream({});
    } catch (_a8) {
      return false;
    }
  };
  var asyncIterableToStream = tryReadableStream() ? asyncIterableToStreamRS : asyncIterableToStreamTS;

  // node_modules/.pnpm/@worker-tools+stream-response@0.1.0-pre.0/node_modules/@worker-tools/stream-response/esm/iter.js
  init_env();
  async function* aMap(iterable, f) {
    for await (const x4 of iterable)
      yield f(x4);
  }
  async function aJoin(iterable) {
    const chunks = [];
    for await (const x4 of iterable)
      chunks.push(x4);
    return chunks.join("");
  }
  async function* promiseToAsyncIterable(promise) {
    yield await promise;
  }

  // node_modules/.pnpm/@worker-tools+stream-response@0.1.0-pre.0/node_modules/@worker-tools/stream-response/esm/index.js
  var _a5;
  var _b;
  var isCFWorkers = ((_b = (_a5 = self.navigator) === null || _a5 === void 0 ? void 0 : _a5.userAgent) === null || _b === void 0 ? void 0 : _b.includes("Cloudflare-Workers")) || !("TextEncoderStream" in self);
  var StreamResponse = class extends Response {
    constructor(body, init2) {
      super(isCFWorkers ? (() => {
        const encoder = new TextEncoder();
        return asyncIterableToStream(aMap(body, (x4) => encoder.encode(x4)));
      })() : asyncIterableToStream(body).pipeThrough(new TextEncoderStream()), init2);
    }
  };
  var BufferedResponse = class extends Response {
    constructor(body, init2) {
      super(asyncIterableToStream(promiseToAsyncIterable(aJoin(body).then((str) => new TextEncoder().encode(str)))), init2);
    }
  };

  // node_modules/.pnpm/@worker-tools+html@2.0.0-pre.8/node_modules/@worker-tools/html/esm/html-response.js
  var HTMLResponse = class extends StreamResponse {
    constructor(html2, init2) {
      super(html2, init2);
      if (!this.headers.has("content-type"))
        this.headers.set("Content-Type", HTMLResponse.contentType);
    }
  };
  Object.defineProperty(HTMLResponse, "contentType", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: "text/html;charset=UTF-8"
  });
  var BufferedHTMLResponse = class extends BufferedResponse {
    constructor(html2, init2) {
      super(html2, init2);
      if (!this.headers.has("content-type"))
        this.headers.set("content-type", BufferedHTMLResponse.contentType);
    }
  };
  Object.defineProperty(BufferedHTMLResponse, "contentType", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: "text/html;charset=UTF-8"
  });

  // node_modules/.pnpm/date-fns@2.28.0/node_modules/date-fns/esm/index.js
  init_env();

  // node_modules/.pnpm/date-fns@2.28.0/node_modules/date-fns/esm/toDate/index.js
  init_env();

  // node_modules/.pnpm/date-fns@2.28.0/node_modules/date-fns/esm/_lib/requiredArgs/index.js
  init_env();
  function requiredArgs(required, args) {
    if (args.length < required) {
      throw new TypeError(required + " argument" + (required > 1 ? "s" : "") + " required, but only " + args.length + " present");
    }
  }

  // node_modules/.pnpm/date-fns@2.28.0/node_modules/date-fns/esm/toDate/index.js
  function toDate(argument) {
    requiredArgs(1, arguments);
    var argStr = Object.prototype.toString.call(argument);
    if (argument instanceof Date || typeof argument === "object" && argStr === "[object Date]") {
      return new Date(argument.getTime());
    } else if (typeof argument === "number" || argStr === "[object Number]") {
      return new Date(argument);
    } else {
      if ((typeof argument === "string" || argStr === "[object String]") && typeof console !== "undefined") {
        console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule");
        console.warn(new Error().stack);
      }
      return new Date(NaN);
    }
  }

  // node_modules/.pnpm/date-fns@2.28.0/node_modules/date-fns/esm/_lib/getTimezoneOffsetInMilliseconds/index.js
  init_env();
  function getTimezoneOffsetInMilliseconds(date) {
    var utcDate = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds()));
    utcDate.setUTCFullYear(date.getFullYear());
    return date.getTime() - utcDate.getTime();
  }

  // node_modules/.pnpm/date-fns@2.28.0/node_modules/date-fns/esm/compareAsc/index.js
  init_env();
  function compareAsc(dirtyDateLeft, dirtyDateRight) {
    requiredArgs(2, arguments);
    var dateLeft = toDate(dirtyDateLeft);
    var dateRight = toDate(dirtyDateRight);
    var diff2 = dateLeft.getTime() - dateRight.getTime();
    if (diff2 < 0) {
      return -1;
    } else if (diff2 > 0) {
      return 1;
    } else {
      return diff2;
    }
  }

  // node_modules/.pnpm/date-fns@2.28.0/node_modules/date-fns/esm/locale/en-US/index.js
  init_env();

  // node_modules/.pnpm/date-fns@2.28.0/node_modules/date-fns/esm/locale/en-US/_lib/formatDistance/index.js
  init_env();
  var formatDistanceLocale = {
    lessThanXSeconds: {
      one: "less than a second",
      other: "less than {{count}} seconds"
    },
    xSeconds: {
      one: "1 second",
      other: "{{count}} seconds"
    },
    halfAMinute: "half a minute",
    lessThanXMinutes: {
      one: "less than a minute",
      other: "less than {{count}} minutes"
    },
    xMinutes: {
      one: "1 minute",
      other: "{{count}} minutes"
    },
    aboutXHours: {
      one: "about 1 hour",
      other: "about {{count}} hours"
    },
    xHours: {
      one: "1 hour",
      other: "{{count}} hours"
    },
    xDays: {
      one: "1 day",
      other: "{{count}} days"
    },
    aboutXWeeks: {
      one: "about 1 week",
      other: "about {{count}} weeks"
    },
    xWeeks: {
      one: "1 week",
      other: "{{count}} weeks"
    },
    aboutXMonths: {
      one: "about 1 month",
      other: "about {{count}} months"
    },
    xMonths: {
      one: "1 month",
      other: "{{count}} months"
    },
    aboutXYears: {
      one: "about 1 year",
      other: "about {{count}} years"
    },
    xYears: {
      one: "1 year",
      other: "{{count}} years"
    },
    overXYears: {
      one: "over 1 year",
      other: "over {{count}} years"
    },
    almostXYears: {
      one: "almost 1 year",
      other: "almost {{count}} years"
    }
  };
  var formatDistance = function(token, count, options) {
    var result;
    var tokenValue = formatDistanceLocale[token];
    if (typeof tokenValue === "string") {
      result = tokenValue;
    } else if (count === 1) {
      result = tokenValue.one;
    } else {
      result = tokenValue.other.replace("{{count}}", count.toString());
    }
    if (options !== null && options !== void 0 && options.addSuffix) {
      if (options.comparison && options.comparison > 0) {
        return "in " + result;
      } else {
        return result + " ago";
      }
    }
    return result;
  };
  var formatDistance_default = formatDistance;

  // node_modules/.pnpm/date-fns@2.28.0/node_modules/date-fns/esm/locale/en-US/_lib/formatLong/index.js
  init_env();

  // node_modules/.pnpm/date-fns@2.28.0/node_modules/date-fns/esm/locale/_lib/buildFormatLongFn/index.js
  init_env();
  function buildFormatLongFn(args) {
    return function() {
      var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
      var width = options.width ? String(options.width) : args.defaultWidth;
      var format = args.formats[width] || args.formats[args.defaultWidth];
      return format;
    };
  }

  // node_modules/.pnpm/date-fns@2.28.0/node_modules/date-fns/esm/locale/en-US/_lib/formatLong/index.js
  var dateFormats = {
    full: "EEEE, MMMM do, y",
    long: "MMMM do, y",
    medium: "MMM d, y",
    short: "MM/dd/yyyy"
  };
  var timeFormats = {
    full: "h:mm:ss a zzzz",
    long: "h:mm:ss a z",
    medium: "h:mm:ss a",
    short: "h:mm a"
  };
  var dateTimeFormats = {
    full: "{{date}} 'at' {{time}}",
    long: "{{date}} 'at' {{time}}",
    medium: "{{date}}, {{time}}",
    short: "{{date}}, {{time}}"
  };
  var formatLong = {
    date: buildFormatLongFn({
      formats: dateFormats,
      defaultWidth: "full"
    }),
    time: buildFormatLongFn({
      formats: timeFormats,
      defaultWidth: "full"
    }),
    dateTime: buildFormatLongFn({
      formats: dateTimeFormats,
      defaultWidth: "full"
    })
  };
  var formatLong_default = formatLong;

  // node_modules/.pnpm/date-fns@2.28.0/node_modules/date-fns/esm/locale/en-US/_lib/formatRelative/index.js
  init_env();
  var formatRelativeLocale = {
    lastWeek: "'last' eeee 'at' p",
    yesterday: "'yesterday at' p",
    today: "'today at' p",
    tomorrow: "'tomorrow at' p",
    nextWeek: "eeee 'at' p",
    other: "P"
  };
  var formatRelative = function(token, _date, _baseDate, _options) {
    return formatRelativeLocale[token];
  };
  var formatRelative_default = formatRelative;

  // node_modules/.pnpm/date-fns@2.28.0/node_modules/date-fns/esm/locale/en-US/_lib/localize/index.js
  init_env();

  // node_modules/.pnpm/date-fns@2.28.0/node_modules/date-fns/esm/locale/_lib/buildLocalizeFn/index.js
  init_env();
  function buildLocalizeFn(args) {
    return function(dirtyIndex, dirtyOptions) {
      var options = dirtyOptions || {};
      var context = options.context ? String(options.context) : "standalone";
      var valuesArray;
      if (context === "formatting" && args.formattingValues) {
        var defaultWidth = args.defaultFormattingWidth || args.defaultWidth;
        var width = options.width ? String(options.width) : defaultWidth;
        valuesArray = args.formattingValues[width] || args.formattingValues[defaultWidth];
      } else {
        var _defaultWidth = args.defaultWidth;
        var _width = options.width ? String(options.width) : args.defaultWidth;
        valuesArray = args.values[_width] || args.values[_defaultWidth];
      }
      var index = args.argumentCallback ? args.argumentCallback(dirtyIndex) : dirtyIndex;
      return valuesArray[index];
    };
  }

  // node_modules/.pnpm/date-fns@2.28.0/node_modules/date-fns/esm/locale/en-US/_lib/localize/index.js
  var eraValues = {
    narrow: ["B", "A"],
    abbreviated: ["BC", "AD"],
    wide: ["Before Christ", "Anno Domini"]
  };
  var quarterValues = {
    narrow: ["1", "2", "3", "4"],
    abbreviated: ["Q1", "Q2", "Q3", "Q4"],
    wide: ["1st quarter", "2nd quarter", "3rd quarter", "4th quarter"]
  };
  var monthValues = {
    narrow: ["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"],
    abbreviated: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
    wide: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]
  };
  var dayValues = {
    narrow: ["S", "M", "T", "W", "T", "F", "S"],
    short: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"],
    abbreviated: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
    wide: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]
  };
  var dayPeriodValues = {
    narrow: {
      am: "a",
      pm: "p",
      midnight: "mi",
      noon: "n",
      morning: "morning",
      afternoon: "afternoon",
      evening: "evening",
      night: "night"
    },
    abbreviated: {
      am: "AM",
      pm: "PM",
      midnight: "midnight",
      noon: "noon",
      morning: "morning",
      afternoon: "afternoon",
      evening: "evening",
      night: "night"
    },
    wide: {
      am: "a.m.",
      pm: "p.m.",
      midnight: "midnight",
      noon: "noon",
      morning: "morning",
      afternoon: "afternoon",
      evening: "evening",
      night: "night"
    }
  };
  var formattingDayPeriodValues = {
    narrow: {
      am: "a",
      pm: "p",
      midnight: "mi",
      noon: "n",
      morning: "in the morning",
      afternoon: "in the afternoon",
      evening: "in the evening",
      night: "at night"
    },
    abbreviated: {
      am: "AM",
      pm: "PM",
      midnight: "midnight",
      noon: "noon",
      morning: "in the morning",
      afternoon: "in the afternoon",
      evening: "in the evening",
      night: "at night"
    },
    wide: {
      am: "a.m.",
      pm: "p.m.",
      midnight: "midnight",
      noon: "noon",
      morning: "in the morning",
      afternoon: "in the afternoon",
      evening: "in the evening",
      night: "at night"
    }
  };
  var ordinalNumber = function(dirtyNumber, _options) {
    var number = Number(dirtyNumber);
    var rem100 = number % 100;
    if (rem100 > 20 || rem100 < 10) {
      switch (rem100 % 10) {
        case 1:
          return number + "st";
        case 2:
          return number + "nd";
        case 3:
          return number + "rd";
      }
    }
    return number + "th";
  };
  var localize = {
    ordinalNumber,
    era: buildLocalizeFn({
      values: eraValues,
      defaultWidth: "wide"
    }),
    quarter: buildLocalizeFn({
      values: quarterValues,
      defaultWidth: "wide",
      argumentCallback: function(quarter) {
        return quarter - 1;
      }
    }),
    month: buildLocalizeFn({
      values: monthValues,
      defaultWidth: "wide"
    }),
    day: buildLocalizeFn({
      values: dayValues,
      defaultWidth: "wide"
    }),
    dayPeriod: buildLocalizeFn({
      values: dayPeriodValues,
      defaultWidth: "wide",
      formattingValues: formattingDayPeriodValues,
      defaultFormattingWidth: "wide"
    })
  };
  var localize_default = localize;

  // node_modules/.pnpm/date-fns@2.28.0/node_modules/date-fns/esm/locale/en-US/_lib/match/index.js
  init_env();

  // node_modules/.pnpm/date-fns@2.28.0/node_modules/date-fns/esm/locale/_lib/buildMatchFn/index.js
  init_env();
  function buildMatchFn(args) {
    return function(string) {
      var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      var width = options.width;
      var matchPattern = width && args.matchPatterns[width] || args.matchPatterns[args.defaultMatchWidth];
      var matchResult = string.match(matchPattern);
      if (!matchResult) {
        return null;
      }
      var matchedString = matchResult[0];
      var parsePatterns = width && args.parsePatterns[width] || args.parsePatterns[args.defaultParseWidth];
      var key2 = Array.isArray(parsePatterns) ? findIndex(parsePatterns, function(pattern) {
        return pattern.test(matchedString);
      }) : findKey(parsePatterns, function(pattern) {
        return pattern.test(matchedString);
      });
      var value;
      value = args.valueCallback ? args.valueCallback(key2) : key2;
      value = options.valueCallback ? options.valueCallback(value) : value;
      var rest = string.slice(matchedString.length);
      return {
        value,
        rest
      };
    };
  }
  function findKey(object, predicate) {
    for (var key2 in object) {
      if (object.hasOwnProperty(key2) && predicate(object[key2])) {
        return key2;
      }
    }
    return void 0;
  }
  function findIndex(array, predicate) {
    for (var key2 = 0; key2 < array.length; key2++) {
      if (predicate(array[key2])) {
        return key2;
      }
    }
    return void 0;
  }

  // node_modules/.pnpm/date-fns@2.28.0/node_modules/date-fns/esm/locale/_lib/buildMatchPatternFn/index.js
  init_env();
  function buildMatchPatternFn(args) {
    return function(string) {
      var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      var matchResult = string.match(args.matchPattern);
      if (!matchResult)
        return null;
      var matchedString = matchResult[0];
      var parseResult = string.match(args.parsePattern);
      if (!parseResult)
        return null;
      var value = args.valueCallback ? args.valueCallback(parseResult[0]) : parseResult[0];
      value = options.valueCallback ? options.valueCallback(value) : value;
      var rest = string.slice(matchedString.length);
      return {
        value,
        rest
      };
    };
  }

  // node_modules/.pnpm/date-fns@2.28.0/node_modules/date-fns/esm/locale/en-US/_lib/match/index.js
  var matchOrdinalNumberPattern = /^(\d+)(th|st|nd|rd)?/i;
  var parseOrdinalNumberPattern = /\d+/i;
  var matchEraPatterns = {
    narrow: /^(b|a)/i,
    abbreviated: /^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,
    wide: /^(before christ|before common era|anno domini|common era)/i
  };
  var parseEraPatterns = {
    any: [/^b/i, /^(a|c)/i]
  };
  var matchQuarterPatterns = {
    narrow: /^[1234]/i,
    abbreviated: /^q[1234]/i,
    wide: /^[1234](th|st|nd|rd)? quarter/i
  };
  var parseQuarterPatterns = {
    any: [/1/i, /2/i, /3/i, /4/i]
  };
  var matchMonthPatterns = {
    narrow: /^[jfmasond]/i,
    abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,
    wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i
  };
  var parseMonthPatterns = {
    narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
    any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^may/i, /^jun/i, /^jul/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i]
  };
  var matchDayPatterns = {
    narrow: /^[smtwf]/i,
    short: /^(su|mo|tu|we|th|fr|sa)/i,
    abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,
    wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i
  };
  var parseDayPatterns = {
    narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],
    any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i]
  };
  var matchDayPeriodPatterns = {
    narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,
    any: /^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i
  };
  var parseDayPeriodPatterns = {
    any: {
      am: /^a/i,
      pm: /^p/i,
      midnight: /^mi/i,
      noon: /^no/i,
      morning: /morning/i,
      afternoon: /afternoon/i,
      evening: /evening/i,
      night: /night/i
    }
  };
  var match = {
    ordinalNumber: buildMatchPatternFn({
      matchPattern: matchOrdinalNumberPattern,
      parsePattern: parseOrdinalNumberPattern,
      valueCallback: function(value) {
        return parseInt(value, 10);
      }
    }),
    era: buildMatchFn({
      matchPatterns: matchEraPatterns,
      defaultMatchWidth: "wide",
      parsePatterns: parseEraPatterns,
      defaultParseWidth: "any"
    }),
    quarter: buildMatchFn({
      matchPatterns: matchQuarterPatterns,
      defaultMatchWidth: "wide",
      parsePatterns: parseQuarterPatterns,
      defaultParseWidth: "any",
      valueCallback: function(index) {
        return index + 1;
      }
    }),
    month: buildMatchFn({
      matchPatterns: matchMonthPatterns,
      defaultMatchWidth: "wide",
      parsePatterns: parseMonthPatterns,
      defaultParseWidth: "any"
    }),
    day: buildMatchFn({
      matchPatterns: matchDayPatterns,
      defaultMatchWidth: "wide",
      parsePatterns: parseDayPatterns,
      defaultParseWidth: "any"
    }),
    dayPeriod: buildMatchFn({
      matchPatterns: matchDayPeriodPatterns,
      defaultMatchWidth: "any",
      parsePatterns: parseDayPeriodPatterns,
      defaultParseWidth: "any"
    })
  };
  var match_default = match;

  // node_modules/.pnpm/date-fns@2.28.0/node_modules/date-fns/esm/locale/en-US/index.js
  var locale = {
    code: "en-US",
    formatDistance: formatDistance_default,
    formatLong: formatLong_default,
    formatRelative: formatRelative_default,
    localize: localize_default,
    match: match_default,
    options: {
      weekStartsOn: 0,
      firstWeekContainsDate: 1
    }
  };
  var en_US_default = locale;

  // node_modules/.pnpm/date-fns@2.28.0/node_modules/date-fns/esm/_lib/cloneObject/index.js
  init_env();

  // node_modules/.pnpm/date-fns@2.28.0/node_modules/date-fns/esm/_lib/assign/index.js
  init_env();
  function assign(target2, dirtyObject) {
    if (target2 == null) {
      throw new TypeError("assign requires that input parameter not be null or undefined");
    }
    dirtyObject = dirtyObject || {};
    for (var property in dirtyObject) {
      if (Object.prototype.hasOwnProperty.call(dirtyObject, property)) {
        target2[property] = dirtyObject[property];
      }
    }
    return target2;
  }

  // node_modules/.pnpm/date-fns@2.28.0/node_modules/date-fns/esm/_lib/cloneObject/index.js
  function cloneObject(dirtyObject) {
    return assign({}, dirtyObject);
  }

  // node_modules/.pnpm/date-fns@2.28.0/node_modules/date-fns/esm/formatDistanceStrict/index.js
  init_env();
  var MILLISECONDS_IN_MINUTE = 1e3 * 60;
  var MINUTES_IN_DAY = 60 * 24;
  var MINUTES_IN_MONTH = MINUTES_IN_DAY * 30;
  var MINUTES_IN_YEAR = MINUTES_IN_DAY * 365;
  function formatDistanceStrict(dirtyDate, dirtyBaseDate) {
    var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
    requiredArgs(2, arguments);
    var locale2 = options.locale || en_US_default;
    if (!locale2.formatDistance) {
      throw new RangeError("locale must contain localize.formatDistance property");
    }
    var comparison = compareAsc(dirtyDate, dirtyBaseDate);
    if (isNaN(comparison)) {
      throw new RangeError("Invalid time value");
    }
    var localizeOptions = cloneObject(options);
    localizeOptions.addSuffix = Boolean(options.addSuffix);
    localizeOptions.comparison = comparison;
    var dateLeft;
    var dateRight;
    if (comparison > 0) {
      dateLeft = toDate(dirtyBaseDate);
      dateRight = toDate(dirtyDate);
    } else {
      dateLeft = toDate(dirtyDate);
      dateRight = toDate(dirtyBaseDate);
    }
    var roundingMethod = options.roundingMethod == null ? "round" : String(options.roundingMethod);
    var roundingMethodFn;
    if (roundingMethod === "floor") {
      roundingMethodFn = Math.floor;
    } else if (roundingMethod === "ceil") {
      roundingMethodFn = Math.ceil;
    } else if (roundingMethod === "round") {
      roundingMethodFn = Math.round;
    } else {
      throw new RangeError("roundingMethod must be 'floor', 'ceil' or 'round'");
    }
    var milliseconds = dateRight.getTime() - dateLeft.getTime();
    var minutes = milliseconds / MILLISECONDS_IN_MINUTE;
    var timezoneOffset = getTimezoneOffsetInMilliseconds(dateRight) - getTimezoneOffsetInMilliseconds(dateLeft);
    var dstNormalizedMinutes = (milliseconds - timezoneOffset) / MILLISECONDS_IN_MINUTE;
    var unit;
    if (options.unit == null) {
      if (minutes < 1) {
        unit = "second";
      } else if (minutes < 60) {
        unit = "minute";
      } else if (minutes < MINUTES_IN_DAY) {
        unit = "hour";
      } else if (dstNormalizedMinutes < MINUTES_IN_MONTH) {
        unit = "day";
      } else if (dstNormalizedMinutes < MINUTES_IN_YEAR) {
        unit = "month";
      } else {
        unit = "year";
      }
    } else {
      unit = String(options.unit);
    }
    if (unit === "second") {
      var seconds = roundingMethodFn(milliseconds / 1e3);
      return locale2.formatDistance("xSeconds", seconds, localizeOptions);
    } else if (unit === "minute") {
      var roundedMinutes = roundingMethodFn(minutes);
      return locale2.formatDistance("xMinutes", roundedMinutes, localizeOptions);
    } else if (unit === "hour") {
      var hours = roundingMethodFn(minutes / 60);
      return locale2.formatDistance("xHours", hours, localizeOptions);
    } else if (unit === "day") {
      var days = roundingMethodFn(dstNormalizedMinutes / MINUTES_IN_DAY);
      return locale2.formatDistance("xDays", days, localizeOptions);
    } else if (unit === "month") {
      var months = roundingMethodFn(dstNormalizedMinutes / MINUTES_IN_MONTH);
      return months === 12 && options.unit !== "month" ? locale2.formatDistance("xYears", 1, localizeOptions) : locale2.formatDistance("xMonths", months, localizeOptions);
    } else if (unit === "year") {
      var years = roundingMethodFn(dstNormalizedMinutes / MINUTES_IN_YEAR);
      return locale2.formatDistance("xYears", years, localizeOptions);
    }
    throw new RangeError("unit must be 'second', 'minute', 'hour', 'day', 'month' or 'year'");
  }

  // node_modules/.pnpm/date-fns@2.28.0/node_modules/date-fns/esm/formatDistanceToNowStrict/index.js
  init_env();
  function formatDistanceToNowStrict(dirtyDate, dirtyOptions) {
    requiredArgs(1, arguments);
    return formatDistanceStrict(dirtyDate, Date.now(), dirtyOptions);
  }

  // node_modules/.pnpm/parse-domain@7.0.0/node_modules/parse-domain/build/main.js
  init_env();

  // node_modules/.pnpm/parse-domain@7.0.0/node_modules/parse-domain/build/parse-domain.js
  init_env();

  // node_modules/.pnpm/parse-domain@7.0.0/node_modules/parse-domain/build/serialized-tries.js
  init_env();

  // node_modules/.pnpm/parse-domain@7.0.0/node_modules/parse-domain/serialized-tries/icann.js
  init_env();
  var icann_default = "ac>com,edu,gov,net,mil,org<ad>nom<ae>co,net,org,sch,ac,gov,mil<aero>accident-investigation,accident-prevention,aerobatic,aeroclub,aerodrome,agents,aircraft,airline,airport,air-surveillance,airtraffic,air-traffic-control,ambulance,amusement,association,author,ballooning,broker,caa,cargo,catering,certification,championship,charter,civilaviation,club,conference,consultant,consulting,control,council,crew,design,dgca,educator,emergency,engine,engineer,entertainment,equipment,exchange,express,federation,flight,fuel,gliding,government,groundhandling,group,hanggliding,homebuilt,insurance,journal,journalist,leasing,logistics,magazine,maintenance,media,microlight,modelling,navigation,parachuting,paragliding,passenger-association,pilot,press,production,recreation,repbody,res,research,rotorcraft,safety,scientist,services,show,skydiving,software,student,trader,trading,trainer,union,workinggroup,works<af>gov,com,org,net,edu<ag>com,org,net,co,nom<ai>off,com,net,org<al>com,edu,gov,mil,net,org<am>co,com,commune,net,org<ao>ed,gv,og,co,pb,it<aq,ar>bet,com,coop,edu,gob,gov,int,mil,musica,mutual,net,org,senasa,tur<arpa>e164,in-addr,ip6,iris,uri,urn<as>gov<asia,at>ac>sth<co,gv,or<au>com,net,org,edu>act,catholic,nsw>schools<nt,qld,sa,tas,vic,wa<gov>qld,sa,tas,vic,wa<asn,id,info,conf,oz,act,nsw,nt,qld,sa,tas,vic,wa<aw>com<ax,az>com,net,int,gov,org,edu,info,pp,mil,name,pro,biz<ba>com,edu,gov,mil,net,org<bb>biz,co,com,edu,gov,info,net,org,store,tv<bd>*<be>ac<bf>gov<bg>a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,0,1,2,3,4,5,6,7,8,9<bh>com,edu,net,org,gov<bi>co,com,edu,or,org<biz,bj>asso,barreau,gouv<bm>com,edu,gov,net,org<bn>com,edu,gov,net,org<bo>com,edu,gob,int,org,net,mil,tv,web,academia,agro,arte,blog,bolivia,ciencia,cooperativa,democracia,deporte,ecologia,economia,empresa,indigena,industria,info,medicina,movimiento,musica,natural,nombre,noticias,patria,politica,profesional,plurinacional,pueblo,revista,salud,tecnologia,tksat,transporte,wiki<br>9guacu,abc,adm,adv,agr,aju,am,anani,aparecida,app,arq,art,ato,b,barueri,belem,bhz,bib,bio,blog,bmd,boavista,bsb,campinagrande,campinas,caxias,cim,cng,cnt,com,contagem,coop,coz,cri,cuiaba,curitiba,def,des,det,dev,ecn,eco,edu,emp,enf,eng,esp,etc,eti,far,feira,flog,floripa,fm,fnd,fortal,fot,foz,fst,g12,geo,ggf,goiania,gov>ac,al,am,ap,ba,ce,df,es,go,ma,mg,ms,mt,pa,pb,pe,pi,pr,rj,rn,ro,rr,rs,sc,se,sp,to<gru,imb,ind,inf,jab,jampa,jdf,joinville,jor,jus,leg,lel,log,londrina,macapa,maceio,manaus,maringa,mat,med,mil,morena,mp,mus,natal,net,niteroi,nom>*<not,ntr,odo,ong,org,osasco,palmas,poa,ppg,pro,psc,psi,pvh,qsl,radio,rec,recife,rep,ribeirao,rio,riobranco,riopreto,salvador,sampa,santamaria,santoandre,saobernardo,saogonca,seg,sjc,slg,slz,sorocaba,srv,taxi,tc,tec,teo,the,tmp,trd,tur,tv,udi,vet,vix,vlog,wiki,zlg<bs>com,net,org,edu,gov<bt>com,edu,gov,net,org<bv,bw>co,org<by>gov,mil,com,of<bz>com,net,org,edu,gov<ca>ab,bc,mb,nb,nf,nl,ns,nt,nu,on,pe,qc,sk,yk,gc<cat,cc,cd>gov<cf,cg,ch,ci>org,or,com,co,edu,ed,ac,net,go,asso,xn--aroport-bya,int,presse,md,gouv<ck>*,!www<cl>co,gob,gov,mil<cm>co,com,gov,net<cn>ac,com,edu,gov,net,org,mil,xn--55qx5d,xn--io0a7i,xn--od0alg,ah,bj,cq,fj,gd,gs,gz,gx,ha,hb,he,hi,hl,hn,jl,js,jx,ln,nm,nx,qh,sc,sd,sh,sn,sx,tj,xj,xz,yn,zj,hk,mo,tw<co>arts,com,edu,firm,gov,info,int,mil,net,nom,org,rec,web<com,coop,cr>ac,co,ed,fi,go,or,sa<cu>com,edu,org,net,gov,inf<cv>com,edu,int,nome,org<cw>com,edu,net,org<cx>gov<cy>ac,biz,com,ekloges,gov,ltd,name,net,org,parliament,press,pro,tm<cz,de,dj,dk,dm>com,net,org,edu,gov<do>art,com,edu,gob,gov,mil,net,org,sld,web<dz>art,asso,com,edu,gov,org,net,pol,soc,tm<ec>com,info,net,fin,k12,med,pro,org,edu,gov,gob,mil<edu,ee>edu,gov,riik,lib,med,com,pri,aip,org,fie<eg>com,edu,eun,gov,mil,name,net,org,sci<er>*<es>com,nom,org,gob,edu<et>com,gov,org,edu,biz,name,info,net<eu,fi>aland<fj>ac,biz,com,gov,info,mil,name,net,org,pro<fk>*<fm>com,edu,net,org<fo,fr>asso,com,gouv,nom,prd,tm,aeroport,avocat,avoues,cci,chambagri,chirurgiens-dentistes,experts-comptables,geometre-expert,greta,huissier-justice,medecin,notaires,pharmacien,port,veterinaire<ga,gb,gd>edu,gov<ge>com,edu,gov,org,mil,net,pvt<gf,gg>co,net,org<gh>com,edu,gov,org,mil<gi>com,ltd,gov,mod,edu,org<gl>co,com,edu,net,org<gm,gn>ac,com,edu,gov,org,net<gov,gp>com,net,mobi,edu,org,asso<gq,gr>com,edu,net,org,gov<gs,gt>com,edu,gob,ind,mil,net,org<gu>com,edu,gov,guam,info,net,org,web<gw,gy>co,com,edu,gov,net,org<hk>com,edu,gov,idv,net,org,xn--55qx5d,xn--wcvs22d,xn--lcvr32d,xn--mxtq1m,xn--gmqw5a,xn--ciqpn,xn--gmq050i,xn--zf0avx,xn--io0a7i,xn--mk0axi,xn--od0alg,xn--od0aq3b,xn--tn0ag,xn--uc0atv,xn--uc0ay4a<hm,hn>com,edu,org,net,mil,gob<hr>iz,from,name,com<ht>com,shop,firm,info,adult,net,pro,org,med,art,coop,pol,asso,edu,rel,gouv,perso<hu>co,info,org,priv,sport,tm,2000,agrar,bolt,casino,city,erotica,erotika,film,forum,games,hotel,ingatlan,jogasz,konyvelo,lakas,media,news,reklam,sex,shop,suli,szex,tozsde,utazas,video<id>ac,biz,co,desa,go,mil,my,net,or,ponpes,sch,web<ie>gov<il>ac,co,gov,idf,k12,muni,net,org<im>ac,co>ltd,plc<com,net,org,tt,tv<in>co,firm,net,org,gen,ind,nic,ac,edu,res,gov,mil<info,int>eu<io>com<iq>gov,edu,mil,com,org,net<ir>ac,co,gov,id,net,org,sch,xn--mgba3a4f16a,xn--mgba3a4fra<is>net,com,edu,gov,org,int<it>gov,edu,abr,abruzzo,aosta-valley,aostavalley,bas,basilicata,cal,calabria,cam,campania,emilia-romagna,emiliaromagna,emr,friuli-v-giulia,friuli-ve-giulia,friuli-vegiulia,friuli-venezia-giulia,friuli-veneziagiulia,friuli-vgiulia,friuliv-giulia,friulive-giulia,friulivegiulia,friulivenezia-giulia,friuliveneziagiulia,friulivgiulia,fvg,laz,lazio,lig,liguria,lom,lombardia,lombardy,lucania,mar,marche,mol,molise,piedmont,piemonte,pmn,pug,puglia,sar,sardegna,sardinia,sic,sicilia,sicily,taa,tos,toscana,trentin-sud-tirol,xn--trentin-sd-tirol-rzb,trentin-sudtirol,xn--trentin-sdtirol-7vb,trentin-sued-tirol,trentin-suedtirol,trentino-a-adige,trentino-aadige,trentino-alto-adige,trentino-altoadige,trentino-s-tirol,trentino-stirol,trentino-sud-tirol,xn--trentino-sd-tirol-c3b,trentino-sudtirol,xn--trentino-sdtirol-szb,trentino-sued-tirol,trentino-suedtirol,trentino,trentinoa-adige,trentinoaadige,trentinoalto-adige,trentinoaltoadige,trentinos-tirol,trentinostirol,trentinosud-tirol,xn--trentinosd-tirol-rzb,trentinosudtirol,xn--trentinosdtirol-7vb,trentinosued-tirol,trentinosuedtirol,trentinsud-tirol,xn--trentinsd-tirol-6vb,trentinsudtirol,xn--trentinsdtirol-nsb,trentinsued-tirol,trentinsuedtirol,tuscany,umb,umbria,val-d-aosta,val-daosta,vald-aosta,valdaosta,valle-aosta,valle-d-aosta,valle-daosta,valleaosta,valled-aosta,valledaosta,vallee-aoste,xn--valle-aoste-ebb,vallee-d-aoste,xn--valle-d-aoste-ehb,valleeaoste,xn--valleaoste-e7a,valleedaoste,xn--valledaoste-ebb,vao,vda,ven,veneto,ag,agrigento,al,alessandria,alto-adige,altoadige,an,ancona,andria-barletta-trani,andria-trani-barletta,andriabarlettatrani,andriatranibarletta,ao,aosta,aoste,ap,aq,aquila,ar,arezzo,ascoli-piceno,ascolipiceno,asti,at,av,avellino,ba,balsan-sudtirol,xn--balsan-sdtirol-nsb,balsan-suedtirol,balsan,bari,barletta-trani-andria,barlettatraniandria,belluno,benevento,bergamo,bg,bi,biella,bl,bn,bo,bologna,bolzano-altoadige,bolzano,bozen-sudtirol,xn--bozen-sdtirol-2ob,bozen-suedtirol,bozen,br,brescia,brindisi,bs,bt,bulsan-sudtirol,xn--bulsan-sdtirol-nsb,bulsan-suedtirol,bulsan,bz,ca,cagliari,caltanissetta,campidano-medio,campidanomedio,campobasso,carbonia-iglesias,carboniaiglesias,carrara-massa,carraramassa,caserta,catania,catanzaro,cb,ce,cesena-forli,xn--cesena-forl-mcb,cesenaforli,xn--cesenaforl-i8a,ch,chieti,ci,cl,cn,co,como,cosenza,cr,cremona,crotone,cs,ct,cuneo,cz,dell-ogliastra,dellogliastra,en,enna,fc,fe,fermo,ferrara,fg,fi,firenze,florence,fm,foggia,forli-cesena,xn--forl-cesena-fcb,forlicesena,xn--forlcesena-c8a,fr,frosinone,ge,genoa,genova,go,gorizia,gr,grosseto,iglesias-carbonia,iglesiascarbonia,im,imperia,is,isernia,kr,la-spezia,laquila,laspezia,latina,lc,le,lecce,lecco,li,livorno,lo,lodi,lt,lu,lucca,macerata,mantova,massa-carrara,massacarrara,matera,mb,mc,me,medio-campidano,mediocampidano,messina,mi,milan,milano,mn,mo,modena,monza-brianza,monza-e-della-brianza,monza,monzabrianza,monzaebrianza,monzaedellabrianza,ms,mt,na,naples,napoli,no,novara,nu,nuoro,og,ogliastra,olbia-tempio,olbiatempio,or,oristano,ot,pa,padova,padua,palermo,parma,pavia,pc,pd,pe,perugia,pesaro-urbino,pesarourbino,pescara,pg,pi,piacenza,pisa,pistoia,pn,po,pordenone,potenza,pr,prato,pt,pu,pv,pz,ra,ragusa,ravenna,rc,re,reggio-calabria,reggio-emilia,reggiocalabria,reggioemilia,rg,ri,rieti,rimini,rm,rn,ro,roma,rome,rovigo,sa,salerno,sassari,savona,si,siena,siracusa,so,sondrio,sp,sr,ss,suedtirol,xn--sdtirol-n2a,sv,ta,taranto,te,tempio-olbia,tempioolbia,teramo,terni,tn,to,torino,tp,tr,trani-andria-barletta,trani-barletta-andria,traniandriabarletta,tranibarlettaandria,trapani,trento,treviso,trieste,ts,turin,tv,ud,udine,urbino-pesaro,urbinopesaro,va,varese,vb,vc,ve,venezia,venice,verbania,vercelli,verona,vi,vibo-valentia,vibovalentia,vicenza,viterbo,vr,vs,vt,vv<je>co,net,org<jm>*<jo>com,org,net,edu,sch,gov,mil,name<jobs,jp>ac,ad,co,ed,go,gr,lg,ne,or,aichi>aisai,ama,anjo,asuke,chiryu,chita,fuso,gamagori,handa,hazu,hekinan,higashiura,ichinomiya,inazawa,inuyama,isshiki,iwakura,kanie,kariya,kasugai,kira,kiyosu,komaki,konan,kota,mihama,miyoshi,nishio,nisshin,obu,oguchi,oharu,okazaki,owariasahi,seto,shikatsu,shinshiro,shitara,tahara,takahama,tobishima,toei,togo,tokai,tokoname,toyoake,toyohashi,toyokawa,toyone,toyota,tsushima,yatomi<akita>akita,daisen,fujisato,gojome,hachirogata,happou,higashinaruse,honjo,honjyo,ikawa,kamikoani,kamioka,katagami,kazuno,kitaakita,kosaka,kyowa,misato,mitane,moriyoshi,nikaho,noshiro,odate,oga,ogata,semboku,yokote,yurihonjo<aomori>aomori,gonohe,hachinohe,hashikami,hiranai,hirosaki,itayanagi,kuroishi,misawa,mutsu,nakadomari,noheji,oirase,owani,rokunohe,sannohe,shichinohe,shingo,takko,towada,tsugaru,tsuruta<chiba>abiko,asahi,chonan,chosei,choshi,chuo,funabashi,futtsu,hanamigawa,ichihara,ichikawa,ichinomiya,inzai,isumi,kamagaya,kamogawa,kashiwa,katori,katsuura,kimitsu,kisarazu,kozaki,kujukuri,kyonan,matsudo,midori,mihama,minamiboso,mobara,mutsuzawa,nagara,nagareyama,narashino,narita,noda,oamishirasato,omigawa,onjuku,otaki,sakae,sakura,shimofusa,shirako,shiroi,shisui,sodegaura,sosa,tako,tateyama,togane,tohnosho,tomisato,urayasu,yachimata,yachiyo,yokaichiba,yokoshibahikari,yotsukaido<ehime>ainan,honai,ikata,imabari,iyo,kamijima,kihoku,kumakogen,masaki,matsuno,matsuyama,namikata,niihama,ozu,saijo,seiyo,shikokuchuo,tobe,toon,uchiko,uwajima,yawatahama<fukui>echizen,eiheiji,fukui,ikeda,katsuyama,mihama,minamiechizen,obama,ohi,ono,sabae,sakai,takahama,tsuruga,wakasa<fukuoka>ashiya,buzen,chikugo,chikuho,chikujo,chikushino,chikuzen,chuo,dazaifu,fukuchi,hakata,higashi,hirokawa,hisayama,iizuka,inatsuki,kaho,kasuga,kasuya,kawara,keisen,koga,kurate,kurogi,kurume,minami,miyako,miyama,miyawaka,mizumaki,munakata,nakagawa,nakama,nishi,nogata,ogori,okagaki,okawa,oki,omuta,onga,onojo,oto,saigawa,sasaguri,shingu,shinyoshitomi,shonai,soeda,sue,tachiarai,tagawa,takata,toho,toyotsu,tsuiki,ukiha,umi,usui,yamada,yame,yanagawa,yukuhashi<fukushima>aizubange,aizumisato,aizuwakamatsu,asakawa,bandai,date,fukushima,furudono,futaba,hanawa,higashi,hirata,hirono,iitate,inawashiro,ishikawa,iwaki,izumizaki,kagamiishi,kaneyama,kawamata,kitakata,kitashiobara,koori,koriyama,kunimi,miharu,mishima,namie,nango,nishiaizu,nishigo,okuma,omotego,ono,otama,samegawa,shimogo,shirakawa,showa,soma,sukagawa,taishin,tamakawa,tanagura,tenei,yabuki,yamato,yamatsuri,yanaizu,yugawa<gifu>anpachi,ena,gifu,ginan,godo,gujo,hashima,hichiso,hida,higashishirakawa,ibigawa,ikeda,kakamigahara,kani,kasahara,kasamatsu,kawaue,kitagata,mino,minokamo,mitake,mizunami,motosu,nakatsugawa,ogaki,sakahogi,seki,sekigahara,shirakawa,tajimi,takayama,tarui,toki,tomika,wanouchi,yamagata,yaotsu,yoro<gunma>annaka,chiyoda,fujioka,higashiagatsuma,isesaki,itakura,kanna,kanra,katashina,kawaba,kiryu,kusatsu,maebashi,meiwa,midori,minakami,naganohara,nakanojo,nanmoku,numata,oizumi,ora,ota,shibukawa,shimonita,shinto,showa,takasaki,takayama,tamamura,tatebayashi,tomioka,tsukiyono,tsumagoi,ueno,yoshioka<hiroshima>asaminami,daiwa,etajima,fuchu,fukuyama,hatsukaichi,higashihiroshima,hongo,jinsekikogen,kaita,kui,kumano,kure,mihara,miyoshi,naka,onomichi,osakikamijima,otake,saka,sera,seranishi,shinichi,shobara,takehara<hokkaido>abashiri,abira,aibetsu,akabira,akkeshi,asahikawa,ashibetsu,ashoro,assabu,atsuma,bibai,biei,bifuka,bihoro,biratori,chippubetsu,chitose,date,ebetsu,embetsu,eniwa,erimo,esan,esashi,fukagawa,fukushima,furano,furubira,haboro,hakodate,hamatonbetsu,hidaka,higashikagura,higashikawa,hiroo,hokuryu,hokuto,honbetsu,horokanai,horonobe,ikeda,imakane,ishikari,iwamizawa,iwanai,kamifurano,kamikawa,kamishihoro,kamisunagawa,kamoenai,kayabe,kembuchi,kikonai,kimobetsu,kitahiroshima,kitami,kiyosato,koshimizu,kunneppu,kuriyama,kuromatsunai,kushiro,kutchan,kyowa,mashike,matsumae,mikasa,minamifurano,mombetsu,moseushi,mukawa,muroran,naie,nakagawa,nakasatsunai,nakatombetsu,nanae,nanporo,nayoro,nemuro,niikappu,niki,nishiokoppe,noboribetsu,numata,obihiro,obira,oketo,okoppe,otaru,otobe,otofuke,otoineppu,oumu,ozora,pippu,rankoshi,rebun,rikubetsu,rishiri,rishirifuji,saroma,sarufutsu,shakotan,shari,shibecha,shibetsu,shikabe,shikaoi,shimamaki,shimizu,shimokawa,shinshinotsu,shintoku,shiranuka,shiraoi,shiriuchi,sobetsu,sunagawa,taiki,takasu,takikawa,takinoue,teshikaga,tobetsu,tohma,tomakomai,tomari,toya,toyako,toyotomi,toyoura,tsubetsu,tsukigata,urakawa,urausu,uryu,utashinai,wakkanai,wassamu,yakumo,yoichi<hyogo>aioi,akashi,ako,amagasaki,aogaki,asago,ashiya,awaji,fukusaki,goshiki,harima,himeji,ichikawa,inagawa,itami,kakogawa,kamigori,kamikawa,kasai,kasuga,kawanishi,miki,minamiawaji,nishinomiya,nishiwaki,ono,sanda,sannan,sasayama,sayo,shingu,shinonsen,shiso,sumoto,taishi,taka,takarazuka,takasago,takino,tamba,tatsuno,toyooka,yabu,yashiro,yoka,yokawa<ibaraki>ami,asahi,bando,chikusei,daigo,fujishiro,hitachi,hitachinaka,hitachiomiya,hitachiota,ibaraki,ina,inashiki,itako,iwama,joso,kamisu,kasama,kashima,kasumigaura,koga,miho,mito,moriya,naka,namegata,oarai,ogawa,omitama,ryugasaki,sakai,sakuragawa,shimodate,shimotsuma,shirosato,sowa,suifu,takahagi,tamatsukuri,tokai,tomobe,tone,toride,tsuchiura,tsukuba,uchihara,ushiku,yachiyo,yamagata,yawara,yuki<ishikawa>anamizu,hakui,hakusan,kaga,kahoku,kanazawa,kawakita,komatsu,nakanoto,nanao,nomi,nonoichi,noto,shika,suzu,tsubata,tsurugi,uchinada,wajima<iwate>fudai,fujisawa,hanamaki,hiraizumi,hirono,ichinohe,ichinoseki,iwaizumi,iwate,joboji,kamaishi,kanegasaki,karumai,kawai,kitakami,kuji,kunohe,kuzumaki,miyako,mizusawa,morioka,ninohe,noda,ofunato,oshu,otsuchi,rikuzentakata,shiwa,shizukuishi,sumita,tanohata,tono,yahaba,yamada<kagawa>ayagawa,higashikagawa,kanonji,kotohira,manno,marugame,mitoyo,naoshima,sanuki,tadotsu,takamatsu,tonosho,uchinomi,utazu,zentsuji<kagoshima>akune,amami,hioki,isa,isen,izumi,kagoshima,kanoya,kawanabe,kinko,kouyama,makurazaki,matsumoto,minamitane,nakatane,nishinoomote,satsumasendai,soo,tarumizu,yusui<kanagawa>aikawa,atsugi,ayase,chigasaki,ebina,fujisawa,hadano,hakone,hiratsuka,isehara,kaisei,kamakura,kiyokawa,matsuda,minamiashigara,miura,nakai,ninomiya,odawara,oi,oiso,sagamihara,samukawa,tsukui,yamakita,yamato,yokosuka,yugawara,zama,zushi<kochi>aki,geisei,hidaka,higashitsuno,ino,kagami,kami,kitagawa,kochi,mihara,motoyama,muroto,nahari,nakamura,nankoku,nishitosa,niyodogawa,ochi,okawa,otoyo,otsuki,sakawa,sukumo,susaki,tosa,tosashimizu,toyo,tsuno,umaji,yasuda,yusuhara<kumamoto>amakusa,arao,aso,choyo,gyokuto,kamiamakusa,kikuchi,kumamoto,mashiki,mifune,minamata,minamioguni,nagasu,nishihara,oguni,ozu,sumoto,takamori,uki,uto,yamaga,yamato,yatsushiro<kyoto>ayabe,fukuchiyama,higashiyama,ide,ine,joyo,kameoka,kamo,kita,kizu,kumiyama,kyotamba,kyotanabe,kyotango,maizuru,minami,minamiyamashiro,miyazu,muko,nagaokakyo,nakagyo,nantan,oyamazaki,sakyo,seika,tanabe,uji,ujitawara,wazuka,yamashina,yawata<mie>asahi,inabe,ise,kameyama,kawagoe,kiho,kisosaki,kiwa,komono,kumano,kuwana,matsusaka,meiwa,mihama,minamiise,misugi,miyama,nabari,shima,suzuka,tado,taiki,taki,tamaki,toba,tsu,udono,ureshino,watarai,yokkaichi<miyagi>furukawa,higashimatsushima,ishinomaki,iwanuma,kakuda,kami,kawasaki,marumori,matsushima,minamisanriku,misato,murata,natori,ogawara,ohira,onagawa,osaki,rifu,semine,shibata,shichikashuku,shikama,shiogama,shiroishi,tagajo,taiwa,tome,tomiya,wakuya,watari,yamamoto,zao<miyazaki>aya,ebino,gokase,hyuga,kadogawa,kawaminami,kijo,kitagawa,kitakata,kitaura,kobayashi,kunitomi,kushima,mimata,miyakonojo,miyazaki,morotsuka,nichinan,nishimera,nobeoka,saito,shiiba,shintomi,takaharu,takanabe,takazaki,tsuno<nagano>achi,agematsu,anan,aoki,asahi,azumino,chikuhoku,chikuma,chino,fujimi,hakuba,hara,hiraya,iida,iijima,iiyama,iizuna,ikeda,ikusaka,ina,karuizawa,kawakami,kiso,kisofukushima,kitaaiki,komagane,komoro,matsukawa,matsumoto,miasa,minamiaiki,minamimaki,minamiminowa,minowa,miyada,miyota,mochizuki,nagano,nagawa,nagiso,nakagawa,nakano,nozawaonsen,obuse,ogawa,okaya,omachi,omi,ookuwa,ooshika,otaki,otari,sakae,sakaki,saku,sakuho,shimosuwa,shinanomachi,shiojiri,suwa,suzaka,takagi,takamori,takayama,tateshina,tatsuno,togakushi,togura,tomi,ueda,wada,yamagata,yamanouchi,yasaka,yasuoka<nagasaki>chijiwa,futsu,goto,hasami,hirado,iki,isahaya,kawatana,kuchinotsu,matsuura,nagasaki,obama,omura,oseto,saikai,sasebo,seihi,shimabara,shinkamigoto,togitsu,tsushima,unzen<nara>ando,gose,heguri,higashiyoshino,ikaruga,ikoma,kamikitayama,kanmaki,kashiba,kashihara,katsuragi,kawai,kawakami,kawanishi,koryo,kurotaki,mitsue,miyake,nara,nosegawa,oji,ouda,oyodo,sakurai,sango,shimoichi,shimokitayama,shinjo,soni,takatori,tawaramoto,tenkawa,tenri,uda,yamatokoriyama,yamatotakada,yamazoe,yoshino<niigata>aga,agano,gosen,itoigawa,izumozaki,joetsu,kamo,kariwa,kashiwazaki,minamiuonuma,mitsuke,muika,murakami,myoko,nagaoka,niigata,ojiya,omi,sado,sanjo,seiro,seirou,sekikawa,shibata,tagami,tainai,tochio,tokamachi,tsubame,tsunan,uonuma,yahiko,yoita,yuzawa<oita>beppu,bungoono,bungotakada,hasama,hiji,himeshima,hita,kamitsue,kokonoe,kuju,kunisaki,kusu,oita,saiki,taketa,tsukumi,usa,usuki,yufu<okayama>akaiwa,asakuchi,bizen,hayashima,ibara,kagamino,kasaoka,kibichuo,kumenan,kurashiki,maniwa,misaki,nagi,niimi,nishiawakura,okayama,satosho,setouchi,shinjo,shoo,soja,takahashi,tamano,tsuyama,wake,yakage<okinawa>aguni,ginowan,ginoza,gushikami,haebaru,higashi,hirara,iheya,ishigaki,ishikawa,itoman,izena,kadena,kin,kitadaito,kitanakagusuku,kumejima,kunigami,minamidaito,motobu,nago,naha,nakagusuku,nakijin,nanjo,nishihara,ogimi,okinawa,onna,shimoji,taketomi,tarama,tokashiki,tomigusuku,tonaki,urasoe,uruma,yaese,yomitan,yonabaru,yonaguni,zamami<osaka>abeno,chihayaakasaka,chuo,daito,fujiidera,habikino,hannan,higashiosaka,higashisumiyoshi,higashiyodogawa,hirakata,ibaraki,ikeda,izumi,izumiotsu,izumisano,kadoma,kaizuka,kanan,kashiwara,katano,kawachinagano,kishiwada,kita,kumatori,matsubara,minato,minoh,misaki,moriguchi,neyagawa,nishi,nose,osakasayama,sakai,sayama,sennan,settsu,shijonawate,shimamoto,suita,tadaoka,taishi,tajiri,takaishi,takatsuki,tondabayashi,toyonaka,toyono,yao<saga>ariake,arita,fukudomi,genkai,hamatama,hizen,imari,kamimine,kanzaki,karatsu,kashima,kitagata,kitahata,kiyama,kouhoku,kyuragi,nishiarita,ogi,omachi,ouchi,saga,shiroishi,taku,tara,tosu,yoshinogari<saitama>arakawa,asaka,chichibu,fujimi,fujimino,fukaya,hanno,hanyu,hasuda,hatogaya,hatoyama,hidaka,higashichichibu,higashimatsuyama,honjo,ina,iruma,iwatsuki,kamiizumi,kamikawa,kamisato,kasukabe,kawagoe,kawaguchi,kawajima,kazo,kitamoto,koshigaya,kounosu,kuki,kumagaya,matsubushi,minano,misato,miyashiro,miyoshi,moroyama,nagatoro,namegawa,niiza,ogano,ogawa,ogose,okegawa,omiya,otaki,ranzan,ryokami,saitama,sakado,satte,sayama,shiki,shiraoka,soka,sugito,toda,tokigawa,tokorozawa,tsurugashima,urawa,warabi,yashio,yokoze,yono,yorii,yoshida,yoshikawa,yoshimi<shiga>aisho,gamo,higashiomi,hikone,koka,konan,kosei,koto,kusatsu,maibara,moriyama,nagahama,nishiazai,notogawa,omihachiman,otsu,ritto,ryuoh,takashima,takatsuki,torahime,toyosato,yasu<shimane>akagi,ama,gotsu,hamada,higashiizumo,hikawa,hikimi,izumo,kakinoki,masuda,matsue,misato,nishinoshima,ohda,okinoshima,okuizumo,shimane,tamayu,tsuwano,unnan,yakumo,yasugi,yatsuka<shizuoka>arai,atami,fuji,fujieda,fujikawa,fujinomiya,fukuroi,gotemba,haibara,hamamatsu,higashiizu,ito,iwata,izu,izunokuni,kakegawa,kannami,kawanehon,kawazu,kikugawa,kosai,makinohara,matsuzaki,minamiizu,mishima,morimachi,nishiizu,numazu,omaezaki,shimada,shimizu,shimoda,shizuoka,susono,yaizu,yoshida<tochigi>ashikaga,bato,haga,ichikai,iwafune,kaminokawa,kanuma,karasuyama,kuroiso,mashiko,mibu,moka,motegi,nasu,nasushiobara,nikko,nishikata,nogi,ohira,ohtawara,oyama,sakura,sano,shimotsuke,shioya,takanezawa,tochigi,tsuga,ujiie,utsunomiya,yaita<tokushima>aizumi,anan,ichiba,itano,kainan,komatsushima,matsushige,mima,minami,miyoshi,mugi,nakagawa,naruto,sanagochi,shishikui,tokushima,wajiki<tokyo>adachi,akiruno,akishima,aogashima,arakawa,bunkyo,chiyoda,chofu,chuo,edogawa,fuchu,fussa,hachijo,hachioji,hamura,higashikurume,higashimurayama,higashiyamato,hino,hinode,hinohara,inagi,itabashi,katsushika,kita,kiyose,kodaira,koganei,kokubunji,komae,koto,kouzushima,kunitachi,machida,meguro,minato,mitaka,mizuho,musashimurayama,musashino,nakano,nerima,ogasawara,okutama,ome,oshima,ota,setagaya,shibuya,shinagawa,shinjuku,suginami,sumida,tachikawa,taito,tama,toshima<tottori>chizu,hino,kawahara,koge,kotoura,misasa,nanbu,nichinan,sakaiminato,tottori,wakasa,yazu,yonago<toyama>asahi,fuchu,fukumitsu,funahashi,himi,imizu,inami,johana,kamiichi,kurobe,nakaniikawa,namerikawa,nanto,nyuzen,oyabe,taira,takaoka,tateyama,toga,tonami,toyama,unazuki,uozu,yamada<wakayama>arida,aridagawa,gobo,hashimoto,hidaka,hirogawa,inami,iwade,kainan,kamitonda,katsuragi,kimino,kinokawa,kitayama,koya,koza,kozagawa,kudoyama,kushimoto,mihama,misato,nachikatsuura,shingu,shirahama,taiji,tanabe,wakayama,yuasa,yura<yamagata>asahi,funagata,higashine,iide,kahoku,kaminoyama,kaneyama,kawanishi,mamurogawa,mikawa,murayama,nagai,nakayama,nanyo,nishikawa,obanazawa,oe,oguni,ohkura,oishida,sagae,sakata,sakegawa,shinjo,shirataka,shonai,takahata,tendo,tozawa,tsuruoka,yamagata,yamanobe,yonezawa,yuza<yamaguchi>abu,hagi,hikari,hofu,iwakuni,kudamatsu,mitou,nagato,oshima,shimonoseki,shunan,tabuse,tokuyama,toyota,ube,yuu<yamanashi>chuo,doshi,fuefuki,fujikawa,fujikawaguchiko,fujiyoshida,hayakawa,hokuto,ichikawamisato,kai,kofu,koshu,kosuge,minami-alps,minobu,nakamichi,nanbu,narusawa,nirasaki,nishikatsura,oshino,otsuki,showa,tabayama,tsuru,uenohara,yamanakako,yamanashi<xn--4pvxs,xn--vgu402c,xn--c3s14m,xn--f6qx53a,xn--8pvr4u,xn--uist22h,xn--djrs72d6uy,xn--mkru45i,xn--0trq7p7nn,xn--8ltr62k,xn--2m4a15e,xn--efvn9s,xn--32vp30h,xn--4it797k,xn--1lqs71d,xn--5rtp49c,xn--5js045d,xn--ehqz56n,xn--1lqs03n,xn--qqqt11m,xn--kbrq7o,xn--pssu33l,xn--ntsq17g,xn--uisz3g,xn--6btw5a,xn--1ctwo,xn--6orx2r,xn--rht61e,xn--rht27z,xn--djty4k,xn--nit225k,xn--rht3d,xn--klty5x,xn--kltx9a,xn--kltp7d,xn--uuwu58a,xn--zbx025d,xn--ntso0iqx3a,xn--elqq16h,xn--4it168d,xn--klt787d,xn--rny31h,xn--7t0a264c,xn--5rtq34k,xn--k7yn95e,xn--tor131o,xn--d5qv7z876c,kawasaki>*,!city<kitakyushu>*,!city<kobe>*,!city<nagoya>*,!city<sapporo>*,!city<sendai>*,!city<yokohama>*,!city<<ke>ac,co,go,info,me,mobi,ne,or,sc<kg>org,net,com,edu,gov,mil<kh>*<ki>edu,biz,net,org,gov,info,com<km>org,nom,gov,prd,tm,edu,mil,ass,com,coop,asso,presse,medecin,notaires,pharmaciens,veterinaire,gouv<kn>net,org,edu,gov<kp>com,edu,gov,org,rep,tra<kr>ac,co,es,go,hs,kg,mil,ms,ne,or,pe,re,sc,busan,chungbuk,chungnam,daegu,daejeon,gangwon,gwangju,gyeongbuk,gyeonggi,gyeongnam,incheon,jeju,jeonbuk,jeonnam,seoul,ulsan<kw>com,edu,emb,gov,ind,net,org<ky>com,edu,net,org<kz>org,edu,net,gov,mil,com<la>int,net,info,edu,gov,per,com,org<lb>com,edu,gov,net,org<lc>com,net,co,org,edu,gov<li,lk>gov,sch,net,int,com,org,edu,ngo,soc,web,ltd,assn,grp,hotel,ac<lr>com,edu,gov,org,net<ls>ac,biz,co,edu,gov,info,net,org,sc<lt>gov<lu,lv>com,edu,gov,org,mil,id,net,asn,conf<ly>com,net,gov,plc,edu,sch,med,org,id<ma>co,net,gov,org,ac,press<mc>tm,asso<md,me>co,net,org,edu,ac,gov,its,priv<mg>org,nom,gov,prd,tm,edu,mil,com,co<mh,mil,mk>com,org,net,edu,gov,inf,name<ml>com,edu,gouv,gov,net,org,presse<mm>*<mn>gov,edu,org<mo>com,net,org,edu,gov<mobi,mp,mq,mr>gov<ms>com,edu,gov,net,org<mt>com,edu,net,org<mu>com,net,org,gov,ac,co,or<museum>academy,agriculture,air,airguard,alabama,alaska,amber,ambulance,american,americana,americanantiques,americanart,amsterdam,and,annefrank,anthro,anthropology,antiques,aquarium,arboretum,archaeological,archaeology,architecture,art,artanddesign,artcenter,artdeco,arteducation,artgallery,arts,artsandcrafts,asmatart,assassination,assisi,association,astronomy,atlanta,austin,australia,automotive,aviation,axis,badajoz,baghdad,bahn,bale,baltimore,barcelona,baseball,basel,baths,bauern,beauxarts,beeldengeluid,bellevue,bergbau,berkeley,berlin,bern,bible,bilbao,bill,birdart,birthplace,bonn,boston,botanical,botanicalgarden,botanicgarden,botany,brandywinevalley,brasil,bristol,british,britishcolumbia,broadcast,brunel,brussel,brussels,bruxelles,building,burghof,bus,bushey,cadaques,california,cambridge,can,canada,capebreton,carrier,cartoonart,casadelamoneda,castle,castres,celtic,center,chattanooga,cheltenham,chesapeakebay,chicago,children,childrens,childrensgarden,chiropractic,chocolate,christiansburg,cincinnati,cinema,circus,civilisation,civilization,civilwar,clinton,clock,coal,coastaldefence,cody,coldwar,collection,colonialwilliamsburg,coloradoplateau,columbia,columbus,communication,communications,community,computer,computerhistory,xn--comunicaes-v6a2o,contemporary,contemporaryart,convent,copenhagen,corporation,xn--correios-e-telecomunicaes-ghc29a,corvette,costume,countryestate,county,crafts,cranbrook,creation,cultural,culturalcenter,culture,cyber,cymru,dali,dallas,database,ddr,decorativearts,delaware,delmenhorst,denmark,depot,design,detroit,dinosaur,discovery,dolls,donostia,durham,eastafrica,eastcoast,education,educational,egyptian,eisenbahn,elburg,elvendrell,embroidery,encyclopedic,england,entomology,environment,environmentalconservation,epilepsy,essex,estate,ethnology,exeter,exhibition,family,farm,farmequipment,farmers,farmstead,field,figueres,filatelia,film,fineart,finearts,finland,flanders,florida,force,fortmissoula,fortworth,foundation,francaise,frankfurt,franziskaner,freemasonry,freiburg,fribourg,frog,fundacio,furniture,gallery,garden,gateway,geelvinck,gemological,geology,georgia,giessen,glas,glass,gorge,grandrapids,graz,guernsey,halloffame,hamburg,handson,harvestcelebration,hawaii,health,heimatunduhren,hellas,helsinki,hembygdsforbund,heritage,histoire,historical,historicalsociety,historichouses,historisch,historisches,history,historyofscience,horology,house,humanities,illustration,imageandsound,indian,indiana,indianapolis,indianmarket,intelligence,interactive,iraq,iron,isleofman,jamison,jefferson,jerusalem,jewelry,jewish,jewishart,jfk,journalism,judaica,judygarland,juedisches,juif,karate,karikatur,kids,koebenhavn,koeln,kunst,kunstsammlung,kunstunddesign,labor,labour,lajolla,lancashire,landes,lans,xn--lns-qla,larsson,lewismiller,lincoln,linz,living,livinghistory,localhistory,london,losangeles,louvre,loyalist,lucerne,luxembourg,luzern,mad,madrid,mallorca,manchester,mansion,mansions,manx,marburg,maritime,maritimo,maryland,marylhurst,media,medical,medizinhistorisches,meeres,memorial,mesaverde,michigan,midatlantic,military,mill,miners,mining,minnesota,missile,missoula,modern,moma,money,monmouth,monticello,montreal,moscow,motorcycle,muenchen,muenster,mulhouse,muncie,museet,museumcenter,museumvereniging,music,national,nationalfirearms,nationalheritage,nativeamerican,naturalhistory,naturalhistorymuseum,naturalsciences,nature,naturhistorisches,natuurwetenschappen,naumburg,naval,nebraska,neues,newhampshire,newjersey,newmexico,newport,newspaper,newyork,niepce,norfolk,north,nrw,nyc,nyny,oceanographic,oceanographique,omaha,online,ontario,openair,oregon,oregontrail,otago,oxford,pacific,paderborn,palace,paleo,palmsprings,panama,paris,pasadena,pharmacy,philadelphia,philadelphiaarea,philately,phoenix,photography,pilots,pittsburgh,planetarium,plantation,plants,plaza,portal,portland,portlligat,posts-and-telecommunications,preservation,presidio,press,project,public,pubol,quebec,railroad,railway,research,resistance,riodejaneiro,rochester,rockart,roma,russia,saintlouis,salem,salvadordali,salzburg,sandiego,sanfrancisco,santabarbara,santacruz,santafe,saskatchewan,satx,savannahga,schlesisches,schoenbrunn,schokoladen,school,schweiz,science,scienceandhistory,scienceandindustry,sciencecenter,sciencecenters,science-fiction,sciencehistory,sciences,sciencesnaturelles,scotland,seaport,settlement,settlers,shell,sherbrooke,sibenik,silk,ski,skole,society,sologne,soundandvision,southcarolina,southwest,space,spy,square,stadt,stalbans,starnberg,state,stateofdelaware,station,steam,steiermark,stjohn,stockholm,stpetersburg,stuttgart,suisse,surgeonshall,surrey,svizzera,sweden,sydney,tank,tcm,technology,telekommunikation,television,texas,textile,theater,time,timekeeping,topology,torino,touch,town,transport,tree,trolley,trust,trustee,uhren,ulm,undersea,university,usa,usantiques,usarts,uscountryestate,usculture,usdecorativearts,usgarden,ushistory,ushuaia,uslivinghistory,utah,uvic,valley,vantaa,versailles,viking,village,virginia,virtual,virtuel,vlaanderen,volkenkunde,wales,wallonie,war,washingtondc,watchandclock,watch-and-clock,western,westfalen,whaling,wildlife,williamsburg,windmill,workshop,york,yorkshire,yosemite,youth,zoological,zoology,xn--9dbhblg6di,xn--h1aegh<mv>aero,biz,com,coop,edu,gov,info,int,mil,museum,name,net,org,pro<mw>ac,biz,co,com,coop,edu,gov,int,museum,net,org<mx>com,org,gob,edu,net<my>biz,com,edu,gov,mil,name,net,org<mz>ac,adv,co,edu,gov,mil,net,org<na>info,pro,name,school,or,dr,us,mx,ca,in,cc,tv,ws,mobi,co,com,org<name,nc>asso,nom<ne,net,nf>com,net,per,rec,web,arts,firm,info,other,store<ng>com,edu,gov,i,mil,mobi,name,net,org,sch<ni>ac,biz,co,com,edu,gob,in,info,int,mil,net,nom,org,web<nl,no>fhs,vgs,fylkesbibl,folkebibl,museum,idrett,priv,mil,stat,dep,kommune,herad,aa>gs<ah>gs<bu>gs<fm>gs<hl>gs<hm>gs<jan-mayen>gs<mr>gs<nl>gs<nt>gs<of>gs<ol>gs<oslo>gs<rl>gs<sf>gs<st>gs<svalbard>gs<tm>gs<tr>gs<va>gs<vf>gs<akrehamn,xn--krehamn-dxa,algard,xn--lgrd-poac,arna,brumunddal,bryne,bronnoysund,xn--brnnysund-m8ac,drobak,xn--drbak-wua,egersund,fetsund,floro,xn--flor-jra,fredrikstad,hokksund,honefoss,xn--hnefoss-q1a,jessheim,jorpeland,xn--jrpeland-54a,kirkenes,kopervik,krokstadelva,langevag,xn--langevg-jxa,leirvik,mjondalen,xn--mjndalen-64a,mo-i-rana,mosjoen,xn--mosjen-eya,nesoddtangen,orkanger,osoyro,xn--osyro-wua,raholt,xn--rholt-mra,sandnessjoen,xn--sandnessjen-ogb,skedsmokorset,slattum,spjelkavik,stathelle,stavern,stjordalshalsen,xn--stjrdalshalsen-sqb,tananger,tranby,vossevangen,afjord,xn--fjord-lra,agdenes,al,xn--l-1fa,alesund,xn--lesund-hua,alstahaug,alta,xn--lt-liac,alaheadju,xn--laheadju-7ya,alvdal,amli,xn--mli-tla,amot,xn--mot-tla,andebu,andoy,xn--andy-ira,andasuolo,ardal,xn--rdal-poa,aremark,arendal,xn--s-1fa,aseral,xn--seral-lra,asker,askim,askvoll,askoy,xn--asky-ira,asnes,xn--snes-poa,audnedaln,aukra,aure,aurland,aurskog-holand,xn--aurskog-hland-jnb,austevoll,austrheim,averoy,xn--avery-yua,balestrand,ballangen,balat,xn--blt-elab,balsfjord,bahccavuotna,xn--bhccavuotna-k7a,bamble,bardu,beardu,beiarn,bajddar,xn--bjddar-pta,baidar,xn--bidr-5nac,berg,bergen,berlevag,xn--berlevg-jxa,bearalvahki,xn--bearalvhki-y4a,bindal,birkenes,bjarkoy,xn--bjarky-fya,bjerkreim,bjugn,bodo,xn--bod-2na,badaddja,xn--bdddj-mrabd,budejju,bokn,bremanger,bronnoy,xn--brnny-wuac,bygland,bykle,barum,xn--brum-voa,telemark>bo,xn--b-5ga<nordland>bo,xn--b-5ga,heroy,xn--hery-ira<bievat,xn--bievt-0qa,bomlo,xn--bmlo-gra,batsfjord,xn--btsfjord-9za,bahcavuotna,xn--bhcavuotna-s4a,dovre,drammen,drangedal,dyroy,xn--dyry-ira,donna,xn--dnna-gra,eid,eidfjord,eidsberg,eidskog,eidsvoll,eigersund,elverum,enebakk,engerdal,etne,etnedal,evenes,evenassi,xn--eveni-0qa01ga,evje-og-hornnes,farsund,fauske,fuossko,fuoisku,fedje,fet,finnoy,xn--finny-yua,fitjar,fjaler,fjell,flakstad,flatanger,flekkefjord,flesberg,flora,fla,xn--fl-zia,folldal,forsand,fosnes,frei,frogn,froland,frosta,frana,xn--frna-woa,froya,xn--frya-hra,fusa,fyresdal,forde,xn--frde-gra,gamvik,gangaviika,xn--ggaviika-8ya47h,gaular,gausdal,gildeskal,xn--gildeskl-g0a,giske,gjemnes,gjerdrum,gjerstad,gjesdal,gjovik,xn--gjvik-wua,gloppen,gol,gran,grane,granvin,gratangen,grimstad,grong,kraanghke,xn--kranghke-b0a,grue,gulen,hadsel,halden,halsa,hamar,hamaroy,habmer,xn--hbmer-xqa,hapmir,xn--hpmir-xqa,hammerfest,hammarfeasta,xn--hmmrfeasta-s4ac,haram,hareid,harstad,hasvik,aknoluokta,xn--koluokta-7ya57h,hattfjelldal,aarborte,haugesund,hemne,hemnes,hemsedal,more-og-romsdal>heroy,sande<xn--mre-og-romsdal-qqb>xn--hery-ira,sande<hitra,hjartdal,hjelmeland,hobol,xn--hobl-ira,hof,hol,hole,holmestrand,holtalen,xn--holtlen-hxa,hornindal,horten,hurdal,hurum,hvaler,hyllestad,hagebostad,xn--hgebostad-g3a,hoyanger,xn--hyanger-q1a,hoylandet,xn--hylandet-54a,ha,xn--h-2fa,ibestad,inderoy,xn--indery-fya,iveland,jevnaker,jondal,jolster,xn--jlster-bya,karasjok,karasjohka,xn--krjohka-hwab49j,karlsoy,galsa,xn--gls-elac,karmoy,xn--karmy-yua,kautokeino,guovdageaidnu,klepp,klabu,xn--klbu-woa,kongsberg,kongsvinger,kragero,xn--krager-gya,kristiansand,kristiansund,krodsherad,xn--krdsherad-m8a,kvalsund,rahkkeravju,xn--rhkkervju-01af,kvam,kvinesdal,kvinnherad,kviteseid,kvitsoy,xn--kvitsy-fya,kvafjord,xn--kvfjord-nxa,giehtavuoatna,kvanangen,xn--kvnangen-k0a,navuotna,xn--nvuotna-hwa,kafjord,xn--kfjord-iua,gaivuotna,xn--givuotna-8ya,larvik,lavangen,lavagis,loabat,xn--loabt-0qa,lebesby,davvesiida,leikanger,leirfjord,leka,leksvik,lenvik,leangaviika,xn--leagaviika-52b,lesja,levanger,lier,lierne,lillehammer,lillesand,lindesnes,lindas,xn--linds-pra,lom,loppa,lahppi,xn--lhppi-xqa,lund,lunner,luroy,xn--lury-ira,luster,lyngdal,lyngen,ivgu,lardal,lerdal,xn--lrdal-sra,lodingen,xn--ldingen-q1a,lorenskog,xn--lrenskog-54a,loten,xn--lten-gra,malvik,masoy,xn--msy-ula0h,muosat,xn--muost-0qa,mandal,marker,marnardal,masfjorden,meland,meldal,melhus,meloy,xn--mely-ira,meraker,xn--merker-kua,moareke,xn--moreke-jua,midsund,midtre-gauldal,modalen,modum,molde,moskenes,moss,mosvik,malselv,xn--mlselv-iua,malatvuopmi,xn--mlatvuopmi-s4a,namdalseid,aejrie,namsos,namsskogan,naamesjevuemie,xn--nmesjevuemie-tcba,laakesvuemie,nannestad,narvik,narviika,naustdal,nedre-eiker,akershus>nes<buskerud>nes<nesna,nesodden,nesseby,unjarga,xn--unjrga-rta,nesset,nissedal,nittedal,nord-aurdal,nord-fron,nord-odal,norddal,nordkapp,davvenjarga,xn--davvenjrga-y4a,nordre-land,nordreisa,raisa,xn--risa-5na,nore-og-uvdal,notodden,naroy,xn--nry-yla5g,notteroy,xn--nttery-byae,odda,oksnes,xn--ksnes-uua,oppdal,oppegard,xn--oppegrd-ixa,orkdal,orland,xn--rland-uua,orskog,xn--rskog-uua,orsta,xn--rsta-fra,hedmark>os,valer,xn--vler-qoa<hordaland>os<osen,osteroy,xn--ostery-fya,ostre-toten,xn--stre-toten-zcb,overhalla,ovre-eiker,xn--vre-eiker-k8a,oyer,xn--yer-zna,oygarden,xn--ygarden-p1a,oystre-slidre,xn--ystre-slidre-ujb,porsanger,porsangu,xn--porsgu-sta26f,porsgrunn,radoy,xn--rady-ira,rakkestad,rana,ruovat,randaberg,rauma,rendalen,rennebu,rennesoy,xn--rennesy-v1a,rindal,ringebu,ringerike,ringsaker,rissa,risor,xn--risr-ira,roan,rollag,rygge,ralingen,xn--rlingen-mxa,rodoy,xn--rdy-0nab,romskog,xn--rmskog-bya,roros,xn--rros-gra,rost,xn--rst-0na,royken,xn--ryken-vua,royrvik,xn--ryrvik-bya,rade,xn--rde-ula,salangen,siellak,saltdal,salat,xn--slt-elab,xn--slat-5na,samnanger,vestfold>sande<sandefjord,sandnes,sandoy,xn--sandy-yua,sarpsborg,sauda,sauherad,sel,selbu,selje,seljord,sigdal,siljan,sirdal,skaun,skedsmo,ski,skien,skiptvet,skjervoy,xn--skjervy-v1a,skierva,xn--skierv-uta,skjak,xn--skjk-soa,skodje,skanland,xn--sknland-fxa,skanit,xn--sknit-yqa,smola,xn--smla-hra,snillfjord,snasa,xn--snsa-roa,snoasa,snaase,xn--snase-nra,sogndal,sokndal,sola,solund,songdalen,sortland,spydeberg,stange,stavanger,steigen,steinkjer,stjordal,xn--stjrdal-s1a,stokke,stor-elvdal,stord,stordal,storfjord,omasvuotna,strand,stranda,stryn,sula,suldal,sund,sunndal,surnadal,sveio,svelvik,sykkylven,sogne,xn--sgne-gra,somna,xn--smna-gra,sondre-land,xn--sndre-land-0cb,sor-aurdal,xn--sr-aurdal-l8a,sor-fron,xn--sr-fron-q1a,sor-odal,xn--sr-odal-q1a,sor-varanger,xn--sr-varanger-ggb,matta-varjjat,xn--mtta-vrjjat-k7af,sorfold,xn--srfold-bya,sorreisa,xn--srreisa-q1a,sorum,xn--srum-gra,tana,deatnu,time,tingvoll,tinn,tjeldsund,dielddanuorri,tjome,xn--tjme-hra,tokke,tolga,torsken,tranoy,xn--trany-yua,tromso,xn--troms-zua,tromsa,romsa,trondheim,troandin,trysil,trana,xn--trna-woa,trogstad,xn--trgstad-r1a,tvedestrand,tydal,tynset,tysfjord,divtasvuodna,divttasvuotna,tysnes,tysvar,xn--tysvr-vra,tonsberg,xn--tnsberg-q1a,ullensaker,ullensvang,ulvik,utsira,vadso,xn--vads-jra,cahcesuolo,xn--hcesuolo-7ya35b,vaksdal,valle,vang,vanylven,vardo,xn--vard-jra,varggat,xn--vrggt-xqad,vefsn,vaapste,vega,vegarshei,xn--vegrshei-c0a,vennesla,verdal,verran,vestby,vestnes,vestre-slidre,vestre-toten,vestvagoy,xn--vestvgy-ixa6o,vevelstad,vik,vikna,vindafjord,volda,voss,varoy,xn--vry-yla5g,vagan,xn--vgan-qoa,voagat,vagsoy,xn--vgsy-qoa0j,vaga,xn--vg-yiab,ostfold>valer<xn--stfold-9xa>xn--vler-qoa<<np>*<nr>biz,info,gov,edu,org,net,com<nu,nz>ac,co,cri,geek,gen,govt,health,iwi,kiwi,maori,mil,xn--mori-qsa,net,org,parliament,school<om>co,com,edu,gov,med,museum,net,org,pro<onion,org,pa>ac,gob,com,org,sld,edu,net,ing,abo,med,nom<pe>edu,gob,nom,mil,org,com,net<pf>com,org,edu<pg>*<ph>com,net,org,gov,edu,ngo,mil,i<pk>com,net,edu,org,fam,biz,web,gov,gob,gok,gon,gop,gos,info<pl>com,net,org,aid,agro,atm,auto,biz,edu,gmina,gsm,info,mail,miasta,media,mil,nieruchomosci,nom,pc,powiat,priv,realestate,rel,sex,shop,sklep,sos,szkola,targi,tm,tourism,travel,turystyka,gov>ap,ic,is,us,kmpsp,kppsp,kwpsp,psp,wskr,kwp,mw,ug,um,umig,ugim,upow,uw,starostwo,pa,po,psse,pup,rzgw,sa,so,sr,wsa,sko,uzs,wiih,winb,pinb,wios,witd,wzmiuw,piw,wiw,griw,wif,oum,sdn,zp,uppo,mup,wuoz,konsulat,oirm<augustow,babia-gora,bedzin,beskidy,bialowieza,bialystok,bielawa,bieszczady,boleslawiec,bydgoszcz,bytom,cieszyn,czeladz,czest,dlugoleka,elblag,elk,glogow,gniezno,gorlice,grajewo,ilawa,jaworzno,jelenia-gora,jgora,kalisz,kazimierz-dolny,karpacz,kartuzy,kaszuby,katowice,kepno,ketrzyn,klodzko,kobierzyce,kolobrzeg,konin,konskowola,kutno,lapy,lebork,legnica,lezajsk,limanowa,lomza,lowicz,lubin,lukow,malbork,malopolska,mazowsze,mazury,mielec,mielno,mragowo,naklo,nowaruda,nysa,olawa,olecko,olkusz,olsztyn,opoczno,opole,ostroda,ostroleka,ostrowiec,ostrowwlkp,pila,pisz,podhale,podlasie,polkowice,pomorze,pomorskie,prochowice,pruszkow,przeworsk,pulawy,radom,rawa-maz,rybnik,rzeszow,sanok,sejny,slask,slupsk,sosnowiec,stalowa-wola,skoczow,starachowice,stargard,suwalki,swidnica,swiebodzin,swinoujscie,szczecin,szczytno,tarnobrzeg,tgory,turek,tychy,ustka,walbrzych,warmia,warszawa,waw,wegrow,wielun,wlocl,wloclawek,wodzislaw,wolomin,wroclaw,zachpomor,zagan,zarow,zgora,zgorzelec<pm,pn>gov,co,org,edu,net<post,pr>com,net,org,gov,edu,isla,pro,biz,info,name,est,prof,ac<pro>aaa,aca,acct,avocat,bar,cpa,eng,jur,law,med,recht<ps>edu,gov,sec,plo,com,org,net<pt>net,gov,org,edu,int,publ,com,nome<pw>co,ne,or,ed,go,belau<py>com,coop,edu,gov,mil,net,org<qa>com,edu,gov,mil,name,net,org,sch<re>asso,com,nom<ro>arts,com,firm,info,nom,nt,org,rec,store,tm,www<rs>ac,co,edu,gov,in,org<ru,rw>ac,co,coop,gov,mil,net,org<sa>com,net,org,gov,med,pub,edu,sch<sb>com,edu,gov,net,org<sc>com,gov,net,org,edu<sd>com,net,org,edu,med,tv,gov,info<se>a,ac,b,bd,brand,c,d,e,f,fh,fhsk,fhv,g,h,i,k,komforb,kommunalforbund,komvux,l,lanbib,m,n,naturbruksgymn,o,org,p,parti,pp,press,r,s,t,tm,u,w,x,y,z<sg>com,net,org,gov,edu,per<sh>com,net,gov,org,mil<si,sj,sk,sl>com,net,edu,gov,org<sm,sn>art,com,edu,gouv,org,perso,univ<so>com,edu,gov,me,net,org<sr,ss>biz,com,edu,gov,me,net,org,sch<st>co,com,consulado,edu,embaixada,mil,net,org,principe,saotome,store<su,sv>com,edu,gob,org,red<sx>gov<sy>edu,gov,net,mil,com,org<sz>co,ac,org<tc,td,tel,tf,tg,th>ac,co,go,in,mi,net,or<tj>ac,biz,co,com,edu,go,gov,int,mil,name,net,nic,org,test,web<tk,tl>gov<tm>com,co,org,net,nom,gov,mil,edu<tn>com,ens,fin,gov,ind,info,intl,mincom,nat,net,org,perso,tourism<to>com,gov,net,org,edu,mil<tr>av,bbs,bel,biz,com,dr,edu,gen,gov,info,mil,k12,kep,name,net,org,pol,tel,tsk,tv,web,nc>gov<<tt>co,com,org,net,biz,info,pro,int,coop,jobs,mobi,travel,museum,aero,name,gov,edu<tv,tw>edu,gov,mil,com,net,org,idv,game,ebiz,club,xn--zf0ao64a,xn--uc0atv,xn--czrw28b<tz>ac,co,go,hotel,info,me,mil,mobi,ne,or,sc,tv<ua>com,edu,gov,in,net,org,cherkassy,cherkasy,chernigov,chernihiv,chernivtsi,chernovtsy,ck,cn,cr,crimea,cv,dn,dnepropetrovsk,dnipropetrovsk,donetsk,dp,if,ivano-frankivsk,kh,kharkiv,kharkov,kherson,khmelnitskiy,khmelnytskyi,kiev,kirovograd,km,kr,krym,ks,kv,kyiv,lg,lt,lugansk,lutsk,lv,lviv,mk,mykolaiv,nikolaev,od,odesa,odessa,pl,poltava,rivne,rovno,rv,sb,sebastopol,sevastopol,sm,sumy,te,ternopil,uz,uzhgorod,vinnica,vinnytsia,vn,volyn,yalta,zaporizhzhe,zaporizhzhia,zhitomir,zhytomyr,zp,zt<ug>co,or,ac,sc,go,ne,com,org<uk>ac,co,gov,ltd,me,net,nhs,org,plc,police,sch>*<<us>dni,fed,isa,kids,nsn,ak>k12,cc,lib<al>k12,cc,lib<ar>k12,cc,lib<as>k12,cc,lib<az>k12,cc,lib<ca>k12,cc,lib<co>k12,cc,lib<ct>k12,cc,lib<dc>k12,cc,lib<de>k12,cc<fl>k12,cc,lib<ga>k12,cc,lib<gu>k12,cc,lib<hi>cc,lib<ia>k12,cc,lib<id>k12,cc,lib<il>k12,cc,lib<in>k12,cc,lib<ks>k12,cc,lib<ky>k12,cc,lib<la>k12,cc,lib<ma>k12>pvt,chtr,paroch<cc,lib<md>k12,cc,lib<me>k12,cc,lib<mi>k12,cc,lib,ann-arbor,cog,dst,eaton,gen,mus,tec,washtenaw<mn>k12,cc,lib<mo>k12,cc,lib<ms>k12,cc,lib<mt>k12,cc,lib<nc>k12,cc,lib<nd>cc,lib<ne>k12,cc,lib<nh>k12,cc,lib<nj>k12,cc,lib<nm>k12,cc,lib<nv>k12,cc,lib<ny>k12,cc,lib<oh>k12,cc,lib<ok>k12,cc,lib<or>k12,cc,lib<pa>k12,cc,lib<pr>k12,cc,lib<ri>cc,lib<sc>k12,cc,lib<sd>cc,lib<tn>k12,cc,lib<tx>k12,cc,lib<ut>k12,cc,lib<vi>k12,cc,lib<vt>k12,cc,lib<va>k12,cc,lib<wa>k12,cc,lib<wi>k12,cc,lib<wv>cc<wy>k12,cc,lib<<uy>com,edu,gub,mil,net,org<uz>co,com,net,org<va,vc>com,net,org,gov,mil,edu<ve>arts,bib,co,com,e12,edu,firm,gob,gov,info,int,mil,net,nom,org,rar,rec,store,tec,web<vg,vi>co,com,k12,net,org<vn>com,net,org,edu,gov,int,ac,biz,info,name,pro,health<vu>com,edu,net,org<wf,ws>com,net,org,gov,edu<yt,xn--mgbaam7a8h,xn--y9a3aq,xn--54b7fta0cc,xn--90ae,xn--mgbcpq6gpa1a,xn--90ais,xn--fiqs8s,xn--fiqz9s,xn--lgbbat1ad8j,xn--wgbh1c,xn--e1a4c,xn--qxa6a,xn--mgbah1a3hjkrd,xn--node,xn--qxam,xn--j6w193g>xn--55qx5d,xn--wcvs22d,xn--mxtq1m,xn--gmqw5a,xn--od0alg,xn--uc0atv<xn--2scrj9c,xn--3hcrj9c,xn--45br5cyl,xn--h2breg3eve,xn--h2brj9c8c,xn--mgbgu82a,xn--rvc1e0am3e,xn--h2brj9c,xn--mgbbh1a,xn--mgbbh1a71e,xn--fpcrj9c3d,xn--gecrj9c,xn--s9brj9c,xn--45brj9c,xn--xkc2dl3a5ee0h,xn--mgba3a4f16a,xn--mgba3a4fra,xn--mgbtx2b,xn--mgbayh7gpa,xn--3e0b707e,xn--80ao21a,xn--q7ce6a,xn--fzc2c9e2c,xn--xkc2al3hye2a,xn--mgbc0a9azcg,xn--d1alf,xn--l1acc,xn--mix891f,xn--mix082f,xn--mgbx4cd0ab,xn--mgb9awbf,xn--mgbai9azgqp6j,xn--mgbai9a5eva00b,xn--ygbi2ammx,xn--90a3ac>xn--o1ac,xn--c1avg,xn--90azh,xn--d1at,xn--o1ach,xn--80au<xn--p1ai,xn--wgbl6a,xn--mgberp4a5d4ar,xn--mgberp4a5d4a87g,xn--mgbqly7c0a67fbc,xn--mgbqly7cvafr,xn--mgbpl2fh,xn--yfro4i67o,xn--clchc0ea0b2g2a9gcd,xn--ogbpf8fl,xn--mgbtf8fl,xn--o3cw4h>xn--12c1fe0br,xn--12co0c3b4eva,xn--h3cuzk1di,xn--o3cyx2a,xn--m3ch0j3a,xn--12cfi8ixb8l<xn--pgbs0dh,xn--kpry57d,xn--kprw13d,xn--nnx388a,xn--j1amh,xn--mgb2ddes,xxx,ye>com,edu,gov,net,mil,org<za>ac,agric,alt,co,edu,gov,grondar,law,mil,net,ngo,nic,nis,nom,org,school,tm,web<zm>ac,biz,co,com,edu,gov,info,mil,net,org,sch<zw>ac,co,gov,mil,org<aaa,aarp,abarth,abb,abbott,abbvie,abc,able,abogado,abudhabi,academy,accenture,accountant,accountants,aco,actor,adac,ads,adult,aeg,aetna,afl,africa,agakhan,agency,aig,airbus,airforce,airtel,akdn,alfaromeo,alibaba,alipay,allfinanz,allstate,ally,alsace,alstom,amazon,americanexpress,americanfamily,amex,amfam,amica,amsterdam,analytics,android,anquan,anz,aol,apartments,app,apple,aquarelle,arab,aramco,archi,army,art,arte,asda,associates,athleta,attorney,auction,audi,audible,audio,auspost,author,auto,autos,avianca,aws,axa,azure,baby,baidu,banamex,bananarepublic,band,bank,bar,barcelona,barclaycard,barclays,barefoot,bargains,baseball,basketball,bauhaus,bayern,bbc,bbt,bbva,bcg,bcn,beats,beauty,beer,bentley,berlin,best,bestbuy,bet,bharti,bible,bid,bike,bing,bingo,bio,black,blackfriday,blockbuster,blog,bloomberg,blue,bms,bmw,bnpparibas,boats,boehringer,bofa,bom,bond,boo,book,booking,bosch,bostik,boston,bot,boutique,box,bradesco,bridgestone,broadway,broker,brother,brussels,budapest,bugatti,build,builders,business,buy,buzz,bzh,cab,cafe,cal,call,calvinklein,cam,camera,camp,cancerresearch,canon,capetown,capital,capitalone,car,caravan,cards,care,career,careers,cars,casa,case,cash,casino,catering,catholic,cba,cbn,cbre,cbs,center,ceo,cern,cfa,cfd,chanel,channel,charity,chase,chat,cheap,chintai,christmas,chrome,church,cipriani,circle,cisco,citadel,citi,citic,city,cityeats,claims,cleaning,click,clinic,clinique,clothing,cloud,club,clubmed,coach,codes,coffee,college,cologne,comcast,commbank,community,company,compare,computer,comsec,condos,construction,consulting,contact,contractors,cooking,cookingchannel,cool,corsica,country,coupon,coupons,courses,cpa,credit,creditcard,creditunion,cricket,crown,crs,cruise,cruises,csc,cuisinella,cymru,cyou,dabur,dad,dance,data,date,dating,datsun,day,dclk,dds,deal,dealer,deals,degree,delivery,dell,deloitte,delta,democrat,dental,dentist,desi,design,dev,dhl,diamonds,diet,digital,direct,directory,discount,discover,dish,diy,dnp,docs,doctor,dog,domains,dot,download,drive,dtv,dubai,dunlop,dupont,durban,dvag,dvr,earth,eat,eco,edeka,education,email,emerck,energy,engineer,engineering,enterprises,epson,equipment,ericsson,erni,esq,estate,etisalat,eurovision,eus,events,exchange,expert,exposed,express,extraspace,fage,fail,fairwinds,faith,family,fan,fans,farm,farmers,fashion,fast,fedex,feedback,ferrari,ferrero,fiat,fidelity,fido,film,final,finance,financial,fire,firestone,firmdale,fish,fishing,fit,fitness,flickr,flights,flir,florist,flowers,fly,foo,food,foodnetwork,football,ford,forex,forsale,forum,foundation,fox,free,fresenius,frl,frogans,frontdoor,frontier,ftr,fujitsu,fun,fund,furniture,futbol,fyi,gal,gallery,gallo,gallup,game,games,gap,garden,gay,gbiz,gdn,gea,gent,genting,george,ggee,gift,gifts,gives,giving,glass,gle,global,globo,gmail,gmbh,gmo,gmx,godaddy,gold,goldpoint,golf,goo,goodyear,goog,google,gop,got,grainger,graphics,gratis,green,gripe,grocery,group,guardian,gucci,guge,guide,guitars,guru,hair,hamburg,hangout,haus,hbo,hdfc,hdfcbank,health,healthcare,help,helsinki,here,hermes,hgtv,hiphop,hisamitsu,hitachi,hiv,hkt,hockey,holdings,holiday,homedepot,homegoods,homes,homesense,honda,horse,hospital,host,hosting,hot,hoteles,hotels,hotmail,house,how,hsbc,hughes,hyatt,hyundai,ibm,icbc,ice,icu,ieee,ifm,ikano,imamat,imdb,immo,immobilien,inc,industries,infiniti,ing,ink,institute,insurance,insure,international,intuit,investments,ipiranga,irish,ismaili,ist,istanbul,itau,itv,jaguar,java,jcb,jeep,jetzt,jewelry,jio,jll,jmp,jnj,joburg,jot,joy,jpmorgan,jprs,juegos,juniper,kaufen,kddi,kerryhotels,kerrylogistics,kerryproperties,kfh,kia,kids,kim,kinder,kindle,kitchen,kiwi,koeln,komatsu,kosher,kpmg,kpn,krd,kred,kuokgroup,kyoto,lacaixa,lamborghini,lamer,lancaster,lancia,land,landrover,lanxess,lasalle,lat,latino,latrobe,law,lawyer,lds,lease,leclerc,lefrak,legal,lego,lexus,lgbt,lidl,life,lifeinsurance,lifestyle,lighting,like,lilly,limited,limo,lincoln,linde,link,lipsy,live,living,llc,llp,loan,loans,locker,locus,loft,lol,london,lotte,lotto,love,lpl,lplfinancial,ltd,ltda,lundbeck,luxe,luxury,macys,madrid,maif,maison,makeup,man,management,mango,map,market,marketing,markets,marriott,marshalls,maserati,mattel,mba,mckinsey,med,media,meet,melbourne,meme,memorial,men,menu,merckmsd,miami,microsoft,mini,mint,mit,mitsubishi,mlb,mls,mma,mobile,moda,moe,moi,mom,monash,money,monster,mormon,mortgage,moscow,moto,motorcycles,mov,movie,msd,mtn,mtr,music,mutual,nab,nagoya,natura,navy,nba,nec,netbank,netflix,network,neustar,new,news,next,nextdirect,nexus,nfl,ngo,nhk,nico,nike,nikon,ninja,nissan,nissay,nokia,northwesternmutual,norton,now,nowruz,nowtv,nra,nrw,ntt,nyc,obi,observer,office,okinawa,olayan,olayangroup,oldnavy,ollo,omega,one,ong,onl,online,ooo,open,oracle,orange,organic,origins,osaka,otsuka,ott,ovh,page,panasonic,paris,pars,partners,parts,party,passagens,pay,pccw,pet,pfizer,pharmacy,phd,philips,phone,photo,photography,photos,physio,pics,pictet,pictures,pid,pin,ping,pink,pioneer,pizza,place,play,playstation,plumbing,plus,pnc,pohl,poker,politie,porn,pramerica,praxi,press,prime,prod,productions,prof,progressive,promo,properties,property,protection,pru,prudential,pub,pwc,qpon,quebec,quest,racing,radio,read,realestate,realtor,realty,recipes,red,redstone,redumbrella,rehab,reise,reisen,reit,reliance,ren,rent,rentals,repair,report,republican,rest,restaurant,review,reviews,rexroth,rich,richardli,ricoh,ril,rio,rip,rocher,rocks,rodeo,rogers,room,rsvp,rugby,ruhr,run,rwe,ryukyu,saarland,safe,safety,sakura,sale,salon,samsclub,samsung,sandvik,sandvikcoromant,sanofi,sap,sarl,sas,save,saxo,sbi,sbs,sca,scb,schaeffler,schmidt,scholarships,school,schule,schwarz,science,scot,search,seat,secure,security,seek,select,sener,services,ses,seven,sew,sex,sexy,sfr,shangrila,sharp,shaw,shell,shia,shiksha,shoes,shop,shopping,shouji,show,showtime,silk,sina,singles,site,ski,skin,sky,skype,sling,smart,smile,sncf,soccer,social,softbank,software,sohu,solar,solutions,song,sony,soy,spa,space,sport,spot,srl,stada,staples,star,statebank,statefarm,stc,stcgroup,stockholm,storage,store,stream,studio,study,style,sucks,supplies,supply,support,surf,surgery,suzuki,swatch,swiss,sydney,systems,tab,taipei,talk,taobao,target,tatamotors,tatar,tattoo,tax,taxi,tci,tdk,team,tech,technology,temasek,tennis,teva,thd,theater,theatre,tiaa,tickets,tienda,tiffany,tips,tires,tirol,tjmaxx,tjx,tkmaxx,tmall,today,tokyo,tools,top,toray,toshiba,total,tours,town,toyota,toys,trade,trading,training,travel,travelchannel,travelers,travelersinsurance,trust,trv,tube,tui,tunes,tushu,tvs,ubank,ubs,unicom,university,uno,uol,ups,vacations,vana,vanguard,vegas,ventures,verisign,versicherung,vet,viajes,video,vig,viking,villas,vin,vip,virgin,visa,vision,viva,vivo,vlaanderen,vodka,volkswagen,volvo,vote,voting,voto,voyage,vuelos,wales,walmart,walter,wang,wanggou,watch,watches,weather,weatherchannel,webcam,weber,website,wedding,weibo,weir,whoswho,wien,wiki,williamhill,win,windows,wine,winners,wme,wolterskluwer,woodside,work,works,world,wow,wtc,wtf,xbox,xerox,xfinity,xihuan,xin,xn--11b4c3d,xn--1ck2e1b,xn--1qqw23a,xn--30rr7y,xn--3bst00m,xn--3ds443g,xn--3pxu8k,xn--42c2d9a,xn--45q11c,xn--4gbrim,xn--55qw42g,xn--55qx5d,xn--5su34j936bgsg,xn--5tzm5g,xn--6frz82g,xn--6qq986b3xl,xn--80adxhks,xn--80aqecdr1a,xn--80asehdb,xn--80aswg,xn--8y0a063a,xn--9dbq2a,xn--9et52u,xn--9krt00a,xn--b4w605ferd,xn--bck1b9a5dre4c,xn--c1avg,xn--c2br7g,xn--cck2b3b,xn--cckwcxetd,xn--cg4bki,xn--czr694b,xn--czrs0t,xn--czru2d,xn--d1acj3b,xn--eckvdtc9d,xn--efvy88h,xn--fct429k,xn--fhbei,xn--fiq228c5hs,xn--fiq64b,xn--fjq720a,xn--flw351e,xn--fzys8d69uvgm,xn--g2xx48c,xn--gckr3f0f,xn--gk3at1e,xn--hxt814e,xn--i1b6b1a6a2e,xn--imr513n,xn--io0a7i,xn--j1aef,xn--jlq480n2rg,xn--jlq61u9w7b,xn--jvr189m,xn--kcrx77d1x4a,xn--kput3i,xn--mgba3a3ejt,xn--mgba7c0bbn0a,xn--mgbaakc7dvf,xn--mgbab2bd,xn--mgbca7dzdo,xn--mgbi4ecexp,xn--mgbt3dhd,xn--mk1bu44c,xn--mxtq1m,xn--ngbc5azd,xn--ngbe9e0a,xn--ngbrx,xn--nqv7f,xn--nqv7fs00ema,xn--nyqy26a,xn--otu796d,xn--p1acf,xn--pssy2u,xn--q9jyb4c,xn--qcka1pmc,xn--rhqv96g,xn--rovu88b,xn--ses554g,xn--t60b56a,xn--tckwe,xn--tiq49xqyj,xn--unup4y,xn--vermgensberater-ctb,xn--vermgensberatung-pwb,xn--vhquv,xn--vuq861b,xn--w4r85el8fhu5dnra,xn--w4rs40l,xn--xhq521b,xn--zfr164b,xyz,yachts,yahoo,yamaxun,yandex,yodobashi,yoga,yokohama,you,youtube,yun,zappos,zara,zero,zip,zone,zuerich";

  // node_modules/.pnpm/parse-domain@7.0.0/node_modules/parse-domain/serialized-tries/private.js
  init_env();
  var private_default = "ua>cc,inf,ltd,cx,biz,co,pp,v<to>611,oya,rdv,vpnplus,quickconnect>direct<nyan<us>graphox,cloudns,drud,is-by,land-4-sale,stuff-4-sale,enscaled>phx<mircloud,freeddns,golffan,noip,pointto,platterp,de>lib<<com>devcdnaccesso>*<adobeaemcloud>dev>*<<kasserver,amazonaws>compute>*<compute-1>*<us-east-1>dualstack>s3<<elb>*<s3,s3-ap-northeast-1,s3-ap-northeast-2,s3-ap-south-1,s3-ap-southeast-1,s3-ap-southeast-2,s3-ca-central-1,s3-eu-central-1,s3-eu-west-1,s3-eu-west-2,s3-eu-west-3,s3-external-1,s3-fips-us-gov-west-1,s3-sa-east-1,s3-us-gov-west-1,s3-us-east-2,s3-us-west-1,s3-us-west-2,ap-northeast-2>s3,dualstack>s3<s3-website<ap-south-1>s3,dualstack>s3<s3-website<ca-central-1>s3,dualstack>s3<s3-website<eu-central-1>s3,dualstack>s3<s3-website<eu-west-2>s3,dualstack>s3<s3-website<eu-west-3>s3,dualstack>s3<s3-website<us-east-2>s3,dualstack>s3<s3-website<ap-northeast-1>dualstack>s3<<ap-southeast-1>dualstack>s3<<ap-southeast-2>dualstack>s3<<eu-west-1>dualstack>s3<<sa-east-1>dualstack>s3<<s3-website-us-east-1,s3-website-us-west-1,s3-website-us-west-2,s3-website-ap-northeast-1,s3-website-ap-southeast-1,s3-website-ap-southeast-2,s3-website-eu-west-1,s3-website-sa-east-1<elasticbeanstalk>ap-northeast-1,ap-northeast-2,ap-northeast-3,ap-south-1,ap-southeast-1,ap-southeast-2,ca-central-1,eu-central-1,eu-west-1,eu-west-2,eu-west-3,sa-east-1,us-east-1,us-east-2,us-gov-west-1,us-west-1,us-west-2<awsglobalaccelerator,siiites,appspacehosted,appspaceusercontent,on-aptible,myasustor,balena-devices,betainabox,boutir,bplaced,cafjs,br,cn,de,eu,jpn,mex,ru,sa,uk,us,za,ar,hu,kr,no,qc,uy,africa,gr,co,jdevcloud,wpdevcloud,cloudcontrolled,cloudcontrolapp,trycloudflare,customer-oci>*,oci>*<ocp>*<ocs>*<<dattolocal,dattorelay,dattoweb,mydatto,builtwithdark,datadetect>demo,instance<ddns5,drayddns,dreamhosters,mydrobo,dyndns-at-home,dyndns-at-work,dyndns-blog,dyndns-free,dyndns-home,dyndns-ip,dyndns-mail,dyndns-office,dyndns-pics,dyndns-remote,dyndns-server,dyndns-web,dyndns-wiki,dyndns-work,blogdns,cechire,dnsalias,dnsdojo,doesntexist,dontexist,doomdns,dyn-o-saur,dynalias,est-a-la-maison,est-a-la-masion,est-le-patron,est-mon-blogueur,from-ak,from-al,from-ar,from-ca,from-ct,from-dc,from-de,from-fl,from-ga,from-hi,from-ia,from-id,from-il,from-in,from-ks,from-ky,from-ma,from-md,from-mi,from-mn,from-mo,from-ms,from-mt,from-nc,from-nd,from-ne,from-nh,from-nj,from-nm,from-nv,from-oh,from-ok,from-or,from-pa,from-pr,from-ri,from-sc,from-sd,from-tn,from-tx,from-ut,from-va,from-vt,from-wa,from-wi,from-wv,from-wy,getmyip,gotdns,hobby-site,homelinux,homeunix,iamallama,is-a-anarchist,is-a-blogger,is-a-bookkeeper,is-a-bulls-fan,is-a-caterer,is-a-chef,is-a-conservative,is-a-cpa,is-a-cubicle-slave,is-a-democrat,is-a-designer,is-a-doctor,is-a-financialadvisor,is-a-geek,is-a-green,is-a-guru,is-a-hard-worker,is-a-hunter,is-a-landscaper,is-a-lawyer,is-a-liberal,is-a-libertarian,is-a-llama,is-a-musician,is-a-nascarfan,is-a-nurse,is-a-painter,is-a-personaltrainer,is-a-photographer,is-a-player,is-a-republican,is-a-rockstar,is-a-socialist,is-a-student,is-a-teacher,is-a-techie,is-a-therapist,is-an-accountant,is-an-actor,is-an-actress,is-an-anarchist,is-an-artist,is-an-engineer,is-an-entertainer,is-certified,is-gone,is-into-anime,is-into-cars,is-into-cartoons,is-into-games,is-leet,is-not-certified,is-slick,is-uberleet,is-with-theband,isa-geek,isa-hockeynut,issmarterthanyou,likes-pie,likescandy,neat-url,saves-the-whales,selfip,sells-for-less,sells-for-u,servebbs,simple-url,space-to-rent,teaches-yoga,writesthisblog,digitaloceanspaces>*<ddnsfree,ddnsgeek,giize,gleeze,kozow,loseyourip,ooguy,theworkpc,mytuleap,tuleap-partners,evennode>eu-1,eu-2,eu-3,eu-4,us-1,us-2,us-3,us-4<onfabrica,fbsbx>apps<fastly-terrarium,fastvps-server,mydobiss,firebaseapp,fldrv,forgeblocks,framercanvas,freebox-os,freeboxos,freemyip,gentapps,gentlentapis,githubusercontent,0emm>*<appspot>r>*<<codespot,googleapis,googlecode,pagespeedmobilizer,publishproxy,withgoogle,withyoutube,blogspot,awsmppl,herokuapp,herokussl,myravendb,impertrixcdn,impertrix,smushcdn,wphostedmail,wpmucdn,pixolino,amscompute,clicketcloud,dopaas,hidora,hosted-by-previder>paas<hosteur>rag-cloud,rag-cloud-ch<ik-server>jcloud,jcloud-ver-jpc<jelastic>demo<kilatiron,massivegrid>paas<wafaicloud>jed,lon,ryd<joyent>cns>*<<lpusercontent,lmpm>app<linode>members,nodebalancer>*<<linodeobjects>*<linodeusercontent>ip<barsycenter,barsyonline,mazeplay,miniserver,meteorapp>eu<hostedpi,mythic-beasts>customer,caracal,fentiger,lynx,ocelot,oncilla,onza,sphinx,vs,x,yali<nospamproxy>cloud<4u,nfshost,001www,ddnslive,myiphost,blogsyte,ciscofreak,damnserver,ditchyourip,dnsiskinky,dynns,geekgalaxy,health-carereform,homesecuritymac,homesecuritypc,myactivedirectory,mysecuritycamera,net-freaks,onthewifi,point2this,quicksytes,securitytactics,serveexchange,servehumour,servep2p,servesarcasm,stufftoread,unusualperson,workisboring,3utilities,ddnsking,myvnc,servebeer,servecounterstrike,serveftp,servegame,servehalflife,servehttp,serveirc,servemp3,servepics,servequake,observableusercontent>static<orsites,operaunite,authgear-staging,authgearapps,skygearapp,outsystemscloud,ownprovider,pgfog,pagefrontapp,pagexl,paywhirl>*<gotpantheon,platter-app,pleskns,postman-echo,prgmr>xen<pythonanywhere>eu<qualifioapp,qbuser,qa2,dev-myqnapcloud,alpha-myqnapcloud,myqnapcloud,quipelements>*<rackmaze,rhcloud,render>app<onrender,logoip,scrysec,firewall-gateway,myshopblocks,myshopify,shopitsite,1kapp,appchizi,applinzi,sinaapp,vipsinaapp,bounty-full>alpha,beta<try-snowplow,stackhero-network,playstation-cloud,myspreadshop,stdlib>api<temp-dns,dsmynas,familyds,tb-hosting>site<reservd,thingdustdata,bloxcms,townnews-staging,typeform>pro<hk,wafflecell,idnblogger,indowapblog,reserve-online,hotelwithflight,remotewd,wiardweb>pages<woltlab-demo,wpenginepowered>js<wixsite,xnbay>u2,u2-local<yolasite<live>hlx<net>adobeaemcloud,alwaysdata,cloudfront,t3l3p0rt,appudo,atlassian-dev>prod>cdn<<myfritz,onavstack,shopselect,blackbaudcdn,boomla,bplaced,square7,gb,hu,jp,se,uk,in,clickrising,cloudaccess,cdn77-ssl,cdn77>r<feste-ip,knx-server,static-access,cryptonomic>*<dattolocal,mydatto,debian,bitbridge,at-band-camp,blogdns,broke-it,buyshouses,dnsalias,dnsdojo,does-it,dontexist,dynalias,dynathome,endofinternet,from-az,from-co,from-la,from-ny,gets-it,ham-radio-op,homeftp,homeip,homelinux,homeunix,in-the-band,is-a-chef,is-a-geek,isa-geek,kicks-ass,office-on-the,podzone,scrapper-site,selfip,sells-it,servebbs,serveftp,thruhere,webhop,definima,casacam,dynu,dynv6,twmail,ru,channelsdvr>u<fastlylb>map<fastly>freetls,map,prod>a,global<ssl>a,b,global<<edgeapp,flynnhosting,cdn-edges,cloudfunctions,moonscale,in-dsl,in-vpn,ipifony,iobb,cloudjiffy>fra1-de,west1-us<elastx>jls-sto1,jls-sto2,jls-sto3<faststacks,massivegrid>paas>fr-1,lon-1,lon-2,ny-1,ny-2,sg-1<<saveincloud>jelastic,nordeste-idc<scaleforce>j<tsukaeru>jelastic<kinghost,uni5,krellian,barsy,memset,azurewebsites,azure-mobile,cloudapp,azurestaticapps>centralus,eastasia,eastus2,westeurope,westus2<dnsup,hicam,now-dns,ownip,vpndns,eating-organic,mydissent,myeffect,mymediapc,mypsx,mysecuritycamera,nhlfan,no-ip,pgafan,privatizehealthinsurance,bounceme,ddns,redirectme,serveblog,serveminecraft,sytes,cloudycluster,ovh>webpaas>*<hosting>*<<bar0,bar1,bar2,rackmaze,schokokeks,firewall-gateway,seidat,senseering,siteleaf,vps-host>jelastic>atl,njs,ric<<myspreadshop,srcf>soc,user<supabase,dsmynas,familyds,tailscale>beta<ts,torproject>pages<fastblog,reserve-online,community-pro,meinforum,yandexcloud>storage,website<za<page>hlx,hlx3,codeberg,pdns,plesk,prvcy,magnet<pl>beep,ecommerce-shop,shoparena,homesklep,sdscloud,unicloud,krasnik,leczna,lubartow,lublin,poniatowa,swidnik,co,art,gliwice,krakow,poznan,wroc,zakopane,myspreadshop,gda,gdansk,gdynia,med,sopot<ca>barsy,awdev>*<co,blogspot,no-ip,myspreadshop<estate>compute>*<<network>alces>*<co,arvo,azimuth,tlon<org>altervista,amune>tele<pimienta,poivron,potager,sweetpepper,ae,us,certmgr,cdn77>c,rsc<cdn77-secure>origin>ssl<<cloudns,duckdns,tunk,dyndns>go,home<blogdns,blogsite,boldlygoingnowhere,dnsalias,dnsdojo,doesntexist,dontexist,doomdns,dvrdns,dynalias,endofinternet,endoftheinternet,from-me,game-host,gotdns,hobby-site,homedns,homeftp,homelinux,homeunix,is-a-bruinsfan,is-a-candidate,is-a-celticsfan,is-a-chef,is-a-geek,is-a-knight,is-a-linux-user,is-a-patsfan,is-a-soxfan,is-found,is-lost,is-saved,is-very-bad,is-very-evil,is-very-good,is-very-nice,is-very-sweet,isa-geek,kicks-ass,misconfused,podzone,readmyblog,selfip,sellsyourhome,servebbs,serveftp,servegame,stuff-4-sale,webhop,ddnss,accesscam,camdvr,freeddns,mywire,webredirect,eu>al,asso,at,au,be,bg,ca,cd,ch,cn,cy,cz,de,dk,edu,ee,es,fi,fr,gr,hr,hu,ie,il,in,int,is,it,jp,kr,lt,lu,lv,mc,me,mk,mt,my,net,ng,nl,no,nz,paris,pl,pt,q-a,ro,ru,se,si,sk,tr,uk,us<twmail,fedorainfracloud,fedorapeople,fedoraproject>cloud,os>app<stg>os>app<<<freedesktop,hepforge,in-dsl,in-vpn,js,barsy,mayfirst,mozilla-iot,bmoattachments,dynserv,now-dns,cable-modem,collegefan,couchpotatofries,mlbfan,mysecuritycamera,nflfan,read-books,ufcfan,hopto,myftp,no-ip,zapto,httpbin,pubtls,my-firewall,myfirewall,spdns,small-web,dsmynas,familyds,teckids>s3<tuxfamily,diskstation,hk,wmflabs,toolforge,wmcloud,za<cn>com>amazonaws>compute>*<eb>cn-north-1,cn-northwest-1<elb>*<cn-north-1>s3<<<instantcloud<io>apigee,b-data,backplaneapp,banzaicloud>app,backyards>*<<bitbucket,bluebite,boxfuse,browsersafetymark,bigv>uk0<cleverapps,dappnode>dyndns<dedyn,drud,definima,fh-muenster,shw,forgerock>id<ghost,github,gitlab,lolipop,hasura-app,hostyhosting,moonscale>*<beebyte>paas<beebyteapp>sekd1<jele,unispace>cloud-fr1<webthings,loginline,barsy,azurecontainer>*<ngrok,nodeart>stage<nid,pantheonsite,dyn53,pstmn>mock<protonet,qoto,qcx>sys>*<<vaporcloud,vbrplsbx>g<on-k3s>*<on-rio>*<readthedocs,resindevice,resinstaging>devices<hzc,sandcats,shiftcrypto,shiftedit,mo-siemens,lair>apps<stolos>*<spacekit,utwente,s5y>*<edugit,telebit,thingdust>dev>cust,reservd<disrec>cust,reservd<prod>cust<testing>cust,reservd<<tickets,upli,2038,wedeploy,editorx,basicserver,virtualserver<jp>ne>aseinet>user<gehirn<buyshop,fashionstore,handcrafted,kawaiishop,supersale,theshop,usercontent,blogspot<vc>gv>d<0e<eus>party>user<<ws>advisor>*<cloud66,dyndns,mypets<ba>rs,blogspot<cloud>banzai>*<elementor,encoway>eu<statics>*<ravendb,axarnet>es-1<diadem,jelastic>vip<jele,jenv-aruba>aruba>eur>it1<<it1<keliweb>cs<oxa>tn,uk<primetel>uk<reclaim>ca,uk,us<trendhosting>ch,de<jotelulu,kuleuven,linkyard,magentosite>*<perspecta,vapor,on-rancher>*<sensiosite>*<trafficplex,urown,voorloper<ec>base,official<shop>base,hoplix,barsy<la>bnr,c<je>of<ch>square7,blogspot,flow>ae>alp1<appengine<linkyard-cloud,dnsking,gotdns,myspreadshop,firenet>*,svc>*<<12hp,2ix,4lima,lima-city<de>bplaced,square7,com,cosidns>dyn<dynamisches-dns,dnsupdater,internet-dns,l-o-g-i-n,dnshome,fuettertdasnetz,isteingeek,istmein,lebtimnetz,leitungsen,traeumtgerade,ddnss>dyn,dyndns<dyndns1,dyn-ip24,home-webserver>dyn<myhome-server,frusky>*<goip,blogspot,xn--gnstigbestellen-zvb,xn--gnstigliefern-wob,hs-heilbronn>it>pages<<dyn-berlin,in-berlin,in-brb,in-butter,in-dsl,in-vpn,mein-iserv,schulserver,test-iserv,keymachine,git-repos,lcube-server,svn-repos,barsy,logoip,firewall-gateway,my-gateway,my-router,spdns,speedpartner>customer<myspreadshop,taifun-dns,12hp,2ix,4lima,lima-city,dd-dns,dray-dns,draydns,dyn-vpn,dynvpn,mein-vigor,my-vigor,my-wan,syno-ds,synology-diskstation,synology-ds,uberspace>*<virtualuser,virtual-user,community-pro,diskussionsbereich<rs>brendly>shop<blogspot,ua,ox<uk>co>bytemark>dh,vm<blogspot,layershift>j<barsy,barsyonline,retrosnub>cust<nh-serv,no-ip,wellbeingzone,adimo,myspreadshop,gwiddle<conn,copro,hosp,gov>service,homeoffice<pymnt,org>glug,lug,lugs,affinitylottery,raffleentry,weeklylottery<barsy<eu>mycd,cloudns,dogado>jelastic<barsy,wellbeingzone,spdns,transurl>*<diskstation<ac>drr<ai>uwu<co>carrd,crd,otap>*<com>blogspot<leadpages,lpages,mypi,n4t,repl>id<supabase<mp>ju<se>com,blogspot,conf,iopsys,itcouldbewor,myspreadshop,paba>su<<bz>za,gsj<in>web,cloudns,blogspot,barsy,supabase<basketball>aus,nz<am>radio,blogspot,neko,nyaa<fm>radio<group>discourse<team>discourse,jelastic<app>clerk,clerkstage,wnext,platform0,ondigitalocean,edgecompute,fireweb,onflashdrive,framer,run>a<web,hasura,loginline,netlify,developer>*<noop,northflank>*<telebit,vercel,bookonline<dev>lcl>*<lclstage>*<stg>*<stgstage>*<pages,workers,curv,deno,deno-staging,fly,githubpreview,gateway>*<iserv,loginline,mediatech,platter-app,shiftcrypto,vercel,webhare>*<<me>c66,daplie>localhost<edgestack,couk,ukco,filegear,filegear-au,filegear-de,filegear-gb,filegear-ie,filegear-jp,filegear-sg,glitch,ravendb,lohmus,barsy,mcpe,mcdir,soundcast,tcp4,brasilia,ddns,dnsfor,hopto,loginto,noip,webhop,vp4,diskstation,dscloud,i234,myds,synology,tbits,wbq,wedeploy,yombo,nohost<zone>cloud66,hs,triton>*<lima<host>cloudaccess,freesite,fastvps,myfast,tempurl,wpmudev,jele,mircloud,pcloud,half<site>cloudera>*<cyon,fnwk,folionetwork,fastvps,jele,lelux,loginline,barsy,mintere,omniwe,opensocial,platformsh>*<tst>*<byen,srht,novecore<cz>co,realm,e4,blogspot,metacentrum>cloud>*<custom<muni>cloud>flt,usr<<<asia>cloudns<biz>cloudns,jozi,dyndns,for-better,for-more,for-some,for-the,selfip,webhop,orx,mmafan,myftp,no-ip,dscloud<club>cloudns,jele,barsy,pony<cc>cloudns,ftpaccess,game-server,myphotos,scrapping,twmail,csx,fantasyleague,spawn>instances<<info>cloudns,dynamic-dns,dyndns,barrel-of-knowledge,barrell-of-knowledge,for-our,groks-the,groks-this,here-for-more,knowsitall,selfip,webhop,barsy,mayfirst,forumz,nsupdate,dvrcam,ilovecollege,no-ip,dnsupdate,v-info<pro>cloudns,dnstrace>bci<barsy<pw>cloudns,x443<gdn>cnpy<nl>co,hosting-cluster,blogspot,khplay,myspreadshop,transurl>*<cistron,demon<no>co,blogspot,myspreadshop<be>webhosting,blogspot,interhostsolutions>cloud<kuleuven>ezproxy<myspreadshop,transurl>*<<ru>ac,edu,gov,int,mil,test,eurodir,adygeya,bashkiria,bir,cbg,com,dagestan,grozny,kalmykia,kustanai,marine,mordovia,msk,mytis,nalchik,nov,pyatigorsk,spb,vladikavkaz,vladimir,blogspot,na4u,mircloud,regruhosting>jelastic<myjino>hosting>*<landing>*<spectrum>*<vps>*<<cldmail>hb<mcdir>vps<mcpre,net,org,pp,lk3,ras<is>cupcake,blogspot<link>cyon,mypep,dweb>*<<dk>biz,co,firm,reg,store,blogspot,myspreadshop<earth>dapps>*,bzz>*<<<id>my>rss>*<<flap,co>blogspot<forte,bloger,wblog<solutions>diher>*<<th>online,shop<sh>bip,hashbang,platform>bc,ent,eu,us<now,vxl,wedeploy<fi>dy,blogspot,xn--hkkinen-5wa,iki,cloudplatform>fi<datacenter>demo,paas<myspreadshop<tv>dyndns,better-than,on-the-web,worse-than<cx>ath,info<name>her>forgot<his>forgot<<nu>merseine,mine,shacknet,enterprisecloud<rocks>myddns,lima-city,webspace<xyz>blogsite,localzone,crafting,zapto,telebit>*<<online>eero,eero-stage,barsy<cool>elementor,de<fr>en-root,fbx-os,fbxos,freebox-os,freeboxos,blogspot,goupile,on-web,chirurgiens-dentistes-en-france,myspreadshop,ynh<one>onred>staging<for,under,service,homelink<tw>com>mymailer<url,blogspot<su>abkhazia,adygeya,aktyubinsk,arkhangelsk,armenia,ashgabad,azerbaijan,balashov,bashkiria,bryansk,bukhara,chimkent,dagestan,east-kazakhstan,exnet,georgia,grozny,ivanovo,jambyl,kalmykia,kaluga,karacol,karaganda,karelia,khakassia,krasnodar,kurgan,kustanai,lenug,mangyshlak,mordovia,msk,murmansk,nalchik,navoi,north-kazakhstan,nov,obninsk,penza,pokrovsk,sochi,spb,tashkent,termez,togliatti,troitsk,tselinograd,tula,tuva,vladikavkaz,vladimir,vologda<space>myfast,uber,xs4all<il>co>ravpage,blogspot,tabitorder<<at>funkfeuer>wien<futurecms>*,ex>*<in>*<<futurehosting,futuremailing,ortsinfo>ex>*<kunden>*<<co>blogspot<biz,info,priv,myspreadshop,12hp,2ix,4lima,lima-city<ms>lab,minisite<si>gitapp,gitpage,blogspot<community>nog,ravendb,myforum<ro>co,shop,blogspot,barsy<digital>cloudapps>london<<im>ro<goog>cloud,translate,usercontent>*<<ae>blogspot<al>blogspot<bg>blogspot,barsy<bj>blogspot<cf>blogspot<cl>blogspot<ke>co>blogspot<<nz>co>blogspot<<za>co>blogspot<<ar>com>blogspot<<au>com>blogspot,cloudlets>mel<myspreadshop<<br>com>blogspot,virtualcloud>scale>users<<<leg>ac,al,am,ap,ba,ce,df,es,go,ma,mg,ms,mt,pa,pb,pe,pi,pr,rj,rn,ro,rr,rs,sc,se,sp,to<<by>com>blogspot<mycloud,mediatech<cy>com>blogspot,scaleforce>j<<<ee>com>blogspot<<eg>com>blogspot<<es>com>blogspot<myspreadshop<mt>com>blogspot<<ng>com>blogspot<col,firm,gen,ltd,ngo<tr>com>blogspot<<uy>com>blogspot<<cv>blogspot<gr>blogspot<hk>blogspot,secaas,ltd,inc<hr>blogspot,free<hu>blogspot<ie>blogspot,myspreadshop<it>blogspot,neen>jc<tim>open>jelastic>cloud<<<16-b,32-b,64-b,myspreadshop,syncloud<kr>blogspot<li>blogspot,caa<lt>blogspot<lu>blogspot<md>blogspot,at,de,jp,to<mk>blogspot<mr>blogspot<mx>blogspot<my>blogspot<pe>blogspot<pt>blogspot<qa>blogspot<re>blogspot<sg>blogspot,enscaled<sk>blogspot<sn>blogspot<td>blogspot<ug>blogspot<vn>blogspot<ci>fin,nl<run>hs,development,ravendb,servers,code>*<repl<gl>biz,xx<scot>edu,gov>service<<so>sch<yt>org<kz>jcloud,kazteleport>upaas<<tn>orangecloud<gg>kaas,cya,panel>daemon<<systems>knightpoint<events>koobin,co<krd>co,edu<business>co<education>co<financial>co<place>co<technology>co<bs>we<services>loginline<menu>barsy<mobi>barsy,dscloud<pub>barsy<support>barsy<vu>cn,blog,dev,me<health>hra<casa>nabu>ui<<fashion>of<london>in,of<marketing>from,with<men>for,repair<mom>and,for<sale>for<win>that<work>from,to<news>noticeable<top>now-dns,ntdll<ovh>nerdpol<mn>nyc<lol>omg<hosting>opencraft<pm>own<codes>owo>*<<lc>oy<bn>co<today>prequalifyme<builders>cloudsite<edu>rit>git-pages<<xn--p1acf>xn--90amc,xn--j1aef,xn--j1ael8b,xn--h1ahn,xn--j1adp,xn--c1avg,xn--80aaa0cvac,xn--h1aliz,xn--90a1af,xn--41a<store>sellfy,shopware,storebase<land>static>dev,sites<<farm>storj<pictures>1337<rip>clan<management>router<ax>be,cat,es,eu,gg,mc,us,xy<gp>app<gt>blog,de,to<gy>be<hn>cc<kg>blog,io,jp,tv,uk,us<ls>de<porn>indie<tc>ch,me,we<vg>at<academy>official<faith>ybo<party>ybo<review>ybo<science>ybo<trade>ybo<st>noho<design>bss";

  // node_modules/.pnpm/parse-domain@7.0.0/node_modules/parse-domain/build/trie/look-up.js
  init_env();

  // node_modules/.pnpm/parse-domain@7.0.0/node_modules/parse-domain/build/trie/characters.js
  init_env();
  var UP = "<";
  var SAME = ",";
  var DOWN = ">";
  var RESET = "|";
  var WILDCARD = "*";
  var EXCEPTION = "!";

  // node_modules/.pnpm/parse-domain@7.0.0/node_modules/parse-domain/build/trie/look-up.js
  var lookUpTldsInTrie = (labels, trie) => {
    const labelsToCheck = labels.slice();
    const tlds = [];
    let node = trie;
    while (labelsToCheck.length !== 0) {
      const label = labelsToCheck.pop();
      const labelLowerCase = label.toLowerCase();
      if (node.children.has(WILDCARD)) {
        if (node.children.has(EXCEPTION + labelLowerCase)) {
          break;
        }
        node = node.children.get(WILDCARD);
      } else {
        if (node.children.has(labelLowerCase) === false) {
          break;
        }
        node = node.children.get(labelLowerCase);
      }
      tlds.unshift(label);
    }
    return tlds;
  };

  // node_modules/.pnpm/parse-domain@7.0.0/node_modules/parse-domain/build/sanitize.js
  init_env();

  // node_modules/.pnpm/is-ip@4.0.0/node_modules/is-ip/index.js
  init_env();

  // node_modules/.pnpm/ip-regex@5.0.0/node_modules/ip-regex/index.js
  init_env();
  var word = "[a-fA-F\\d:]";
  var boundry = (options) => options && options.includeBoundaries ? `(?:(?<=\\s|^)(?=${word})|(?<=${word})(?=\\s|$))` : "";
  var v4 = "(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}";
  var v6segment = "[a-fA-F\\d]{1,4}";
  var v6 = `
(?:
(?:${v6segment}:){7}(?:${v6segment}|:)|                                    // 1:2:3:4:5:6:7::  1:2:3:4:5:6:7:8
(?:${v6segment}:){6}(?:${v4}|:${v6segment}|:)|                             // 1:2:3:4:5:6::    1:2:3:4:5:6::8   1:2:3:4:5:6::8  1:2:3:4:5:6::1.2.3.4
(?:${v6segment}:){5}(?::${v4}|(?::${v6segment}){1,2}|:)|                   // 1:2:3:4:5::      1:2:3:4:5::7:8   1:2:3:4:5::8    1:2:3:4:5::7:1.2.3.4
(?:${v6segment}:){4}(?:(?::${v6segment}){0,1}:${v4}|(?::${v6segment}){1,3}|:)| // 1:2:3:4::        1:2:3:4::6:7:8   1:2:3:4::8      1:2:3:4::6:7:1.2.3.4
(?:${v6segment}:){3}(?:(?::${v6segment}){0,2}:${v4}|(?::${v6segment}){1,4}|:)| // 1:2:3::          1:2:3::5:6:7:8   1:2:3::8        1:2:3::5:6:7:1.2.3.4
(?:${v6segment}:){2}(?:(?::${v6segment}){0,3}:${v4}|(?::${v6segment}){1,5}|:)| // 1:2::            1:2::4:5:6:7:8   1:2::8          1:2::4:5:6:7:1.2.3.4
(?:${v6segment}:){1}(?:(?::${v6segment}){0,4}:${v4}|(?::${v6segment}){1,6}|:)| // 1::              1::3:4:5:6:7:8   1::8            1::3:4:5:6:7:1.2.3.4
(?::(?:(?::${v6segment}){0,5}:${v4}|(?::${v6segment}){1,7}|:))             // ::2:3:4:5:6:7:8  ::2:3:4:5:6:7:8  ::8             ::1.2.3.4
)(?:%[0-9a-zA-Z]{1,})?                                             // %eth0            %1
`.replace(/\s*\/\/.*$/gm, "").replace(/\n/g, "").trim();
  var v46Exact = new RegExp(`(?:^${v4}$)|(?:^${v6}$)`);
  var v4exact = new RegExp(`^${v4}$`);
  var v6exact = new RegExp(`^${v6}$`);
  var ipRegex = (options) => options && options.exact ? v46Exact : new RegExp(`(?:${boundry(options)}${v4}${boundry(options)})|(?:${boundry(options)}${v6}${boundry(options)})`, "g");
  ipRegex.v4 = (options) => options && options.exact ? v4exact : new RegExp(`${boundry(options)}${v4}${boundry(options)}`, "g");
  ipRegex.v6 = (options) => options && options.exact ? v6exact : new RegExp(`${boundry(options)}${v6}${boundry(options)}`, "g");
  var ip_regex_default = ipRegex;

  // node_modules/.pnpm/is-ip@4.0.0/node_modules/is-ip/index.js
  function isIP(string) {
    return ip_regex_default({ exact: true }).test(string);
  }
  function isIPv6(string) {
    return ip_regex_default.v6({ exact: true }).test(string);
  }
  function ipVersion(string) {
    return isIP(string) ? isIPv6(string) ? 6 : 4 : void 0;
  }

  // node_modules/.pnpm/parse-domain@7.0.0/node_modules/parse-domain/build/sanitize.js
  var LABEL_SEPARATOR = ".";
  var LABEL_LENGTH_MIN = 1;
  var LABEL_LENGTH_MAX = 63;
  var DOMAIN_LENGTH_MAX = 253;
  var textEncoder2 = new TextEncoder();
  var Validation;
  (function(Validation2) {
    Validation2["Lax"] = "LAX";
    Validation2["Strict"] = "STRICT";
  })(Validation || (Validation = {}));
  var ValidationErrorType;
  (function(ValidationErrorType2) {
    ValidationErrorType2["NoHostname"] = "NO_HOSTNAME";
    ValidationErrorType2["DomainMaxLength"] = "DOMAIN_MAX_LENGTH";
    ValidationErrorType2["LabelMinLength"] = "LABEL_MIN_LENGTH";
    ValidationErrorType2["LabelMaxLength"] = "LABEL_MAX_LENGTH";
    ValidationErrorType2["LabelInvalidCharacter"] = "LABEL_INVALID_CHARACTER";
    ValidationErrorType2["LastLabelInvalid"] = "LAST_LABEL_INVALID";
  })(ValidationErrorType || (ValidationErrorType = {}));
  var SanitizationResultType;
  (function(SanitizationResultType2) {
    SanitizationResultType2["ValidIp"] = "VALID_IP";
    SanitizationResultType2["ValidDomain"] = "VALID_DOMAIN";
    SanitizationResultType2["Error"] = "ERROR";
  })(SanitizationResultType || (SanitizationResultType = {}));
  var createNoHostnameError = (input) => {
    return {
      type: ValidationErrorType.NoHostname,
      message: `The given input ${String(input)} does not look like a hostname.`,
      column: 1
    };
  };
  var createDomainMaxLengthError = (domain, length) => {
    return {
      type: ValidationErrorType.DomainMaxLength,
      message: `Domain "${domain}" is too long. Domain is ${length} octets long but should not be longer than ${DOMAIN_LENGTH_MAX}.`,
      column: length
    };
  };
  var createLabelMinLengthError = (label, column) => {
    const length = label.length;
    return {
      type: ValidationErrorType.LabelMinLength,
      message: `Label "${label}" is too short. Label is ${length} octets long but should be at least ${LABEL_LENGTH_MIN}.`,
      column
    };
  };
  var createLabelMaxLengthError = (label, column) => {
    const length = label.length;
    return {
      type: ValidationErrorType.LabelMaxLength,
      message: `Label "${label}" is too long. Label is ${length} octets long but should not be longer than ${LABEL_LENGTH_MAX}.`,
      column
    };
  };
  var createLabelInvalidCharacterError = (label, invalidCharacter, column) => {
    return {
      type: ValidationErrorType.LabelInvalidCharacter,
      message: `Label "${label}" contains invalid character "${invalidCharacter}" at column ${column}.`,
      column
    };
  };
  var createLastLabelInvalidError = (label, column) => {
    return {
      type: ValidationErrorType.LabelInvalidCharacter,
      message: `Last label "${label}" must not be all-numeric.`,
      column
    };
  };
  var sanitize = (input, options = {}) => {
    if (typeof input !== "string") {
      return {
        type: SanitizationResultType.Error,
        errors: [createNoHostnameError(input)]
      };
    }
    if (input === "") {
      return {
        type: SanitizationResultType.ValidDomain,
        domain: input,
        labels: []
      };
    }
    const inputTrimmedAsIp = input.replace(/^\[|]$/g, "");
    const ipVersionOfInput = ipVersion(inputTrimmedAsIp);
    if (ipVersionOfInput !== void 0) {
      return {
        type: SanitizationResultType.ValidIp,
        ip: inputTrimmedAsIp,
        ipVersion: ipVersionOfInput
      };
    }
    const lastChar = input.charAt(input.length - 1);
    const canonicalInput = lastChar === LABEL_SEPARATOR ? input.slice(0, -1) : input;
    const octets = new TextEncoder().encode(canonicalInput);
    if (octets.length > DOMAIN_LENGTH_MAX) {
      return {
        type: SanitizationResultType.Error,
        errors: [createDomainMaxLengthError(input, octets.length)]
      };
    }
    const labels = canonicalInput.split(LABEL_SEPARATOR);
    const { validation = Validation.Strict } = options;
    const labelValidationErrors = validateLabels[validation](labels);
    if (labelValidationErrors.length > 0) {
      return {
        type: SanitizationResultType.Error,
        errors: labelValidationErrors
      };
    }
    return {
      type: SanitizationResultType.ValidDomain,
      domain: input,
      labels
    };
  };
  var validateLabels = {
    [Validation.Lax]: (labels) => {
      const labelValidationErrors = [];
      let column = 1;
      for (const label of labels) {
        const octets = textEncoder2.encode(label);
        if (octets.length < LABEL_LENGTH_MIN) {
          labelValidationErrors.push(createLabelMinLengthError(label, column));
        } else if (octets.length > LABEL_LENGTH_MAX) {
          labelValidationErrors.push(createLabelMaxLengthError(label, column));
        }
        column += label.length + LABEL_SEPARATOR.length;
      }
      return labelValidationErrors;
    },
    [Validation.Strict]: (labels) => {
      const labelValidationErrors = [];
      let column = 1;
      let lastLabel;
      for (const label of labels) {
        const invalidCharacter = /[^\da-z-]/i.exec(label);
        if (invalidCharacter) {
          labelValidationErrors.push(createLabelInvalidCharacterError(label, invalidCharacter[0], invalidCharacter.index + 1));
        }
        if (label.startsWith("-")) {
          labelValidationErrors.push(createLabelInvalidCharacterError(label, "-", column));
        } else if (label.endsWith("-")) {
          labelValidationErrors.push(createLabelInvalidCharacterError(label, "-", column + label.length - 1));
        }
        if (label.length < LABEL_LENGTH_MIN) {
          labelValidationErrors.push(createLabelMinLengthError(label, column));
        } else if (label.length > LABEL_LENGTH_MAX) {
          labelValidationErrors.push(createLabelMaxLengthError(label, column));
        }
        column += label.length + LABEL_SEPARATOR.length;
        lastLabel = label;
      }
      if (lastLabel !== void 0 && /[a-z-]/iu.test(lastLabel) === false) {
        labelValidationErrors.push(createLastLabelInvalidError(lastLabel, column - lastLabel.length - LABEL_SEPARATOR.length));
      }
      return labelValidationErrors;
    }
  };

  // node_modules/.pnpm/parse-domain@7.0.0/node_modules/parse-domain/build/trie/parse-trie.js
  init_env();

  // node_modules/.pnpm/parse-domain@7.0.0/node_modules/parse-domain/build/trie/nodes.js
  init_env();
  var NODE_TYPE_ROOT = Symbol("ROOT");
  var NODE_TYPE_CHILD = Symbol("CHILD");
  var createRootNode = () => {
    return {
      type: NODE_TYPE_ROOT,
      children: /* @__PURE__ */ new Map()
    };
  };
  var createOrGetChild = (parent, label) => {
    let child = parent.children.get(label);
    if (child === void 0) {
      child = {
        type: NODE_TYPE_CHILD,
        label,
        children: /* @__PURE__ */ new Map(),
        parent
      };
      parent.children.set(label, child);
    }
    return child;
  };

  // node_modules/.pnpm/parse-domain@7.0.0/node_modules/parse-domain/build/trie/parse-trie.js
  var parseTrie = (serializedTrie) => {
    const rootNode = createRootNode();
    let domain = "";
    let parentNode = rootNode;
    let node = rootNode;
    const addDomain = () => {
      node = createOrGetChild(parentNode, domain);
      domain = "";
    };
    for (let i = 0; i < serializedTrie.length; i++) {
      const char = serializedTrie.charAt(i);
      switch (char) {
        case SAME: {
          addDomain();
          continue;
        }
        case DOWN: {
          addDomain();
          parentNode = node;
          continue;
        }
        case RESET: {
          addDomain();
          parentNode = rootNode;
          continue;
        }
        case UP: {
          if (parentNode.type === NODE_TYPE_ROOT) {
            throw new Error(`Error in serialized trie at position ${i}: Cannot go up, current parent node is already root`);
          }
          addDomain();
          parentNode = parentNode.parent;
          continue;
        }
      }
      domain += char;
    }
    if (domain !== "") {
      addDomain();
    }
    return rootNode;
  };

  // node_modules/.pnpm/parse-domain@7.0.0/node_modules/parse-domain/build/parse-domain.js
  var RESERVED_TOP_LEVEL_DOMAINS = [
    "localhost",
    "local",
    "example",
    "invalid",
    "test"
  ];
  var ParseResultType;
  (function(ParseResultType2) {
    ParseResultType2["Invalid"] = "INVALID";
    ParseResultType2["Ip"] = "IP";
    ParseResultType2["Reserved"] = "RESERVED";
    ParseResultType2["NotListed"] = "NOT_LISTED";
    ParseResultType2["Listed"] = "LISTED";
  })(ParseResultType || (ParseResultType = {}));
  var getAtIndex = (array, index) => {
    return index >= 0 && index < array.length ? array[index] : void 0;
  };
  var splitLabelsIntoDomains = (labels, index) => {
    return {
      subDomains: labels.slice(0, Math.max(0, index)),
      domain: getAtIndex(labels, index),
      topLevelDomains: labels.slice(index + 1)
    };
  };
  var parsedIcannTrie;
  var parsedPrivateTrie;
  var parseDomain = (hostname, options) => {
    const sanitizationResult = sanitize(hostname, options);
    if (sanitizationResult.type === SanitizationResultType.Error) {
      return {
        type: ParseResultType.Invalid,
        hostname,
        errors: sanitizationResult.errors
      };
    }
    if (sanitizationResult.type === SanitizationResultType.ValidIp) {
      return {
        type: ParseResultType.Ip,
        hostname: sanitizationResult.ip,
        ipVersion: sanitizationResult.ipVersion
      };
    }
    const { labels, domain } = sanitizationResult;
    if (hostname === "" || RESERVED_TOP_LEVEL_DOMAINS.includes(labels[labels.length - 1])) {
      return {
        type: ParseResultType.Reserved,
        hostname: domain,
        labels
      };
    }
    parsedIcannTrie = parsedIcannTrie !== null && parsedIcannTrie !== void 0 ? parsedIcannTrie : parseTrie(icann_default);
    parsedPrivateTrie = parsedPrivateTrie !== null && parsedPrivateTrie !== void 0 ? parsedPrivateTrie : parseTrie(private_default);
    const icannTlds = lookUpTldsInTrie(labels, parsedIcannTrie);
    const privateTlds = lookUpTldsInTrie(labels, parsedPrivateTrie);
    if (icannTlds.length === 0 && privateTlds.length === 0) {
      return {
        type: ParseResultType.NotListed,
        hostname: domain,
        labels
      };
    }
    const indexOfPublicSuffixDomain = labels.length - Math.max(privateTlds.length, icannTlds.length) - 1;
    const indexOfIcannDomain = labels.length - icannTlds.length - 1;
    return Object.assign({ type: ParseResultType.Listed, hostname: domain, labels, icann: splitLabelsIntoDomains(labels, indexOfIcannDomain) }, splitLabelsIntoDomains(labels, indexOfPublicSuffixDomain));
  };

  // src/routes/components.ts
  init_env();

  // src/routes/api/interface.ts
  init_env();

  // src/routes/components.ts
  var topSel = (wrap2, content) => wrap2 ? html`<span class="topsel">${content}</span>` : content;
  var identicon = (by, size = 11) => {
    const img = new URL(`/identicon/${by}.svg`, location.origin).href;
    return html`<img class="identicon" src="${img}" alt="${by}" width="${size}" height="${size}"/>`;
  };
  var headerEl = ({ op, id }) => html`
  <tr>
    <td id="header" bgcolor="#ee9b33">
      <table border="0" cellpadding="0" cellspacing="0" width="100%" style="padding:2px">
        <tbody>
          <tr>
            <td style="width:18px;padding-right:4px"><a href="https://workers.tools"><picture><source 
                  srcset="darky18.png" media="(prefers-color-scheme: dark)"><img
                  src="y18.png" width="18" height="18"
                  style="border:1px transparent solid;"></picture></a></td>
            <td style="line-height:12pt; height:10px;"><span class="pagetop"><b class="hnname"><a
                    href="news">Worker News</a></b>
                ${topSel(op === "newest" /* NEW */, html`<a href="newest">new</a>`)}
                <!-- | <a href="threads?id=USER">threads</a> -->
                <!-- | <a href="front">past</a> -->
                <!-- | <a href="newcomments">comments</a> -->
                | ${topSel(op === "ask" /* ASK */, html`<a href="ask">ask</a>`)}
                | ${topSel(op === "show" /* SHOW */, html`<a href="show">show</a>`)}
                | ${topSel(op === "jobs" /* JOB */, html`<a href="jobs">jobs</a>`)}
                | ${topSel(op === "best" /* BEST */, html`<a href="best">best</a>`)}
                | <a onclick="popitup(this,event,850,380)" href="https://news.ycombinator.com/submit">submit</a>
                ${op === "shownew" /* SHOW_NEW */ ? html`| <font color="#ffffff">${op}</font>` : ""}
                ${op === "submitted" /* USER */ ? html`| <font color="#ffffff">${id}'s submissions</font>` : ""}
                ${op === "threads" ? html`| <font color="#ffffff">${id}'s comments</font>` : ""}
                ${op === "from" ? html`| <font color="#ffffff">from</font>` : ""}
              </span></td>
            <td style="text-align:right;padding-right:4px;"><span class="pagetop">
                ${null}
            </span></td>
          </tr>
        </tbody>
      </table>
    </td>
  </tr>
`;
  var footerEl = () => html`
  <tr>
    <td id="footer"><img src="s.gif" height="10" width="0">
      <table width="100%" cellspacing="0" cellpadding="1">
        <tbody>
          <tr>
            <td id="border" bgcolor="#ee9b33"></td>
          </tr>
        </tbody>
      </table><br/>
      <center>Made by <a href="/user?id=qwtel">qwtel</a> with <a
          href="https://workers.tools">Worker&nbsp;Tools</a> and <a
          href="https://workers.cloudflare.com">Cloudflare&nbsp;Workers</a>.</center><br/>
      <center><span class="yclinks">YC: 
            <a href="newsguidelines.html">Guidelines</a>
          | <a href="newsfaq.html">FAQ</a>
          <!-- | <a href="lists">Lists</a> -->
          | <a href="https://github.com/HackerNews/API">API</a>
          | <a href="security.html">Security</a>
          | <a href="https://www.ycombinator.com/legal/">Legal</a>
          | <a href="https://www.ycombinator.com/apply/">Apply to YC</a>
          | <a href="mailto:hn@ycombinator.com">Contact YC</a></span><br/><br/>
        <form method="get" action="//hn.algolia.com/">Search:
          <input type="text" name="q" value="" size="17" autocorrect="off" spellcheck="false" autocapitalize="off"
            autocomplete="false">
        </form>
      </center>
    </td>
  </tr>`;
  var _a6, _b2;
  var pageLayout = ({ title, op, id }) => (content) => html(_b2 || (_b2 = __template(['\n  <html lang="en" op="', '">\n  <head>\n    <meta name="referrer" content="origin">\n    <meta name="viewport" content="width=device-width, initial-scale=1.0">\n    <link rel="stylesheet" type="text/css" href="news.css">\n    <link rel="shortcut icon" href="favicon.ico">\n    <link rel="alternate" type="application/rss+xml" title="RSS" href="rss">\n    <title>', `</title>
    <script type="module">(async () => {
      // await navigator.serviceWorker.register('/sw.js')
      for (const reg of await navigator.serviceWorker.getRegistrations()) reg.unregister()
    })()<\/script>
  </head>
  <body>
    <center>
      <table id="hnmain" border="0" cellpadding="0" cellspacing="0" width="85%" bgcolor="#f6f6ef">
        <tbody>
          `, '\n          <tr id="pagespace" title="', '" style="height:10px"></tr>\n          ', "\n          ", '\n        </tbody>\n      </table>\n    </center>\n    <script type="text/javascript" src="hn.js"><\/script>\n    ', "\n  </body>\n  </html>"])), op, title ? `${title} | Worker News` : "Worker News", headerEl({ op, id }), title, content, footerEl(), self.location.hostname === "news.workers.tools" ? html(_a6 || (_a6 = __template(['<script defer data-domain="news.workers.tools" src="https://plausible.io/js/plausible.js"><\/script>']))) : "");

  // src/routes/api/index.ts
  init_env();

  // src/routes/api/rest-api.ts
  init_env();

  // src/routes/api/make-api.ts
  init_env();

  // node_modules/.pnpm/@qwtel+p-queue-browser@6.6.2/node_modules/@qwtel/p-queue-browser/dist/index.js
  init_env();
  var import_p_timeout = __toESM(require_p_timeout());

  // node_modules/.pnpm/@qwtel+p-queue-browser@6.6.2/node_modules/@qwtel/p-queue-browser/dist/priority-queue.js
  init_env();

  // node_modules/.pnpm/@qwtel+p-queue-browser@6.6.2/node_modules/@qwtel/p-queue-browser/dist/lower-bound.js
  init_env();
  function lowerBound(array, value, comparator) {
    let first = 0;
    let count = array.length;
    while (count > 0) {
      const step = Math.trunc(count / 2);
      let it = first + step;
      if (comparator(array[it], value) <= 0) {
        first = ++it;
        count -= step + 1;
      } else {
        count = step;
      }
    }
    return first;
  }

  // node_modules/.pnpm/@qwtel+p-queue-browser@6.6.2/node_modules/@qwtel/p-queue-browser/dist/priority-queue.js
  var PriorityQueue = class {
    constructor() {
      this._queue = [];
    }
    enqueue(run2, options) {
      options = Object.assign({ priority: 0 }, options);
      const element = {
        priority: options.priority,
        run: run2
      };
      if (this.size && this._queue[this.size - 1].priority >= options.priority) {
        this._queue.push(element);
        return;
      }
      const index = lowerBound(this._queue, element, (a, b) => b.priority - a.priority);
      this._queue.splice(index, 0, element);
    }
    dequeue() {
      const item = this._queue.shift();
      return item === null || item === void 0 ? void 0 : item.run;
    }
    filter(options) {
      return this._queue.filter((element) => element.priority === options.priority).map((element) => element.run);
    }
    get size() {
      return this._queue.length;
    }
  };

  // node_modules/.pnpm/@qwtel+p-queue-browser@6.6.2/node_modules/@qwtel/p-queue-browser/dist/index.js
  var empty = () => {
  };
  var timeoutError = new import_p_timeout.TimeoutError();
  var PQueue = class extends EventTarget {
    constructor(options) {
      var _a8, _b3, _c, _d;
      super();
      this._intervalCount = 0;
      this._intervalEnd = 0;
      this._pendingCount = 0;
      this._resolveEmpty = empty;
      this._resolveIdle = empty;
      options = Object.assign({ carryoverConcurrencyCount: false, intervalCap: Number.POSITIVE_INFINITY, interval: 0, concurrency: Number.POSITIVE_INFINITY, autoStart: true, queueClass: PriorityQueue }, options);
      if (!(typeof options.intervalCap === "number" && options.intervalCap >= 1)) {
        throw new TypeError(`Expected \`intervalCap\` to be a number from 1 and up, got \`${(_b3 = (_a8 = options.intervalCap) === null || _a8 === void 0 ? void 0 : _a8.toString()) !== null && _b3 !== void 0 ? _b3 : ""}\` (${typeof options.intervalCap})`);
      }
      if (options.interval === void 0 || !(Number.isFinite(options.interval) && options.interval >= 0)) {
        throw new TypeError(`Expected \`interval\` to be a finite number >= 0, got \`${(_d = (_c = options.interval) === null || _c === void 0 ? void 0 : _c.toString()) !== null && _d !== void 0 ? _d : ""}\` (${typeof options.interval})`);
      }
      this._carryoverConcurrencyCount = options.carryoverConcurrencyCount;
      this._isIntervalIgnored = options.intervalCap === Number.POSITIVE_INFINITY || options.interval === 0;
      this._intervalCap = options.intervalCap;
      this._interval = options.interval;
      this._queue = new options.queueClass();
      this._queueClass = options.queueClass;
      this.concurrency = options.concurrency;
      this._timeout = options.timeout;
      this._throwOnTimeout = options.throwOnTimeout === true;
      this._isPaused = options.autoStart === false;
    }
    addEventListener(a, x4, y) {
      super.addEventListener(a, x4, y);
    }
    removeEventListener(a, b, c2) {
      super.removeEventListener(a, b, c2);
    }
    get _doesIntervalAllowAnother() {
      return this._isIntervalIgnored || this._intervalCount < this._intervalCap;
    }
    get _doesConcurrentAllowAnother() {
      return this._pendingCount < this._concurrency;
    }
    _next() {
      this._pendingCount--;
      this._tryToStartAnother();
      this.dispatchEvent(new Event("next"));
    }
    _resolvePromises() {
      this._resolveEmpty();
      this._resolveEmpty = empty;
      if (this._pendingCount === 0) {
        this._resolveIdle();
        this._resolveIdle = empty;
        this.dispatchEvent(new Event("idle"));
      }
    }
    _onResumeInterval() {
      this._onInterval();
      this._initializeIntervalIfNeeded();
      this._timeoutId = void 0;
    }
    _isIntervalPaused() {
      const now = Date.now();
      if (this._intervalId === void 0) {
        const delay = this._intervalEnd - now;
        if (delay < 0) {
          this._intervalCount = this._carryoverConcurrencyCount ? this._pendingCount : 0;
        } else {
          if (this._timeoutId === void 0) {
            this._timeoutId = setTimeout(() => {
              this._onResumeInterval();
            }, delay);
          }
          return true;
        }
      }
      return false;
    }
    _tryToStartAnother() {
      if (this._queue.size === 0) {
        if (this._intervalId) {
          clearInterval(this._intervalId);
        }
        this._intervalId = void 0;
        this._resolvePromises();
        return false;
      }
      if (!this._isPaused) {
        const canInitializeInterval = !this._isIntervalPaused();
        if (this._doesIntervalAllowAnother && this._doesConcurrentAllowAnother) {
          const job = this._queue.dequeue();
          if (!job) {
            return false;
          }
          this.dispatchEvent(new Event("active"));
          job();
          if (canInitializeInterval) {
            this._initializeIntervalIfNeeded();
          }
          return true;
        }
      }
      return false;
    }
    _initializeIntervalIfNeeded() {
      if (this._isIntervalIgnored || this._intervalId !== void 0) {
        return;
      }
      this._intervalId = setInterval(() => {
        this._onInterval();
      }, this._interval);
      this._intervalEnd = Date.now() + this._interval;
    }
    _onInterval() {
      if (this._intervalCount === 0 && this._pendingCount === 0 && this._intervalId) {
        clearInterval(this._intervalId);
        this._intervalId = void 0;
      }
      this._intervalCount = this._carryoverConcurrencyCount ? this._pendingCount : 0;
      this._processQueue();
    }
    _processQueue() {
      while (this._tryToStartAnother()) {
      }
    }
    get concurrency() {
      return this._concurrency;
    }
    set concurrency(newConcurrency) {
      if (!(typeof newConcurrency === "number" && newConcurrency >= 1)) {
        throw new TypeError(`Expected \`concurrency\` to be a number from 1 and up, got \`${newConcurrency}\` (${typeof newConcurrency})`);
      }
      this._concurrency = newConcurrency;
      this._processQueue();
    }
    async add(fn, options = {}) {
      return new Promise((resolve, reject) => {
        const run2 = async () => {
          this._pendingCount++;
          this._intervalCount++;
          try {
            const operation = this._timeout === void 0 && options.timeout === void 0 ? fn() : (0, import_p_timeout.default)(Promise.resolve(fn()), options.timeout === void 0 ? this._timeout : options.timeout, () => {
              if (options.throwOnTimeout === void 0 ? this._throwOnTimeout : options.throwOnTimeout) {
                reject(timeoutError);
              }
              return void 0;
            });
            resolve(await operation);
          } catch (error) {
            reject(error);
          }
          this._next();
        };
        this._queue.enqueue(run2, options);
        this._tryToStartAnother();
        this.dispatchEvent(new Event("add"));
      });
    }
    async addAll(functions, options) {
      return Promise.all(functions.map(async (function_) => this.add(function_, options)));
    }
    start() {
      if (!this._isPaused) {
        return this;
      }
      this._isPaused = false;
      this._processQueue();
      return this;
    }
    pause() {
      this._isPaused = true;
    }
    clear() {
      this._queue = new this._queueClass();
    }
    async onEmpty() {
      if (this._queue.size === 0) {
        return;
      }
      return new Promise((resolve) => {
        const existingResolve = this._resolveEmpty;
        this._resolveEmpty = () => {
          existingResolve();
          resolve();
        };
      });
    }
    async onIdle() {
      if (this._pendingCount === 0 && this._queue.size === 0) {
        return;
      }
      return new Promise((resolve) => {
        const existingResolve = this._resolveIdle;
        this._resolveIdle = () => {
          existingResolve();
          resolve();
        };
      });
    }
    get size() {
      return this._queue.size;
    }
    sizeBy(options) {
      return this._queue.filter(options).length;
    }
    get pending() {
      return this._pendingCount;
    }
    get isPaused() {
      return this._isPaused;
    }
    get timeout() {
      return this._timeout;
    }
    set timeout(milliseconds) {
      this._timeout = milliseconds;
    }
  };

  // src/routes/api/util.ts
  init_env();

  // node_modules/.pnpm/linkedom@0.14.7/node_modules/linkedom/esm/index.js
  init_env();

  // node_modules/.pnpm/linkedom@0.14.7/node_modules/linkedom/esm/dom/parser.js
  init_env();

  // node_modules/.pnpm/linkedom@0.14.7/node_modules/linkedom/esm/shared/symbols.js
  init_env();
  var CHANGED = Symbol("changed");
  var CLASS_LIST = Symbol("classList");
  var CUSTOM_ELEMENTS = Symbol("CustomElements");
  var CONTENT = Symbol("content");
  var DATASET = Symbol("dataset");
  var DOCTYPE = Symbol("doctype");
  var DOM_PARSER = Symbol("DOMParser");
  var END = Symbol("end");
  var EVENT_TARGET = Symbol("EventTarget");
  var GLOBALS = Symbol("globals");
  var IMAGE = Symbol("image");
  var MIME = Symbol("mime");
  var MUTATION_OBSERVER = Symbol("MutationObserver");
  var NEXT = Symbol("next");
  var OWNER_ELEMENT = Symbol("ownerElement");
  var PREV = Symbol("prev");
  var PRIVATE = Symbol("private");
  var SHEET = Symbol("sheet");
  var START = Symbol("start");
  var STYLE = Symbol("style");
  var UPGRADE = Symbol("upgrade");
  var VALUE = Symbol("value");

  // node_modules/.pnpm/linkedom@0.14.7/node_modules/linkedom/esm/shared/parse-from-string.js
  init_env();
  var HTMLParser2 = __toESM(require_lib7(), 1);

  // node_modules/.pnpm/linkedom@0.14.7/node_modules/linkedom/esm/shared/constants.js
  init_env();
  var NODE_END = -1;
  var ELEMENT_NODE = 1;
  var ATTRIBUTE_NODE = 2;
  var TEXT_NODE = 3;
  var COMMENT_NODE = 8;
  var DOCUMENT_NODE = 9;
  var DOCUMENT_TYPE_NODE = 10;
  var DOCUMENT_FRAGMENT_NODE = 11;
  var SHOW_ALL = -1;
  var SHOW_ELEMENT = 1;
  var SHOW_TEXT = 4;
  var SHOW_COMMENT = 128;
  var DOCUMENT_POSITION_DISCONNECTED = 1;
  var DOCUMENT_POSITION_PRECEDING = 2;
  var DOCUMENT_POSITION_FOLLOWING = 4;
  var DOCUMENT_POSITION_CONTAINS = 8;
  var DOCUMENT_POSITION_CONTAINED_BY = 16;
  var DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC = 32;
  var SVG_NAMESPACE = "http://www.w3.org/2000/svg";

  // node_modules/.pnpm/linkedom@0.14.7/node_modules/linkedom/esm/shared/object.js
  init_env();
  var {
    assign: assign2,
    create,
    defineProperties,
    entries,
    getOwnPropertyDescriptors,
    keys,
    setPrototypeOf
  } = Object;

  // node_modules/.pnpm/linkedom@0.14.7/node_modules/linkedom/esm/shared/utils.js
  init_env();
  var $String = String;
  var getEnd = (node) => node.nodeType === ELEMENT_NODE ? node[END] : node;
  var ignoreCase = ({ ownerDocument }) => ownerDocument[MIME].ignoreCase;
  var knownAdjacent = (prev, next) => {
    prev[NEXT] = next;
    next[PREV] = prev;
  };
  var knownBoundaries = (prev, current, next) => {
    knownAdjacent(prev, current);
    knownAdjacent(getEnd(current), next);
  };
  var knownSegment = (prev, start, end, next) => {
    knownAdjacent(prev, start);
    knownAdjacent(getEnd(end), next);
  };
  var knownSiblings = (prev, current, next) => {
    knownAdjacent(prev, current);
    knownAdjacent(current, next);
  };
  var localCase = ({ localName, ownerDocument }) => {
    return ownerDocument[MIME].ignoreCase ? localName.toUpperCase() : localName;
  };
  var setAdjacent = (prev, next) => {
    if (prev)
      prev[NEXT] = next;
    if (next)
      next[PREV] = prev;
  };

  // node_modules/.pnpm/linkedom@0.14.7/node_modules/linkedom/esm/interface/custom-element-registry.js
  init_env();

  // node_modules/.pnpm/linkedom@0.14.7/node_modules/linkedom/esm/shared/shadow-roots.js
  init_env();
  var shadowRoots = /* @__PURE__ */ new WeakMap();

  // node_modules/.pnpm/linkedom@0.14.7/node_modules/linkedom/esm/interface/custom-element-registry.js
  var reactive = false;
  var Classes = /* @__PURE__ */ new WeakMap();
  var customElements = /* @__PURE__ */ new WeakMap();
  var attributeChangedCallback = (element, attributeName, oldValue, newValue) => {
    if (reactive && customElements.has(element) && element.attributeChangedCallback && element.constructor.observedAttributes.includes(attributeName)) {
      element.attributeChangedCallback(attributeName, oldValue, newValue);
    }
  };
  var createTrigger = (method, isConnected2) => (element) => {
    if (customElements.has(element)) {
      const info = customElements.get(element);
      if (info.connected !== isConnected2 && element.isConnected === isConnected2) {
        info.connected = isConnected2;
        if (method in element)
          element[method]();
      }
    }
  };
  var triggerConnected = createTrigger("connectedCallback", true);
  var connectedCallback = (element) => {
    if (reactive) {
      triggerConnected(element);
      if (shadowRoots.has(element))
        element = shadowRoots.get(element).shadowRoot;
      let { [NEXT]: next, [END]: end } = element;
      while (next !== end) {
        if (next.nodeType === ELEMENT_NODE)
          triggerConnected(next);
        next = next[NEXT];
      }
    }
  };
  var triggerDisconnected = createTrigger("disconnectedCallback", false);
  var disconnectedCallback = (element) => {
    if (reactive) {
      triggerDisconnected(element);
      if (shadowRoots.has(element))
        element = shadowRoots.get(element).shadowRoot;
      let { [NEXT]: next, [END]: end } = element;
      while (next !== end) {
        if (next.nodeType === ELEMENT_NODE)
          triggerDisconnected(next);
        next = next[NEXT];
      }
    }
  };
  var CustomElementRegistry = class {
    constructor(ownerDocument) {
      this.ownerDocument = ownerDocument;
      this.registry = /* @__PURE__ */ new Map();
      this.waiting = /* @__PURE__ */ new Map();
      this.active = false;
    }
    define(localName, Class, options = {}) {
      const { ownerDocument, registry, waiting } = this;
      if (registry.has(localName))
        throw new Error("unable to redefine " + localName);
      if (Classes.has(Class))
        throw new Error("unable to redefine the same class: " + Class);
      this.active = reactive = true;
      const { extends: extend } = options;
      Classes.set(Class, {
        ownerDocument,
        options: { is: extend ? localName : "" },
        localName: extend || localName
      });
      const check = extend ? (element) => {
        return element.localName === extend && element.getAttribute("is") === localName;
      } : (element) => element.localName === localName;
      registry.set(localName, { Class, check });
      if (waiting.has(localName)) {
        for (const resolve of waiting.get(localName))
          resolve(Class);
        waiting.delete(localName);
      }
      ownerDocument.querySelectorAll(extend ? `${extend}[is="${localName}"]` : localName).forEach(this.upgrade, this);
    }
    upgrade(element) {
      if (customElements.has(element))
        return;
      const { ownerDocument, registry } = this;
      const ce = element.getAttribute("is") || element.localName;
      if (registry.has(ce)) {
        const { Class, check } = registry.get(ce);
        if (check(element)) {
          const { attributes, isConnected: isConnected2 } = element;
          for (const attr of attributes)
            element.removeAttributeNode(attr);
          const values = entries(element);
          for (const [key2] of values)
            delete element[key2];
          setPrototypeOf(element, Class.prototype);
          ownerDocument[UPGRADE] = { element, values };
          new Class(ownerDocument, ce);
          customElements.set(element, { connected: isConnected2 });
          for (const attr of attributes)
            element.setAttributeNode(attr);
          if (isConnected2 && element.connectedCallback)
            element.connectedCallback();
        }
      }
    }
    whenDefined(localName) {
      const { registry, waiting } = this;
      return new Promise((resolve) => {
        if (registry.has(localName))
          resolve(registry.get(localName).Class);
        else {
          if (!waiting.has(localName))
            waiting.set(localName, []);
          waiting.get(localName).push(resolve);
        }
      });
    }
    get(localName) {
      const info = this.registry.get(localName);
      return info && info.Class;
    }
  };

  // node_modules/.pnpm/linkedom@0.14.7/node_modules/linkedom/esm/shared/parse-from-string.js
  var { Parser: Parser2 } = HTMLParser2;
  var notParsing = true;
  var append = (self2, node, active) => {
    const end = self2[END];
    node.parentNode = self2;
    knownBoundaries(end[PREV], node, end);
    if (active && node.nodeType === ELEMENT_NODE)
      connectedCallback(node);
    return node;
  };
  var attribute = (element, end, attribute2, value, active) => {
    attribute2[VALUE] = value;
    attribute2.ownerElement = element;
    knownSiblings(end[PREV], attribute2, end);
    if (attribute2.name === "class")
      element.className = value;
    if (active)
      attributeChangedCallback(element, attribute2.name, null, value);
  };
  var parseFromString = (document2, isHTML, markupLanguage) => {
    const { active, registry } = document2[CUSTOM_ELEMENTS];
    let node = document2;
    let ownerSVGElement = null;
    notParsing = false;
    const content = new Parser2({
      onprocessinginstruction(name, data) {
        if (name.toLowerCase() === "!doctype")
          document2.doctype = data.slice(name.length).trim();
      },
      onopentag(name, attributes) {
        let create3 = true;
        if (isHTML) {
          if (ownerSVGElement) {
            node = append(node, document2.createElementNS(SVG_NAMESPACE, name), active);
            node.ownerSVGElement = ownerSVGElement;
            create3 = false;
          } else if (name === "svg" || name === "SVG") {
            ownerSVGElement = document2.createElementNS(SVG_NAMESPACE, name);
            node = append(node, ownerSVGElement, active);
            create3 = false;
          } else if (active) {
            const ce = name.includes("-") ? name : attributes.is || "";
            if (ce && registry.has(ce)) {
              const { Class } = registry.get(ce);
              node = append(node, new Class(), active);
              delete attributes.is;
              create3 = false;
            }
          }
        }
        if (create3)
          node = append(node, document2.createElement(name), false);
        let end = node[END];
        for (const name2 of keys(attributes))
          attribute(node, end, document2.createAttribute(name2), attributes[name2], active);
      },
      oncomment(data) {
        append(node, document2.createComment(data), active);
      },
      ontext(text) {
        append(node, document2.createTextNode(text), active);
      },
      onclosetag() {
        if (isHTML && node === ownerSVGElement)
          ownerSVGElement = null;
        node = node.parentNode;
      }
    }, {
      lowerCaseAttributeNames: false,
      decodeEntities: true,
      xmlMode: !isHTML
    });
    content.write(markupLanguage);
    content.end();
    notParsing = true;
    return document2;
  };

  // node_modules/.pnpm/linkedom@0.14.7/node_modules/linkedom/esm/html/document.js
  init_env();

  // node_modules/.pnpm/linkedom@0.14.7/node_modules/linkedom/esm/shared/register-html-class.js
  init_env();
  var htmlClasses = /* @__PURE__ */ new Map();
  var registerHTMLClass = (names, Class) => {
    for (const name of [].concat(names)) {
      htmlClasses.set(name, Class);
      htmlClasses.set(name.toUpperCase(), Class);
    }
  };

  // node_modules/.pnpm/linkedom@0.14.7/node_modules/linkedom/esm/interface/document.js
  init_env();
  var import_perf_hooks = __toESM(require_perf_hooks(), 1);

  // node_modules/.pnpm/linkedom@0.14.7/node_modules/linkedom/esm/shared/facades.js
  init_env();

  // node_modules/.pnpm/linkedom@0.14.7/node_modules/linkedom/esm/interface/attr.js
  init_env();

  // node_modules/.pnpm/linkedom@0.14.7/node_modules/linkedom/esm/shared/jsdon.js
  init_env();
  var loopSegment = ({ [NEXT]: next, [END]: end }, json) => {
    while (next !== end) {
      switch (next.nodeType) {
        case ATTRIBUTE_NODE:
          attrAsJSON(next, json);
          break;
        case TEXT_NODE:
        case COMMENT_NODE:
          characterDataAsJSON(next, json);
          break;
        case ELEMENT_NODE:
          elementAsJSON(next, json);
          next = getEnd(next);
          break;
        case DOCUMENT_TYPE_NODE:
          documentTypeAsJSON(next, json);
          break;
      }
      next = next[NEXT];
    }
    const last = json.length - 1;
    const value = json[last];
    if (typeof value === "number" && value < 0)
      json[last] += NODE_END;
    else
      json.push(NODE_END);
  };
  var attrAsJSON = (attr, json) => {
    json.push(ATTRIBUTE_NODE, attr.name);
    const value = attr[VALUE].trim();
    if (value)
      json.push(value);
  };
  var characterDataAsJSON = (node, json) => {
    const value = node[VALUE];
    if (value.trim())
      json.push(node.nodeType, value);
  };
  var nonElementAsJSON = (node, json) => {
    json.push(node.nodeType);
    loopSegment(node, json);
  };
  var documentTypeAsJSON = ({ name, publicId, systemId }, json) => {
    json.push(DOCUMENT_TYPE_NODE, name);
    if (publicId)
      json.push(publicId);
    if (systemId)
      json.push(systemId);
  };
  var elementAsJSON = (element, json) => {
    json.push(ELEMENT_NODE, element.localName);
    loopSegment(element, json);
  };

  // node_modules/.pnpm/linkedom@0.14.7/node_modules/linkedom/esm/shared/attributes.js
  init_env();

  // node_modules/.pnpm/linkedom@0.14.7/node_modules/linkedom/esm/interface/mutation-observer.js
  init_env();
  var createRecord = (type, target2, addedNodes, removedNodes, attributeName, oldValue) => ({ type, target: target2, addedNodes, removedNodes, attributeName, oldValue });
  var queueAttribute = (observer, target2, attributeName, attributeFilter, attributeOldValue, oldValue) => {
    if (!attributeFilter || attributeFilter.includes(attributeName)) {
      const { callback, records, scheduled } = observer;
      records.push(createRecord("attributes", target2, [], [], attributeName, attributeOldValue ? oldValue : void 0));
      if (!scheduled) {
        observer.scheduled = true;
        Promise.resolve().then(() => {
          observer.scheduled = false;
          callback(records.splice(0), observer);
        });
      }
    }
  };
  var attributeChangedCallback2 = (element, attributeName, oldValue) => {
    const { ownerDocument } = element;
    const { active, observers } = ownerDocument[MUTATION_OBSERVER];
    if (active) {
      for (const observer of observers) {
        for (const [
          target2,
          {
            childList,
            subtree,
            attributes,
            attributeFilter,
            attributeOldValue
          }
        ] of observer.nodes) {
          if (childList) {
            if (subtree && (target2 === ownerDocument || target2.contains(element)) || !subtree && target2.children.includes(element)) {
              queueAttribute(observer, element, attributeName, attributeFilter, attributeOldValue, oldValue);
              break;
            }
          } else if (attributes && target2 === element) {
            queueAttribute(observer, element, attributeName, attributeFilter, attributeOldValue, oldValue);
            break;
          }
        }
      }
    }
  };
  var moCallback = (element, parentNode) => {
    const { ownerDocument } = element;
    const { active, observers } = ownerDocument[MUTATION_OBSERVER];
    if (active) {
      for (const observer of observers) {
        for (const [target2, { subtree, childList, characterData }] of observer.nodes) {
          if (childList) {
            if (parentNode && (target2 === parentNode || subtree && target2.contains(parentNode)) || !parentNode && (subtree && (target2 === ownerDocument || target2.contains(element)) || !subtree && target2[characterData ? "childNodes" : "children"].includes(element))) {
              const { callback, records, scheduled } = observer;
              records.push(createRecord("childList", target2, parentNode ? [] : [element], parentNode ? [element] : []));
              if (!scheduled) {
                observer.scheduled = true;
                Promise.resolve().then(() => {
                  observer.scheduled = false;
                  callback(records.splice(0), observer);
                });
              }
              break;
            }
          }
        }
      }
    }
  };
  var MutationObserverClass = class {
    constructor(ownerDocument) {
      const observers = /* @__PURE__ */ new Set();
      this.observers = observers;
      this.active = false;
      this.class = class MutationObserver {
        constructor(callback) {
          this.callback = callback;
          this.nodes = /* @__PURE__ */ new Map();
          this.records = [];
          this.scheduled = false;
        }
        disconnect() {
          this.records.splice(0);
          this.nodes.clear();
          observers.delete(this);
          ownerDocument[MUTATION_OBSERVER].active = !!observers.size;
        }
        observe(target2, options = {
          subtree: false,
          childList: false,
          attributes: false,
          attributeFilter: null,
          attributeOldValue: false,
          characterData: false
        }) {
          if ("attributeOldValue" in options || "attributeFilter" in options)
            options.attributes = true;
          options.childList = !!options.childList;
          options.subtree = !!options.subtree;
          this.nodes.set(target2, options);
          observers.add(this);
          ownerDocument[MUTATION_OBSERVER].active = true;
        }
        takeRecords() {
          return this.records.splice(0);
        }
      };
    }
  };

  // node_modules/.pnpm/linkedom@0.14.7/node_modules/linkedom/esm/shared/attributes.js
  var emptyAttributes = /* @__PURE__ */ new Set([
    "allowfullscreen",
    "allowpaymentrequest",
    "async",
    "autofocus",
    "autoplay",
    "checked",
    "class",
    "contenteditable",
    "controls",
    "default",
    "defer",
    "disabled",
    "draggable",
    "formnovalidate",
    "hidden",
    "id",
    "ismap",
    "itemscope",
    "loop",
    "multiple",
    "muted",
    "nomodule",
    "novalidate",
    "open",
    "playsinline",
    "readonly",
    "required",
    "reversed",
    "selected",
    "style",
    "truespeed"
  ]);
  var setAttribute = (element, attribute2) => {
    const { [VALUE]: value, name } = attribute2;
    attribute2.ownerElement = element;
    knownSiblings(element, attribute2, element[NEXT]);
    if (name === "class")
      element.className = value;
    attributeChangedCallback2(element, name, null);
    attributeChangedCallback(element, name, null, value);
  };
  var removeAttribute = (element, attribute2) => {
    const { [VALUE]: value, name } = attribute2;
    knownAdjacent(attribute2[PREV], attribute2[NEXT]);
    attribute2.ownerElement = attribute2[PREV] = attribute2[NEXT] = null;
    if (name === "class")
      element[CLASS_LIST] = null;
    attributeChangedCallback2(element, name, value);
    attributeChangedCallback(element, name, value, null);
  };
  var booleanAttribute = {
    get(element, name) {
      return element.hasAttribute(name);
    },
    set(element, name, value) {
      if (value)
        element.setAttribute(name, "");
      else
        element.removeAttribute(name);
    }
  };
  var numericAttribute = {
    get(element, name) {
      return parseFloat(element.getAttribute(name) || 0);
    },
    set(element, name, value) {
      element.setAttribute(name, value);
    }
  };
  var stringAttribute = {
    get(element, name) {
      return element.getAttribute(name) || "";
    },
    set(element, name, value) {
      element.setAttribute(name, value);
    }
  };

  // node_modules/.pnpm/linkedom@0.14.7/node_modules/linkedom/esm/interface/node.js
  init_env();

  // node_modules/.pnpm/linkedom@0.14.7/node_modules/linkedom/esm/interface/event-target.js
  init_env();
  var wm = /* @__PURE__ */ new WeakMap();
  function dispatch(event, listener) {
    if (typeof listener === "function")
      listener.call(event.target, event);
    else
      listener.handleEvent(event);
    return event._stopImmediatePropagationFlag;
  }
  function invokeListeners({ currentTarget, target: target2 }) {
    const map = wm.get(currentTarget);
    if (map && map.has(this.type)) {
      const listeners = map.get(this.type);
      if (currentTarget === target2) {
        this.eventPhase = this.AT_TARGET;
      } else {
        this.eventPhase = this.BUBBLING_PHASE;
      }
      this.currentTarget = currentTarget;
      this.target = target2;
      for (const [listener, options] of listeners) {
        if (options && options.once)
          listeners.delete(listener);
        if (dispatch(this, listener))
          break;
      }
      delete this.currentTarget;
      delete this.target;
      return this.cancelBubble;
    }
  }
  var DOMEventTarget = class {
    constructor() {
      wm.set(this, /* @__PURE__ */ new Map());
    }
    _getParent() {
      return null;
    }
    addEventListener(type, listener, options) {
      const map = wm.get(this);
      if (!map.has(type))
        map.set(type, /* @__PURE__ */ new Map());
      map.get(type).set(listener, options);
    }
    removeEventListener(type, listener) {
      const map = wm.get(this);
      if (map.has(type)) {
        const listeners = map.get(type);
        if (listeners.delete(listener) && !listeners.size)
          map.delete(type);
      }
    }
    dispatchEvent(event) {
      let node = this;
      event.eventPhase = event.CAPTURING_PHASE;
      while (node) {
        if (node.dispatchEvent)
          event._path.push({ currentTarget: node, target: this });
        node = event.bubbles && node._getParent && node._getParent();
      }
      event._path.some(invokeListeners, event);
      event._path = [];
      event.eventPhase = event.NONE;
      return !event.defaultPrevented;
    }
  };

  // node_modules/.pnpm/linkedom@0.14.7/node_modules/linkedom/esm/interface/node-list.js
  init_env();
  var NodeList = class extends Array {
    item(i) {
      return i < this.length ? this[i] : null;
    }
  };

  // node_modules/.pnpm/linkedom@0.14.7/node_modules/linkedom/esm/interface/node.js
  var getParentNodeCount = ({ parentNode }) => {
    let count = 0;
    while (parentNode) {
      count++;
      parentNode = parentNode.parentNode;
    }
    return count;
  };
  var Node = class extends DOMEventTarget {
    static get ELEMENT_NODE() {
      return ELEMENT_NODE;
    }
    static get ATTRIBUTE_NODE() {
      return ATTRIBUTE_NODE;
    }
    static get TEXT_NODE() {
      return TEXT_NODE;
    }
    static get COMMENT_NODE() {
      return COMMENT_NODE;
    }
    static get DOCUMENT_NODE() {
      return DOCUMENT_NODE;
    }
    static get DOCUMENT_FRAGMENT_NODE() {
      return DOCUMENT_FRAGMENT_NODE;
    }
    static get DOCUMENT_TYPE_NODE() {
      return DOCUMENT_TYPE_NODE;
    }
    constructor(ownerDocument, localName, nodeType) {
      super();
      this.ownerDocument = ownerDocument;
      this.localName = localName;
      this.nodeType = nodeType;
      this.parentNode = null;
      this[NEXT] = null;
      this[PREV] = null;
    }
    get ELEMENT_NODE() {
      return ELEMENT_NODE;
    }
    get ATTRIBUTE_NODE() {
      return ATTRIBUTE_NODE;
    }
    get TEXT_NODE() {
      return TEXT_NODE;
    }
    get COMMENT_NODE() {
      return COMMENT_NODE;
    }
    get DOCUMENT_NODE() {
      return DOCUMENT_NODE;
    }
    get DOCUMENT_FRAGMENT_NODE() {
      return DOCUMENT_FRAGMENT_NODE;
    }
    get DOCUMENT_TYPE_NODE() {
      return DOCUMENT_TYPE_NODE;
    }
    get baseURI() {
      const ownerDocument = this.nodeType === DOCUMENT_NODE ? this : this.ownerDocument;
      if (ownerDocument) {
        const base2 = ownerDocument.querySelector("base");
        if (base2)
          return base2.getAttribute("href");
        const { location: location2 } = ownerDocument.defaultView;
        if (location2)
          return location2.href;
      }
      return null;
    }
    get isConnected() {
      return false;
    }
    get nodeName() {
      return this.localName;
    }
    get parentElement() {
      return null;
    }
    get previousSibling() {
      return null;
    }
    get previousElementSibling() {
      return null;
    }
    get nextSibling() {
      return null;
    }
    get nextElementSibling() {
      return null;
    }
    get childNodes() {
      return new NodeList();
    }
    get firstChild() {
      return null;
    }
    get lastChild() {
      return null;
    }
    get nodeValue() {
      return null;
    }
    set nodeValue(value) {
    }
    get textContent() {
      return null;
    }
    set textContent(value) {
    }
    normalize() {
    }
    cloneNode() {
      return null;
    }
    contains() {
      return false;
    }
    insertBefore(newNode, referenceNode) {
      return newNode;
    }
    appendChild(child) {
      return child;
    }
    replaceChild(newChild, oldChild) {
      return oldChild;
    }
    removeChild(child) {
      return child;
    }
    toString() {
      return "";
    }
    hasChildNodes() {
      return !!this.lastChild;
    }
    isSameNode(node) {
      return this === node;
    }
    compareDocumentPosition(target2) {
      let result = 0;
      if (this !== target2) {
        let self2 = getParentNodeCount(this);
        let other = getParentNodeCount(target2);
        if (self2 < other) {
          result += DOCUMENT_POSITION_FOLLOWING;
          if (this.contains(target2))
            result += DOCUMENT_POSITION_CONTAINED_BY;
        } else if (other < self2) {
          result += DOCUMENT_POSITION_PRECEDING;
          if (target2.contains(this))
            result += DOCUMENT_POSITION_CONTAINS;
        } else if (self2 && other) {
          const { childNodes } = this.parentNode;
          if (childNodes.indexOf(this) < childNodes.indexOf(target2))
            result += DOCUMENT_POSITION_FOLLOWING;
          else
            result += DOCUMENT_POSITION_PRECEDING;
        }
        if (!self2 || !other) {
          result += DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC;
          result += DOCUMENT_POSITION_DISCONNECTED;
        }
      }
      return result;
    }
    isEqualNode(node) {
      if (this === node)
        return true;
      if (this.nodeType === node.nodeType) {
        switch (this.nodeType) {
          case DOCUMENT_NODE:
          case DOCUMENT_FRAGMENT_NODE: {
            const aNodes = this.childNodes;
            const bNodes = node.childNodes;
            return aNodes.length === bNodes.length && aNodes.every((node2, i) => node2.isEqualNode(bNodes[i]));
          }
        }
        return this.toString() === node.toString();
      }
      return false;
    }
    _getParent() {
      return this.parentNode;
    }
    getRootNode() {
      let root = this;
      while (root.parentNode)
        root = root.parentNode;
      return root.nodeType === DOCUMENT_NODE ? root.documentElement : root;
    }
  };

  // node_modules/.pnpm/linkedom@0.14.7/node_modules/linkedom/esm/interface/attr.js
  var QUOTE = /"/g;
  var Attr = class extends Node {
    constructor(ownerDocument, name, value = "") {
      super(ownerDocument, "#attribute", ATTRIBUTE_NODE);
      this.ownerElement = null;
      this.name = $String(name);
      this[VALUE] = $String(value);
      this[CHANGED] = false;
    }
    get value() {
      return this[VALUE];
    }
    set value(newValue) {
      const { [VALUE]: oldValue, name, ownerElement } = this;
      this[VALUE] = $String(newValue);
      this[CHANGED] = true;
      if (ownerElement) {
        attributeChangedCallback2(ownerElement, name, oldValue);
        attributeChangedCallback(ownerElement, name, oldValue, this[VALUE]);
      }
    }
    cloneNode() {
      const { ownerDocument, name, [VALUE]: value } = this;
      return new Attr(ownerDocument, name, value);
    }
    toString() {
      const { name, [VALUE]: value } = this;
      return emptyAttributes.has(name) && !value ? name : `${name}="${value.replace(QUOTE, "&quot;")}"`;
    }
    toJSON() {
      const json = [];
      attrAsJSON(this, json);
      return json;
    }
  };

  // node_modules/.pnpm/linkedom@0.14.7/node_modules/linkedom/esm/interface/character-data.js
  init_env();

  // node_modules/.pnpm/linkedom@0.14.7/node_modules/linkedom/esm/shared/node.js
  init_env();
  var isConnected = ({ ownerDocument, parentNode }) => {
    while (parentNode) {
      if (parentNode === ownerDocument)
        return true;
      parentNode = parentNode.parentNode || parentNode.host;
    }
    return false;
  };
  var parentElement = ({ parentNode }) => {
    if (parentNode) {
      switch (parentNode.nodeType) {
        case DOCUMENT_NODE:
        case DOCUMENT_FRAGMENT_NODE:
          return null;
      }
    }
    return parentNode;
  };
  var previousSibling = ({ [PREV]: prev }) => {
    switch (prev ? prev.nodeType : 0) {
      case NODE_END:
        return prev[START];
      case TEXT_NODE:
      case COMMENT_NODE:
        return prev;
    }
    return null;
  };
  var nextSibling = (node) => {
    const next = getEnd(node)[NEXT];
    return next && (next.nodeType === NODE_END ? null : next);
  };

  // node_modules/.pnpm/linkedom@0.14.7/node_modules/linkedom/esm/mixin/non-document-type-child-node.js
  init_env();
  var nextElementSibling = (node) => {
    let next = nextSibling(node);
    while (next && next.nodeType !== ELEMENT_NODE)
      next = nextSibling(next);
    return next;
  };
  var previousElementSibling = (node) => {
    let prev = previousSibling(node);
    while (prev && prev.nodeType !== ELEMENT_NODE)
      prev = previousSibling(prev);
    return prev;
  };

  // node_modules/.pnpm/linkedom@0.14.7/node_modules/linkedom/esm/mixin/child-node.js
  init_env();
  var asFragment = (ownerDocument, nodes) => {
    const fragment = ownerDocument.createDocumentFragment();
    fragment.append(...nodes);
    return fragment;
  };
  var before = (node, nodes) => {
    const { ownerDocument, parentNode } = node;
    if (parentNode)
      parentNode.insertBefore(asFragment(ownerDocument, nodes), node);
  };
  var after = (node, nodes) => {
    const { ownerDocument, parentNode } = node;
    if (parentNode)
      parentNode.insertBefore(asFragment(ownerDocument, nodes), getEnd(node)[NEXT]);
  };
  var replaceWith = (node, nodes) => {
    const { ownerDocument, parentNode } = node;
    if (parentNode) {
      parentNode.insertBefore(asFragment(ownerDocument, nodes), node);
      node.remove();
    }
  };
  var remove = (prev, current, next) => {
    const { parentNode, nodeType } = current;
    if (prev || next) {
      setAdjacent(prev, next);
      current[PREV] = null;
      getEnd(current)[NEXT] = null;
    }
    if (parentNode) {
      current.parentNode = null;
      moCallback(current, parentNode);
      if (nodeType === ELEMENT_NODE)
        disconnectedCallback(current);
    }
  };

  // node_modules/.pnpm/linkedom@0.14.7/node_modules/linkedom/esm/interface/character-data.js
  var CharacterData = class extends Node {
    constructor(ownerDocument, localName, nodeType, data) {
      super(ownerDocument, localName, nodeType);
      this[VALUE] = $String(data);
    }
    get isConnected() {
      return isConnected(this);
    }
    get parentElement() {
      return parentElement(this);
    }
    get previousSibling() {
      return previousSibling(this);
    }
    get nextSibling() {
      return nextSibling(this);
    }
    get previousElementSibling() {
      return previousElementSibling(this);
    }
    get nextElementSibling() {
      return nextElementSibling(this);
    }
    before(...nodes) {
      before(this, nodes);
    }
    after(...nodes) {
      after(this, nodes);
    }
    replaceWith(...nodes) {
      replaceWith(this, nodes);
    }
    remove() {
      remove(this[PREV], this, this[NEXT]);
    }
    get data() {
      return this[VALUE];
    }
    set data(value) {
      this[VALUE] = $String(value);
      moCallback(this, this.parentNode);
    }
    get nodeValue() {
      return this.data;
    }
    set nodeValue(value) {
      this.data = value;
    }
    get textContent() {
      return this.data;
    }
    set textContent(value) {
      this.data = value;
    }
    get length() {
      return this.data.length;
    }
    substringData(offset, count) {
      return this.data.substr(offset, count);
    }
    appendData(data) {
      this.data += data;
    }
    insertData(offset, data) {
      const { data: t } = this;
      this.data = t.slice(0, offset) + data + t.slice(offset);
    }
    deleteData(offset, count) {
      const { data: t } = this;
      this.data = t.slice(0, offset) + t.slice(offset + count);
    }
    replaceData(offset, count, data) {
      const { data: t } = this;
      this.data = t.slice(0, offset) + data + t.slice(offset + count);
    }
    toJSON() {
      const json = [];
      characterDataAsJSON(this, json);
      return json;
    }
  };

  // node_modules/.pnpm/linkedom@0.14.7/node_modules/linkedom/esm/interface/comment.js
  init_env();
  var Comment2 = class extends CharacterData {
    constructor(ownerDocument, data = "") {
      super(ownerDocument, "#comment", COMMENT_NODE, data);
    }
    cloneNode() {
      const { ownerDocument, [VALUE]: data } = this;
      return new Comment2(ownerDocument, data);
    }
    toString() {
      return `<!--${this[VALUE]}-->`;
    }
  };

  // node_modules/.pnpm/linkedom@0.14.7/node_modules/linkedom/esm/interface/document-fragment.js
  init_env();

  // node_modules/.pnpm/linkedom@0.14.7/node_modules/linkedom/esm/mixin/non-element-parent-node.js
  init_env();

  // node_modules/.pnpm/linkedom@0.14.7/node_modules/linkedom/esm/mixin/parent-node.js
  init_env();

  // node_modules/.pnpm/linkedom@0.14.7/node_modules/linkedom/esm/shared/matches.js
  init_env();
  var CSSselect = __toESM(require_lib9(), 1);
  var { isArray } = Array;
  var isTag = ({ nodeType }) => nodeType === ELEMENT_NODE;
  var existsOne = (test, elements) => elements.some((element) => isTag(element) && (test(element) || existsOne(test, getChildren(element))));
  var getAttributeValue = (element, name) => name === "class" ? element.classList.value : element.getAttribute(name);
  var getChildren = ({ childNodes }) => childNodes;
  var getName = (element) => {
    const { localName } = element;
    return ignoreCase(element) ? localName.toLowerCase() : localName;
  };
  var getParent = ({ parentNode }) => parentNode;
  var getSiblings = (element) => {
    const { parentNode } = element;
    return parentNode ? getChildren(parentNode) : element;
  };
  var getText = (node) => {
    if (isArray(node))
      return node.map(getText).join("");
    if (isTag(node))
      return getText(getChildren(node));
    if (node.nodeType === TEXT_NODE)
      return node.data;
    return "";
  };
  var hasAttrib = (element, name) => element.hasAttribute(name);
  var removeSubsets = (nodes) => {
    let { length } = nodes;
    while (length--) {
      const node = nodes[length];
      if (length && -1 < nodes.lastIndexOf(node, length - 1)) {
        nodes.splice(length, 1);
        continue;
      }
      for (let { parentNode } = node; parentNode; parentNode = parentNode.parentNode) {
        if (nodes.includes(parentNode)) {
          nodes.splice(length, 1);
          break;
        }
      }
    }
    return nodes;
  };
  var findAll = (test, nodes) => {
    const matches2 = [];
    for (const node of nodes) {
      if (isTag(node)) {
        if (test(node))
          matches2.push(node);
        matches2.push(...findAll(test, getChildren(node)));
      }
    }
    return matches2;
  };
  var findOne = (test, nodes) => {
    for (let node of nodes)
      if (test(node) || (node = findOne(test, getChildren(node))))
        return node;
    return null;
  };
  var adapter = {
    isTag,
    existsOne,
    getAttributeValue,
    getChildren,
    getName,
    getParent,
    getSiblings,
    getText,
    hasAttrib,
    removeSubsets,
    findAll,
    findOne
  };
  var prepareMatch = (element, selectors) => {
    return CSSselect.compile(selectors, {
      xmlMode: !ignoreCase(element),
      adapter
    });
  };
  var matches = (element, selectors) => {
    return CSSselect.is(element, selectors, {
      strict: true,
      xmlMode: !ignoreCase(element),
      adapter
    });
  };

  // node_modules/.pnpm/linkedom@0.14.7/node_modules/linkedom/esm/interface/text.js
  init_env();

  // node_modules/.pnpm/linkedom@0.14.7/node_modules/linkedom/esm/shared/text-escaper.js
  init_env();
  var { replace } = "";
  var ca = /[<>&\xA0]/g;
  var esca = {
    "\xA0": "&nbsp;",
    "&": "&amp;",
    "<": "&lt;",
    ">": "&gt;"
  };
  var pe = (m) => esca[m];
  var escape = (es) => replace.call(es, ca, pe);

  // node_modules/.pnpm/linkedom@0.14.7/node_modules/linkedom/esm/interface/text.js
  var Text = class extends CharacterData {
    constructor(ownerDocument, data = "") {
      super(ownerDocument, "#text", TEXT_NODE, data);
    }
    get wholeText() {
      const text = [];
      let { previousSibling: previousSibling2, nextSibling: nextSibling2 } = this;
      while (previousSibling2) {
        if (previousSibling2.nodeType === TEXT_NODE)
          text.unshift(previousSibling2[VALUE]);
        else
          break;
        previousSibling2 = previousSibling2.previousSibling;
      }
      text.push(this[VALUE]);
      while (nextSibling2) {
        if (nextSibling2.nodeType === TEXT_NODE)
          text.push(nextSibling2[VALUE]);
        else
          break;
        nextSibling2 = nextSibling2.nextSibling;
      }
      return text.join("");
    }
    cloneNode() {
      const { ownerDocument, [VALUE]: data } = this;
      return new Text(ownerDocument, data);
    }
    toString() {
      return escape(this[VALUE]);
    }
  };

  // node_modules/.pnpm/linkedom@0.14.7/node_modules/linkedom/esm/mixin/parent-node.js
  var isNode = (node) => node instanceof Node;
  var insert = (parentNode, child, nodes) => {
    const { ownerDocument } = parentNode;
    for (const node of nodes)
      parentNode.insertBefore(isNode(node) ? node : new Text(ownerDocument, node), child);
  };
  var ParentNode = class extends Node {
    constructor(ownerDocument, localName, nodeType) {
      super(ownerDocument, localName, nodeType);
      this[PRIVATE] = null;
      this[NEXT] = this[END] = {
        [NEXT]: null,
        [PREV]: this,
        [START]: this,
        nodeType: NODE_END,
        ownerDocument: this.ownerDocument,
        parentNode: null
      };
    }
    get childNodes() {
      const childNodes = new NodeList();
      let { firstChild } = this;
      while (firstChild) {
        childNodes.push(firstChild);
        firstChild = nextSibling(firstChild);
      }
      return childNodes;
    }
    get children() {
      const children = new NodeList();
      let { firstElementChild } = this;
      while (firstElementChild) {
        children.push(firstElementChild);
        firstElementChild = nextElementSibling(firstElementChild);
      }
      return children;
    }
    get firstChild() {
      let { [NEXT]: next, [END]: end } = this;
      while (next.nodeType === ATTRIBUTE_NODE)
        next = next[NEXT];
      return next === end ? null : next;
    }
    get firstElementChild() {
      let { firstChild } = this;
      while (firstChild) {
        if (firstChild.nodeType === ELEMENT_NODE)
          return firstChild;
        firstChild = nextSibling(firstChild);
      }
      return null;
    }
    get lastChild() {
      const prev = this[END][PREV];
      switch (prev.nodeType) {
        case NODE_END:
          return prev[START];
        case ATTRIBUTE_NODE:
          return null;
      }
      return prev === this ? null : prev;
    }
    get lastElementChild() {
      let { lastChild } = this;
      while (lastChild) {
        if (lastChild.nodeType === ELEMENT_NODE)
          return lastChild;
        lastChild = previousSibling(lastChild);
      }
      return null;
    }
    get childElementCount() {
      return this.children.length;
    }
    prepend(...nodes) {
      insert(this, this.firstChild, nodes);
    }
    append(...nodes) {
      insert(this, this[END], nodes);
    }
    replaceChildren(...nodes) {
      let { [NEXT]: next, [END]: end } = this;
      while (next !== end && next.nodeType === ATTRIBUTE_NODE)
        next = next[NEXT];
      while (next !== end) {
        const after2 = getEnd(next)[NEXT];
        next.remove();
        next = after2;
      }
      if (nodes.length)
        insert(this, end, nodes);
    }
    getElementsByClassName(className) {
      const elements = new NodeList();
      let { [NEXT]: next, [END]: end } = this;
      while (next !== end) {
        if (next.nodeType === ELEMENT_NODE && next.hasAttribute("class") && next.classList.has(className))
          elements.push(next);
        next = next[NEXT];
      }
      return elements;
    }
    getElementsByTagName(tagName15) {
      const elements = new NodeList();
      let { [NEXT]: next, [END]: end } = this;
      while (next !== end) {
        if (next.nodeType === ELEMENT_NODE && (next.localName === tagName15 || localCase(next) === tagName15))
          elements.push(next);
        next = next[NEXT];
      }
      return elements;
    }
    querySelector(selectors) {
      const matches2 = prepareMatch(this, selectors);
      let { [NEXT]: next, [END]: end } = this;
      while (next !== end) {
        if (next.nodeType === ELEMENT_NODE && matches2(next))
          return next;
        next = next[NEXT];
      }
      return null;
    }
    querySelectorAll(selectors) {
      const matches2 = prepareMatch(this, selectors);
      const elements = new NodeList();
      let { [NEXT]: next, [END]: end } = this;
      while (next !== end) {
        if (next.nodeType === ELEMENT_NODE && matches2(next))
          elements.push(next);
        next = next[NEXT];
      }
      return elements;
    }
    appendChild(node) {
      return this.insertBefore(node, this[END]);
    }
    contains(node) {
      let parentNode = node;
      while (parentNode && parentNode !== this)
        parentNode = parentNode.parentNode;
      return parentNode === this;
    }
    insertBefore(node, before2 = null) {
      if (node === before2)
        return node;
      if (node === this)
        throw new Error("unable to append a node to itself");
      const next = before2 || this[END];
      switch (node.nodeType) {
        case ELEMENT_NODE:
          node.remove();
          node.parentNode = this;
          knownBoundaries(next[PREV], node, next);
          moCallback(node, null);
          connectedCallback(node);
          break;
        case DOCUMENT_FRAGMENT_NODE: {
          let { [PRIVATE]: parentNode, firstChild, lastChild } = node;
          if (firstChild) {
            knownSegment(next[PREV], firstChild, lastChild, next);
            knownAdjacent(node, node[END]);
            if (parentNode)
              parentNode.replaceChildren();
            do {
              firstChild.parentNode = this;
              moCallback(firstChild, null);
              if (firstChild.nodeType === ELEMENT_NODE)
                connectedCallback(firstChild);
            } while (firstChild !== lastChild && (firstChild = nextSibling(firstChild)));
          }
          break;
        }
        case TEXT_NODE:
        case COMMENT_NODE:
          node.remove();
        default:
          node.parentNode = this;
          knownSiblings(next[PREV], node, next);
          moCallback(node, null);
          break;
      }
      return node;
    }
    normalize() {
      let { [NEXT]: next, [END]: end } = this;
      while (next !== end) {
        const { [NEXT]: $next, [PREV]: $prev, nodeType } = next;
        if (nodeType === TEXT_NODE) {
          if (!next[VALUE])
            next.remove();
          else if ($prev && $prev.nodeType === TEXT_NODE) {
            $prev.textContent += next.textContent;
            next.remove();
          }
        }
        next = $next;
      }
    }
    removeChild(node) {
      if (node.parentNode !== this)
        throw new Error("node is not a child");
      node.remove();
      return node;
    }
    replaceChild(node, replaced) {
      const next = getEnd(replaced)[NEXT];
      replaced.remove();
      this.insertBefore(node, next);
      return replaced;
    }
  };

  // node_modules/.pnpm/linkedom@0.14.7/node_modules/linkedom/esm/mixin/non-element-parent-node.js
  var NonElementParentNode = class extends ParentNode {
    getElementById(id) {
      let { [NEXT]: next, [END]: end } = this;
      while (next !== end) {
        if (next.nodeType === ELEMENT_NODE && next.id === id)
          return next;
        next = next[NEXT];
      }
      return null;
    }
    cloneNode(deep) {
      const { ownerDocument, constructor } = this;
      const nonEPN = new constructor(ownerDocument);
      if (deep) {
        const { [END]: end } = nonEPN;
        for (const node of this.childNodes)
          nonEPN.insertBefore(node.cloneNode(deep), end);
      }
      return nonEPN;
    }
    toString() {
      const { childNodes, localName } = this;
      return `<${localName}>${childNodes.join("")}</${localName}>`;
    }
    toJSON() {
      const json = [];
      nonElementAsJSON(this, json);
      return json;
    }
  };

  // node_modules/.pnpm/linkedom@0.14.7/node_modules/linkedom/esm/interface/document-fragment.js
  var DocumentFragment = class extends NonElementParentNode {
    constructor(ownerDocument) {
      super(ownerDocument, "#document-fragment", DOCUMENT_FRAGMENT_NODE);
    }
  };

  // node_modules/.pnpm/linkedom@0.14.7/node_modules/linkedom/esm/interface/document-type.js
  init_env();
  var DocumentType = class extends Node {
    constructor(ownerDocument, name, publicId = "", systemId = "") {
      super(ownerDocument, "#document-type", DOCUMENT_TYPE_NODE);
      this.name = name;
      this.publicId = publicId;
      this.systemId = systemId;
    }
    cloneNode() {
      const { ownerDocument, name, publicId, systemId } = this;
      return new DocumentType(ownerDocument, name, publicId, systemId);
    }
    toString() {
      const { name, publicId, systemId } = this;
      const hasPublic = 0 < publicId.length;
      const str = [name];
      if (hasPublic)
        str.push("PUBLIC", `"${publicId}"`);
      if (systemId.length) {
        if (!hasPublic)
          str.push("SYSTEM");
        str.push(`"${systemId}"`);
      }
      return `<!DOCTYPE ${str.join(" ")}>`;
    }
    toJSON() {
      const json = [];
      documentTypeAsJSON(this, json);
      return json;
    }
  };

  // node_modules/.pnpm/linkedom@0.14.7/node_modules/linkedom/esm/interface/element.js
  init_env();

  // node_modules/.pnpm/linkedom@0.14.7/node_modules/linkedom/esm/mixin/inner-html.js
  init_env();
  var getInnerHtml = (node) => node.childNodes.join("");
  var setInnerHtml = (node, html2) => {
    const { ownerDocument } = node;
    const { constructor } = ownerDocument;
    const document2 = new constructor();
    document2[CUSTOM_ELEMENTS] = ownerDocument[CUSTOM_ELEMENTS];
    const { childNodes } = parseFromString(document2, ignoreCase(node), html2);
    node.replaceChildren(...childNodes);
  };

  // node_modules/.pnpm/linkedom@0.14.7/node_modules/linkedom/esm/dom/string-map.js
  init_env();

  // node_modules/.pnpm/uhyphen@0.1.0/node_modules/uhyphen/esm/index.js
  init_env();
  var esm_default = (camel) => camel.replace(/(([A-Z0-9])([A-Z0-9][a-z]))|(([a-z])([A-Z]))/g, "$2$5-$3$6").toLowerCase();

  // node_modules/.pnpm/linkedom@0.14.7/node_modules/linkedom/esm/dom/string-map.js
  var refs = /* @__PURE__ */ new WeakMap();
  var key = (name) => `data-${esm_default(name)}`;
  var prop = (name) => name.slice(5).replace(/-([a-z])/g, (_, $1) => $1.toUpperCase());
  var handler2 = {
    get(dataset, name) {
      if (name in dataset)
        return refs.get(dataset).getAttribute(key(name));
    },
    set(dataset, name, value) {
      dataset[name] = value;
      refs.get(dataset).setAttribute(key(name), value);
      return true;
    },
    deleteProperty(dataset, name) {
      if (name in dataset)
        refs.get(dataset).removeAttribute(key(name));
      return delete dataset[name];
    }
  };
  var DOMStringMap = class {
    constructor(ref) {
      for (const { name, value } of ref.attributes) {
        if (/^data-/.test(name))
          this[prop(name)] = value;
      }
      refs.set(this, ref);
      return new Proxy(this, handler2);
    }
  };
  setPrototypeOf(DOMStringMap.prototype, null);

  // node_modules/.pnpm/linkedom@0.14.7/node_modules/linkedom/esm/dom/token-list.js
  init_env();
  var { add } = Set.prototype;
  var addTokens = (self2, tokens) => {
    for (const token of tokens) {
      if (token)
        add.call(self2, token);
    }
  };
  var update = ({ [OWNER_ELEMENT]: ownerElement, value }) => {
    const attribute2 = ownerElement.getAttributeNode("class");
    if (attribute2)
      attribute2.value = value;
    else
      setAttribute(ownerElement, new Attr(ownerElement.ownerDocument, "class", value));
  };
  var DOMTokenList = class extends Set {
    constructor(ownerElement) {
      super();
      this[OWNER_ELEMENT] = ownerElement;
      const attribute2 = ownerElement.getAttributeNode("class");
      if (attribute2)
        addTokens(this, attribute2.value.split(/\s+/));
    }
    get length() {
      return this.size;
    }
    get value() {
      return [...this].join(" ");
    }
    add(...tokens) {
      addTokens(this, tokens);
      update(this);
    }
    contains(token) {
      return this.has(token);
    }
    remove(...tokens) {
      for (const token of tokens)
        this.delete(token);
      update(this);
    }
    toggle(token, force) {
      if (this.has(token)) {
        if (force)
          return true;
        this.delete(token);
        update(this);
      } else if (force || arguments.length === 1) {
        super.add(token);
        update(this);
        return true;
      }
      return false;
    }
    replace(token, newToken) {
      if (this.has(token)) {
        this.delete(token);
        super.add(newToken);
        update(this);
        return true;
      }
      return false;
    }
    supports() {
      return true;
    }
  };

  // node_modules/.pnpm/linkedom@0.14.7/node_modules/linkedom/esm/interface/css-style-declaration.js
  init_env();
  var refs2 = /* @__PURE__ */ new WeakMap();
  var getKeys = (style) => [...style.keys()].filter((key2) => key2 !== PRIVATE);
  var updateKeys = (style) => {
    const attr = refs2.get(style).getAttributeNode("style");
    if (!attr || attr[CHANGED] || style.get(PRIVATE) !== attr) {
      style.clear();
      if (attr) {
        style.set(PRIVATE, attr);
        for (const rule of attr[VALUE].split(/\s*;\s*/)) {
          let [key2, ...rest] = rule.split(":");
          if (rest.length > 0) {
            key2 = key2.trim();
            const value = rest.join(":").trim();
            if (key2 && value)
              style.set(key2, value);
          }
        }
      }
    }
    return attr;
  };
  var handler3 = {
    get(style, name) {
      if (name in prototype)
        return style[name];
      updateKeys(style);
      if (name === "length")
        return getKeys(style).length;
      if (/^\d+$/.test(name))
        return getKeys(style)[name];
      return style.get(esm_default(name));
    },
    set(style, name, value) {
      if (name === "cssText")
        style[name] = value;
      else {
        let attr = updateKeys(style);
        if (value == null)
          style.delete(esm_default(name));
        else
          style.set(esm_default(name), value);
        if (!attr) {
          const element = refs2.get(style);
          attr = element.ownerDocument.createAttribute("style");
          element.setAttributeNode(attr);
          style.set(PRIVATE, attr);
        }
        attr[CHANGED] = false;
        attr[VALUE] = style.toString();
      }
      return true;
    }
  };
  var CSSStyleDeclaration = class extends Map {
    constructor(element) {
      super();
      refs2.set(this, element);
      return new Proxy(this, handler3);
    }
    get cssText() {
      return this.toString();
    }
    set cssText(value) {
      refs2.get(this).setAttribute("style", value);
    }
    getPropertyValue(name) {
      const self2 = this[PRIVATE];
      return handler3.get(self2, name);
    }
    setProperty(name, value) {
      const self2 = this[PRIVATE];
      handler3.set(self2, name, value);
    }
    removeProperty(name) {
      const self2 = this[PRIVATE];
      handler3.set(self2, name, null);
    }
    [Symbol.iterator]() {
      const keys2 = getKeys(this[PRIVATE]);
      const { length } = keys2;
      let i = 0;
      return {
        next() {
          const done = i === length;
          return { done, value: done ? null : keys2[i++] };
        }
      };
    }
    get [PRIVATE]() {
      return this;
    }
    toString() {
      const self2 = this[PRIVATE];
      updateKeys(self2);
      const cssText = [];
      self2.forEach(push, cssText);
      return cssText.join(";");
    }
  };
  var { prototype } = CSSStyleDeclaration;
  function push(value, key2) {
    if (key2 !== PRIVATE)
      this.push(`${key2}:${value}`);
  }

  // node_modules/.pnpm/linkedom@0.14.7/node_modules/linkedom/esm/interface/event.js
  init_env();
  var BUBBLING_PHASE = 3;
  var AT_TARGET = 2;
  var CAPTURING_PHASE = 1;
  var NONE = 0;
  var GlobalEvent = class {
    static get BUBBLING_PHASE() {
      return BUBBLING_PHASE;
    }
    static get AT_TARGET() {
      return AT_TARGET;
    }
    static get CAPTURING_PHASE() {
      return CAPTURING_PHASE;
    }
    static get NONE() {
      return NONE;
    }
    constructor(type, eventInitDict = {}) {
      this.type = type;
      this.bubbles = !!eventInitDict.bubbles;
      this.cancelBubble = false;
      this._stopImmediatePropagationFlag = false;
      this.cancelable = !!eventInitDict.cancelable;
      this.eventPhase = this.NONE;
      this.timeStamp = Date.now();
      this.defaultPrevented = false;
      this.originalTarget = null;
      this.returnValue = null;
      this.srcElement = null;
      this.target = null;
      this._path = [];
    }
    get BUBBLING_PHASE() {
      return BUBBLING_PHASE;
    }
    get AT_TARGET() {
      return AT_TARGET;
    }
    get CAPTURING_PHASE() {
      return CAPTURING_PHASE;
    }
    get NONE() {
      return NONE;
    }
    preventDefault() {
      this.defaultPrevented = true;
    }
    composedPath() {
      return this._path;
    }
    stopPropagation() {
      this.cancelBubble = true;
    }
    stopImmediatePropagation() {
      this.stopPropagation();
      this._stopImmediatePropagationFlag = true;
    }
  };

  // node_modules/.pnpm/linkedom@0.14.7/node_modules/linkedom/esm/interface/named-node-map.js
  init_env();
  var NamedNodeMap = class extends Array {
    constructor(ownerElement) {
      super();
      this.ownerElement = ownerElement;
    }
    getNamedItem(name) {
      return this.ownerElement.getAttributeNode(name);
    }
    setNamedItem(attr) {
      this.ownerElement.setAttributeNode(attr);
      this.unshift(attr);
    }
    removeNamedItem(name) {
      const item = this.getNamedItem(name);
      this.ownerElement.removeAttribute(name);
      this.splice(this.indexOf(item), 1);
    }
    item(index) {
      return index < this.length ? this[index] : null;
    }
    getNamedItemNS(_, name) {
      return this.getNamedItem(name);
    }
    setNamedItemNS(_, attr) {
      return this.setNamedItem(attr);
    }
    removeNamedItemNS(_, name) {
      return this.removeNamedItem(name);
    }
  };

  // node_modules/.pnpm/linkedom@0.14.7/node_modules/linkedom/esm/interface/shadow-root.js
  init_env();
  var ShadowRoot = class extends NonElementParentNode {
    constructor(host) {
      super(host.ownerDocument, "#shadow-root", DOCUMENT_FRAGMENT_NODE);
      this.host = host;
    }
    get innerHTML() {
      return getInnerHtml(this);
    }
    set innerHTML(html2) {
      setInnerHtml(this, html2);
    }
  };

  // node_modules/.pnpm/linkedom@0.14.7/node_modules/linkedom/esm/interface/element.js
  var attributesHandler = {
    get(target2, key2) {
      return key2 in target2 ? target2[key2] : target2.find(({ name }) => name === key2);
    }
  };
  var create2 = (ownerDocument, element, localName) => {
    if ("ownerSVGElement" in element) {
      const svg = ownerDocument.createElementNS(SVG_NAMESPACE, localName);
      svg.ownerSVGElement = element.ownerSVGElement;
      return svg;
    }
    return ownerDocument.createElement(localName);
  };
  var isVoid = ({ localName, ownerDocument }) => {
    return ownerDocument[MIME].voidElements.test(localName);
  };
  var Element2 = class extends ParentNode {
    constructor(ownerDocument, localName) {
      super(ownerDocument, localName, ELEMENT_NODE);
      this[CLASS_LIST] = null;
      this[DATASET] = null;
      this[STYLE] = null;
    }
    get isConnected() {
      return isConnected(this);
    }
    get parentElement() {
      return parentElement(this);
    }
    get previousSibling() {
      return previousSibling(this);
    }
    get nextSibling() {
      return nextSibling(this);
    }
    get previousElementSibling() {
      return previousElementSibling(this);
    }
    get nextElementSibling() {
      return nextElementSibling(this);
    }
    before(...nodes) {
      before(this, nodes);
    }
    after(...nodes) {
      after(this, nodes);
    }
    replaceWith(...nodes) {
      replaceWith(this, nodes);
    }
    remove() {
      remove(this[PREV], this, this[END][NEXT]);
    }
    get id() {
      return stringAttribute.get(this, "id");
    }
    set id(value) {
      stringAttribute.set(this, "id", value);
    }
    get className() {
      return this.classList.value;
    }
    set className(value) {
      const { classList } = this;
      classList.clear();
      classList.add(...value.split(/\s+/));
    }
    get nodeName() {
      return localCase(this);
    }
    get tagName() {
      return localCase(this);
    }
    get classList() {
      return this[CLASS_LIST] || (this[CLASS_LIST] = new DOMTokenList(this));
    }
    get dataset() {
      return this[DATASET] || (this[DATASET] = new DOMStringMap(this));
    }
    get nonce() {
      return stringAttribute.get(this, "nonce");
    }
    set nonce(value) {
      stringAttribute.set(this, "nonce", value);
    }
    get style() {
      return this[STYLE] || (this[STYLE] = new CSSStyleDeclaration(this));
    }
    get tabIndex() {
      return numericAttribute.get(this, "tabindex") || -1;
    }
    set tabIndex(value) {
      numericAttribute.set(this, "tabindex", value);
    }
    get innerText() {
      return this.textContent;
    }
    get textContent() {
      const text = [];
      let { [NEXT]: next, [END]: end } = this;
      while (next !== end) {
        if (next.nodeType === TEXT_NODE)
          text.push(next.textContent);
        next = next[NEXT];
      }
      return text.join("");
    }
    set textContent(text) {
      this.replaceChildren();
      if (text)
        this.appendChild(new Text(this.ownerDocument, text));
    }
    get innerHTML() {
      return getInnerHtml(this);
    }
    set innerHTML(html2) {
      setInnerHtml(this, html2);
    }
    get outerHTML() {
      return this.toString();
    }
    set outerHTML(html2) {
      const template = this.ownerDocument.createElement("");
      template.innerHTML = html2;
      this.replaceWith(...template.childNodes);
    }
    get attributes() {
      const attributes = new NamedNodeMap(this);
      let next = this[NEXT];
      while (next.nodeType === ATTRIBUTE_NODE) {
        attributes.push(next);
        next = next[NEXT];
      }
      return new Proxy(attributes, attributesHandler);
    }
    focus() {
      this.dispatchEvent(new GlobalEvent("focus"));
    }
    getAttribute(name) {
      if (name === "class")
        return this.className;
      const attribute2 = this.getAttributeNode(name);
      return attribute2 && attribute2.value;
    }
    getAttributeNode(name) {
      let next = this[NEXT];
      while (next.nodeType === ATTRIBUTE_NODE) {
        if (next.name === name)
          return next;
        next = next[NEXT];
      }
      return null;
    }
    getAttributeNames() {
      const attributes = new NodeList();
      let next = this[NEXT];
      while (next.nodeType === ATTRIBUTE_NODE) {
        attributes.push(next.name);
        next = next[NEXT];
      }
      return attributes;
    }
    hasAttribute(name) {
      return !!this.getAttributeNode(name);
    }
    hasAttributes() {
      return this[NEXT].nodeType === ATTRIBUTE_NODE;
    }
    removeAttribute(name) {
      if (name === "class" && this[CLASS_LIST])
        this[CLASS_LIST].clear();
      let next = this[NEXT];
      while (next.nodeType === ATTRIBUTE_NODE) {
        if (next.name === name) {
          removeAttribute(this, next);
          return;
        }
        next = next[NEXT];
      }
    }
    removeAttributeNode(attribute2) {
      let next = this[NEXT];
      while (next.nodeType === ATTRIBUTE_NODE) {
        if (next === attribute2) {
          removeAttribute(this, next);
          return;
        }
        next = next[NEXT];
      }
    }
    setAttribute(name, value) {
      if (name === "class")
        this.className = value;
      else {
        const attribute2 = this.getAttributeNode(name);
        if (attribute2)
          attribute2.value = value;
        else
          setAttribute(this, new Attr(this.ownerDocument, name, value));
      }
    }
    setAttributeNode(attribute2) {
      const { name } = attribute2;
      const previously = this.getAttributeNode(name);
      if (previously !== attribute2) {
        if (previously)
          this.removeAttributeNode(previously);
        const { ownerElement } = attribute2;
        if (ownerElement)
          ownerElement.removeAttributeNode(attribute2);
        setAttribute(this, attribute2);
      }
      return previously;
    }
    toggleAttribute(name, force) {
      if (this.hasAttribute(name)) {
        if (!force) {
          this.removeAttribute(name);
          return false;
        }
        return true;
      } else if (force || arguments.length === 1) {
        this.setAttribute(name, "");
        return true;
      }
      return false;
    }
    get shadowRoot() {
      if (shadowRoots.has(this)) {
        const { mode, shadowRoot } = shadowRoots.get(this);
        if (mode === "open")
          return shadowRoot;
      }
      return null;
    }
    attachShadow(init2) {
      if (shadowRoots.has(this))
        throw new Error("operation not supported");
      const shadowRoot = new ShadowRoot(this);
      shadowRoot.append(...this.childNodes);
      shadowRoots.set(this, {
        mode: init2.mode,
        shadowRoot
      });
      return shadowRoot;
    }
    matches(selectors) {
      return matches(this, selectors);
    }
    closest(selectors) {
      let parentElement2 = this;
      const matches2 = prepareMatch(parentElement2, selectors);
      while (parentElement2 && !matches2(parentElement2))
        parentElement2 = parentElement2.parentElement;
      return parentElement2;
    }
    insertAdjacentElement(position3, element) {
      const { parentElement: parentElement2 } = this;
      switch (position3) {
        case "beforebegin":
          if (parentElement2) {
            parentElement2.insertBefore(element, this);
            break;
          }
          return null;
        case "afterbegin":
          this.insertBefore(element, this.firstChild);
          break;
        case "beforeend":
          this.insertBefore(element, null);
          break;
        case "afterend":
          if (parentElement2) {
            parentElement2.insertBefore(element, this.nextSibling);
            break;
          }
          return null;
      }
      return element;
    }
    insertAdjacentHTML(position3, html2) {
      const template = this.ownerDocument.createElement("template");
      template.innerHTML = html2;
      this.insertAdjacentElement(position3, template.content);
    }
    insertAdjacentText(position3, text) {
      const node = this.ownerDocument.createTextNode(text);
      this.insertAdjacentElement(position3, node);
    }
    cloneNode(deep = false) {
      const { ownerDocument, localName } = this;
      const addNext = (next2) => {
        next2.parentNode = parentNode;
        knownAdjacent($next, next2);
        $next = next2;
      };
      const clone = create2(ownerDocument, this, localName);
      let parentNode = clone, $next = clone;
      let { [NEXT]: next, [END]: prev } = this;
      while (next !== prev && (deep || next.nodeType === ATTRIBUTE_NODE)) {
        switch (next.nodeType) {
          case NODE_END:
            knownAdjacent($next, parentNode[END]);
            $next = parentNode[END];
            parentNode = parentNode.parentNode;
            break;
          case ELEMENT_NODE: {
            const node = create2(ownerDocument, next, next.localName);
            addNext(node);
            parentNode = node;
            break;
          }
          case ATTRIBUTE_NODE:
          case TEXT_NODE:
          case COMMENT_NODE:
            addNext(next.cloneNode(deep));
            break;
        }
        next = next[NEXT];
      }
      knownAdjacent($next, clone[END]);
      return clone;
    }
    toString() {
      const out = [];
      const { [END]: end } = this;
      let next = { [NEXT]: this };
      let isOpened = false;
      do {
        next = next[NEXT];
        switch (next.nodeType) {
          case ATTRIBUTE_NODE: {
            const attr = " " + next;
            switch (attr) {
              case " id":
              case " class":
              case " style":
                break;
              default:
                out.push(attr);
            }
            break;
          }
          case NODE_END: {
            const start = next[START];
            if (isOpened) {
              if ("ownerSVGElement" in start)
                out.push(" />");
              else if (isVoid(start))
                out.push(ignoreCase(start) ? ">" : " />");
              else
                out.push(`></${start.localName}>`);
              isOpened = false;
            } else
              out.push(`</${start.localName}>`);
            break;
          }
          case ELEMENT_NODE:
            if (isOpened)
              out.push(">");
            if (next.toString !== this.toString) {
              out.push(next.toString());
              next = next[END];
              isOpened = false;
            } else {
              out.push(`<${next.localName}`);
              isOpened = true;
            }
            break;
          case TEXT_NODE:
          case COMMENT_NODE:
            out.push((isOpened ? ">" : "") + next);
            isOpened = false;
            break;
        }
      } while (next !== end);
      return out.join("");
    }
    toJSON() {
      const json = [];
      elementAsJSON(this, json);
      return json;
    }
    getAttributeNS(_, name) {
      return this.getAttribute(name);
    }
    getElementsByTagNameNS(_, name) {
      return this.getElementsByTagName(name);
    }
    hasAttributeNS(_, name) {
      return this.hasAttribute(name);
    }
    removeAttributeNS(_, name) {
      this.removeAttribute(name);
    }
    setAttributeNS(_, name, value) {
      this.setAttribute(name, value);
    }
    setAttributeNodeNS(attr) {
      return this.setAttributeNode(attr);
    }
  };

  // node_modules/.pnpm/linkedom@0.14.7/node_modules/linkedom/esm/svg/element.js
  init_env();
  var classNames = /* @__PURE__ */ new WeakMap();
  var handler4 = {
    get(target2, name) {
      return target2[name];
    },
    set(target2, name, value) {
      target2[name] = value;
      return true;
    }
  };
  var SVGElement = class extends Element2 {
    constructor(ownerDocument, localName, ownerSVGElement = null) {
      super(ownerDocument, localName);
      this.ownerSVGElement = ownerSVGElement;
    }
    get className() {
      if (!classNames.has(this))
        classNames.set(this, new Proxy({ baseVal: "", animVal: "" }, handler4));
      return classNames.get(this);
    }
    set className(value) {
      const { classList } = this;
      classList.clear();
      classList.add(...value.split(/\s+/));
    }
    getAttribute(name) {
      return name === "class" ? [...this.classList].join(" ") : super.getAttribute(name);
    }
    setAttribute(name, value) {
      if (name === "class")
        this.className = value;
      else if (name === "style") {
        const { className } = this;
        className.baseVal = className.animVal = value;
      }
      super.setAttribute(name, value);
    }
  };

  // node_modules/.pnpm/linkedom@0.14.7/node_modules/linkedom/esm/shared/facades.js
  var illegalConstructor = () => {
    throw new TypeError("Illegal constructor");
  };
  function Attr2() {
    illegalConstructor();
  }
  setPrototypeOf(Attr2, Attr);
  Attr2.prototype = Attr.prototype;
  function CharacterData2() {
    illegalConstructor();
  }
  setPrototypeOf(CharacterData2, CharacterData);
  CharacterData2.prototype = CharacterData.prototype;
  function Comment3() {
    illegalConstructor();
  }
  setPrototypeOf(Comment3, Comment2);
  Comment3.prototype = Comment2.prototype;
  function DocumentFragment2() {
    illegalConstructor();
  }
  setPrototypeOf(DocumentFragment2, DocumentFragment);
  DocumentFragment2.prototype = DocumentFragment.prototype;
  function DocumentType2() {
    illegalConstructor();
  }
  setPrototypeOf(DocumentType2, DocumentType);
  DocumentType2.prototype = DocumentType.prototype;
  function Element3() {
    illegalConstructor();
  }
  setPrototypeOf(Element3, Element2);
  Element3.prototype = Element2.prototype;
  function Node2() {
    illegalConstructor();
  }
  setPrototypeOf(Node2, Node);
  Node2.prototype = Node.prototype;
  function ShadowRoot2() {
    illegalConstructor();
  }
  setPrototypeOf(ShadowRoot2, ShadowRoot);
  ShadowRoot2.prototype = ShadowRoot.prototype;
  function Text2() {
    illegalConstructor();
  }
  setPrototypeOf(Text2, Text);
  Text2.prototype = Text.prototype;
  function SVGElement2() {
    illegalConstructor();
  }
  setPrototypeOf(SVGElement2, SVGElement);
  SVGElement2.prototype = SVGElement.prototype;
  var Facades = {
    Attr: Attr2,
    CharacterData: CharacterData2,
    Comment: Comment3,
    DocumentFragment: DocumentFragment2,
    DocumentType: DocumentType2,
    Element: Element3,
    Node: Node2,
    ShadowRoot: ShadowRoot2,
    Text: Text2,
    SVGElement: SVGElement2
  };

  // node_modules/.pnpm/linkedom@0.14.7/node_modules/linkedom/esm/shared/html-classes.js
  init_env();

  // node_modules/.pnpm/linkedom@0.14.7/node_modules/linkedom/esm/html/element.js
  init_env();
  var Level0 = /* @__PURE__ */ new WeakMap();
  var level0 = {
    get(element, name) {
      return Level0.has(element) && Level0.get(element)[name] || null;
    },
    set(element, name, value) {
      if (!Level0.has(element))
        Level0.set(element, {});
      const handlers = Level0.get(element);
      const type = name.slice(2);
      if (handlers[name])
        element.removeEventListener(type, handlers[name], false);
      if (handlers[name] = value)
        element.addEventListener(type, value, false);
    }
  };
  var HTMLElement = class extends Element2 {
    static get observedAttributes() {
      return [];
    }
    constructor(ownerDocument = null, localName = "") {
      super(ownerDocument, localName);
      const ownerLess = !ownerDocument;
      let options;
      if (ownerLess) {
        const { constructor: Class } = this;
        if (!Classes.has(Class))
          throw new Error("unable to initialize this Custom Element");
        ({ ownerDocument, localName, options } = Classes.get(Class));
      }
      if (ownerDocument[UPGRADE]) {
        const { element, values } = ownerDocument[UPGRADE];
        ownerDocument[UPGRADE] = null;
        for (const [key2, value] of values)
          element[key2] = value;
        return element;
      }
      if (ownerLess) {
        this.ownerDocument = this[END].ownerDocument = ownerDocument;
        this.localName = localName;
        customElements.set(this, { connected: false });
        if (options.is)
          this.setAttribute("is", options.is);
      }
    }
    blur() {
      this.dispatchEvent(new GlobalEvent("blur"));
    }
    click() {
      this.dispatchEvent(new GlobalEvent("click"));
    }
    get accessKeyLabel() {
      const { accessKey } = this;
      return accessKey && `Alt+Shift+${accessKey}`;
    }
    get isContentEditable() {
      return this.hasAttribute("contenteditable");
    }
    get contentEditable() {
      return booleanAttribute.get(this, "contenteditable");
    }
    set contentEditable(value) {
      booleanAttribute.set(this, "contenteditable", value);
    }
    get draggable() {
      return booleanAttribute.get(this, "draggable");
    }
    set draggable(value) {
      booleanAttribute.set(this, "draggable", value);
    }
    get hidden() {
      return booleanAttribute.get(this, "hidden");
    }
    set hidden(value) {
      booleanAttribute.set(this, "hidden", value);
    }
    get spellcheck() {
      return booleanAttribute.get(this, "spellcheck");
    }
    set spellcheck(value) {
      booleanAttribute.set(this, "spellcheck", value);
    }
    get accessKey() {
      return stringAttribute.get(this, "accesskey");
    }
    set accessKey(value) {
      stringAttribute.set(this, "accesskey", value);
    }
    get dir() {
      return stringAttribute.get(this, "dir");
    }
    set dir(value) {
      stringAttribute.set(this, "dir", value);
    }
    get lang() {
      return stringAttribute.get(this, "lang");
    }
    set lang(value) {
      stringAttribute.set(this, "lang", value);
    }
    get title() {
      return stringAttribute.get(this, "title");
    }
    set title(value) {
      stringAttribute.set(this, "title", value);
    }
    get onabort() {
      return level0.get(this, "onabort");
    }
    set onabort(value) {
      level0.set(this, "onabort", value);
    }
    get onblur() {
      return level0.get(this, "onblur");
    }
    set onblur(value) {
      level0.set(this, "onblur", value);
    }
    get oncancel() {
      return level0.get(this, "oncancel");
    }
    set oncancel(value) {
      level0.set(this, "oncancel", value);
    }
    get oncanplay() {
      return level0.get(this, "oncanplay");
    }
    set oncanplay(value) {
      level0.set(this, "oncanplay", value);
    }
    get oncanplaythrough() {
      return level0.get(this, "oncanplaythrough");
    }
    set oncanplaythrough(value) {
      level0.set(this, "oncanplaythrough", value);
    }
    get onchange() {
      return level0.get(this, "onchange");
    }
    set onchange(value) {
      level0.set(this, "onchange", value);
    }
    get onclick() {
      return level0.get(this, "onclick");
    }
    set onclick(value) {
      level0.set(this, "onclick", value);
    }
    get onclose() {
      return level0.get(this, "onclose");
    }
    set onclose(value) {
      level0.set(this, "onclose", value);
    }
    get oncontextmenu() {
      return level0.get(this, "oncontextmenu");
    }
    set oncontextmenu(value) {
      level0.set(this, "oncontextmenu", value);
    }
    get oncuechange() {
      return level0.get(this, "oncuechange");
    }
    set oncuechange(value) {
      level0.set(this, "oncuechange", value);
    }
    get ondblclick() {
      return level0.get(this, "ondblclick");
    }
    set ondblclick(value) {
      level0.set(this, "ondblclick", value);
    }
    get ondrag() {
      return level0.get(this, "ondrag");
    }
    set ondrag(value) {
      level0.set(this, "ondrag", value);
    }
    get ondragend() {
      return level0.get(this, "ondragend");
    }
    set ondragend(value) {
      level0.set(this, "ondragend", value);
    }
    get ondragenter() {
      return level0.get(this, "ondragenter");
    }
    set ondragenter(value) {
      level0.set(this, "ondragenter", value);
    }
    get ondragleave() {
      return level0.get(this, "ondragleave");
    }
    set ondragleave(value) {
      level0.set(this, "ondragleave", value);
    }
    get ondragover() {
      return level0.get(this, "ondragover");
    }
    set ondragover(value) {
      level0.set(this, "ondragover", value);
    }
    get ondragstart() {
      return level0.get(this, "ondragstart");
    }
    set ondragstart(value) {
      level0.set(this, "ondragstart", value);
    }
    get ondrop() {
      return level0.get(this, "ondrop");
    }
    set ondrop(value) {
      level0.set(this, "ondrop", value);
    }
    get ondurationchange() {
      return level0.get(this, "ondurationchange");
    }
    set ondurationchange(value) {
      level0.set(this, "ondurationchange", value);
    }
    get onemptied() {
      return level0.get(this, "onemptied");
    }
    set onemptied(value) {
      level0.set(this, "onemptied", value);
    }
    get onended() {
      return level0.get(this, "onended");
    }
    set onended(value) {
      level0.set(this, "onended", value);
    }
    get onerror() {
      return level0.get(this, "onerror");
    }
    set onerror(value) {
      level0.set(this, "onerror", value);
    }
    get onfocus() {
      return level0.get(this, "onfocus");
    }
    set onfocus(value) {
      level0.set(this, "onfocus", value);
    }
    get oninput() {
      return level0.get(this, "oninput");
    }
    set oninput(value) {
      level0.set(this, "oninput", value);
    }
    get oninvalid() {
      return level0.get(this, "oninvalid");
    }
    set oninvalid(value) {
      level0.set(this, "oninvalid", value);
    }
    get onkeydown() {
      return level0.get(this, "onkeydown");
    }
    set onkeydown(value) {
      level0.set(this, "onkeydown", value);
    }
    get onkeypress() {
      return level0.get(this, "onkeypress");
    }
    set onkeypress(value) {
      level0.set(this, "onkeypress", value);
    }
    get onkeyup() {
      return level0.get(this, "onkeyup");
    }
    set onkeyup(value) {
      level0.set(this, "onkeyup", value);
    }
    get onload() {
      return level0.get(this, "onload");
    }
    set onload(value) {
      level0.set(this, "onload", value);
    }
    get onloadeddata() {
      return level0.get(this, "onloadeddata");
    }
    set onloadeddata(value) {
      level0.set(this, "onloadeddata", value);
    }
    get onloadedmetadata() {
      return level0.get(this, "onloadedmetadata");
    }
    set onloadedmetadata(value) {
      level0.set(this, "onloadedmetadata", value);
    }
    get onloadstart() {
      return level0.get(this, "onloadstart");
    }
    set onloadstart(value) {
      level0.set(this, "onloadstart", value);
    }
    get onmousedown() {
      return level0.get(this, "onmousedown");
    }
    set onmousedown(value) {
      level0.set(this, "onmousedown", value);
    }
    get onmouseenter() {
      return level0.get(this, "onmouseenter");
    }
    set onmouseenter(value) {
      level0.set(this, "onmouseenter", value);
    }
    get onmouseleave() {
      return level0.get(this, "onmouseleave");
    }
    set onmouseleave(value) {
      level0.set(this, "onmouseleave", value);
    }
    get onmousemove() {
      return level0.get(this, "onmousemove");
    }
    set onmousemove(value) {
      level0.set(this, "onmousemove", value);
    }
    get onmouseout() {
      return level0.get(this, "onmouseout");
    }
    set onmouseout(value) {
      level0.set(this, "onmouseout", value);
    }
    get onmouseover() {
      return level0.get(this, "onmouseover");
    }
    set onmouseover(value) {
      level0.set(this, "onmouseover", value);
    }
    get onmouseup() {
      return level0.get(this, "onmouseup");
    }
    set onmouseup(value) {
      level0.set(this, "onmouseup", value);
    }
    get onmousewheel() {
      return level0.get(this, "onmousewheel");
    }
    set onmousewheel(value) {
      level0.set(this, "onmousewheel", value);
    }
    get onpause() {
      return level0.get(this, "onpause");
    }
    set onpause(value) {
      level0.set(this, "onpause", value);
    }
    get onplay() {
      return level0.get(this, "onplay");
    }
    set onplay(value) {
      level0.set(this, "onplay", value);
    }
    get onplaying() {
      return level0.get(this, "onplaying");
    }
    set onplaying(value) {
      level0.set(this, "onplaying", value);
    }
    get onprogress() {
      return level0.get(this, "onprogress");
    }
    set onprogress(value) {
      level0.set(this, "onprogress", value);
    }
    get onratechange() {
      return level0.get(this, "onratechange");
    }
    set onratechange(value) {
      level0.set(this, "onratechange", value);
    }
    get onreset() {
      return level0.get(this, "onreset");
    }
    set onreset(value) {
      level0.set(this, "onreset", value);
    }
    get onresize() {
      return level0.get(this, "onresize");
    }
    set onresize(value) {
      level0.set(this, "onresize", value);
    }
    get onscroll() {
      return level0.get(this, "onscroll");
    }
    set onscroll(value) {
      level0.set(this, "onscroll", value);
    }
    get onseeked() {
      return level0.get(this, "onseeked");
    }
    set onseeked(value) {
      level0.set(this, "onseeked", value);
    }
    get onseeking() {
      return level0.get(this, "onseeking");
    }
    set onseeking(value) {
      level0.set(this, "onseeking", value);
    }
    get onselect() {
      return level0.get(this, "onselect");
    }
    set onselect(value) {
      level0.set(this, "onselect", value);
    }
    get onshow() {
      return level0.get(this, "onshow");
    }
    set onshow(value) {
      level0.set(this, "onshow", value);
    }
    get onstalled() {
      return level0.get(this, "onstalled");
    }
    set onstalled(value) {
      level0.set(this, "onstalled", value);
    }
    get onsubmit() {
      return level0.get(this, "onsubmit");
    }
    set onsubmit(value) {
      level0.set(this, "onsubmit", value);
    }
    get onsuspend() {
      return level0.get(this, "onsuspend");
    }
    set onsuspend(value) {
      level0.set(this, "onsuspend", value);
    }
    get ontimeupdate() {
      return level0.get(this, "ontimeupdate");
    }
    set ontimeupdate(value) {
      level0.set(this, "ontimeupdate", value);
    }
    get ontoggle() {
      return level0.get(this, "ontoggle");
    }
    set ontoggle(value) {
      level0.set(this, "ontoggle", value);
    }
    get onvolumechange() {
      return level0.get(this, "onvolumechange");
    }
    set onvolumechange(value) {
      level0.set(this, "onvolumechange", value);
    }
    get onwaiting() {
      return level0.get(this, "onwaiting");
    }
    set onwaiting(value) {
      level0.set(this, "onwaiting", value);
    }
    get onauxclick() {
      return level0.get(this, "onauxclick");
    }
    set onauxclick(value) {
      level0.set(this, "onauxclick", value);
    }
    get ongotpointercapture() {
      return level0.get(this, "ongotpointercapture");
    }
    set ongotpointercapture(value) {
      level0.set(this, "ongotpointercapture", value);
    }
    get onlostpointercapture() {
      return level0.get(this, "onlostpointercapture");
    }
    set onlostpointercapture(value) {
      level0.set(this, "onlostpointercapture", value);
    }
    get onpointercancel() {
      return level0.get(this, "onpointercancel");
    }
    set onpointercancel(value) {
      level0.set(this, "onpointercancel", value);
    }
    get onpointerdown() {
      return level0.get(this, "onpointerdown");
    }
    set onpointerdown(value) {
      level0.set(this, "onpointerdown", value);
    }
    get onpointerenter() {
      return level0.get(this, "onpointerenter");
    }
    set onpointerenter(value) {
      level0.set(this, "onpointerenter", value);
    }
    get onpointerleave() {
      return level0.get(this, "onpointerleave");
    }
    set onpointerleave(value) {
      level0.set(this, "onpointerleave", value);
    }
    get onpointermove() {
      return level0.get(this, "onpointermove");
    }
    set onpointermove(value) {
      level0.set(this, "onpointermove", value);
    }
    get onpointerout() {
      return level0.get(this, "onpointerout");
    }
    set onpointerout(value) {
      level0.set(this, "onpointerout", value);
    }
    get onpointerover() {
      return level0.get(this, "onpointerover");
    }
    set onpointerover(value) {
      level0.set(this, "onpointerover", value);
    }
    get onpointerup() {
      return level0.get(this, "onpointerup");
    }
    set onpointerup(value) {
      level0.set(this, "onpointerup", value);
    }
  };

  // node_modules/.pnpm/linkedom@0.14.7/node_modules/linkedom/esm/html/template-element.js
  init_env();
  var tagName = "template";
  var HTMLTemplateElement = class extends HTMLElement {
    constructor(ownerDocument) {
      super(ownerDocument, tagName);
      const content = this.ownerDocument.createDocumentFragment();
      (this[CONTENT] = content)[PRIVATE] = this;
    }
    get content() {
      if (this.hasChildNodes() && !this[CONTENT].hasChildNodes()) {
        for (const node of this.childNodes)
          this[CONTENT].appendChild(node.cloneNode(true));
      }
      return this[CONTENT];
    }
  };
  registerHTMLClass(tagName, HTMLTemplateElement);

  // node_modules/.pnpm/linkedom@0.14.7/node_modules/linkedom/esm/html/html-element.js
  init_env();
  var HTMLHtmlElement = class extends HTMLElement {
    constructor(ownerDocument, localName = "html") {
      super(ownerDocument, localName);
    }
  };

  // node_modules/.pnpm/linkedom@0.14.7/node_modules/linkedom/esm/html/script-element.js
  init_env();

  // node_modules/.pnpm/linkedom@0.14.7/node_modules/linkedom/esm/html/text-element.js
  init_env();
  var { toString: toString2 } = HTMLElement.prototype;
  var TextElement = class extends HTMLElement {
    get innerHTML() {
      return this.textContent;
    }
    set innerHTML(html2) {
      this.textContent = html2;
    }
    toString() {
      const outerHTML = toString2.call(this.cloneNode());
      return outerHTML.replace(/></, `>${this.textContent}<`);
    }
  };

  // node_modules/.pnpm/linkedom@0.14.7/node_modules/linkedom/esm/html/script-element.js
  var tagName2 = "script";
  var HTMLScriptElement = class extends TextElement {
    constructor(ownerDocument, localName = tagName2) {
      super(ownerDocument, localName);
    }
  };
  registerHTMLClass(tagName2, HTMLScriptElement);

  // node_modules/.pnpm/linkedom@0.14.7/node_modules/linkedom/esm/html/frame-element.js
  init_env();
  var HTMLFrameElement = class extends HTMLElement {
    constructor(ownerDocument, localName = "frame") {
      super(ownerDocument, localName);
    }
  };

  // node_modules/.pnpm/linkedom@0.14.7/node_modules/linkedom/esm/html/i-frame-element.js
  init_env();
  var HTMLIFrameElement = class extends HTMLElement {
    constructor(ownerDocument, localName = "iframe") {
      super(ownerDocument, localName);
    }
  };

  // node_modules/.pnpm/linkedom@0.14.7/node_modules/linkedom/esm/html/object-element.js
  init_env();
  var HTMLObjectElement = class extends HTMLElement {
    constructor(ownerDocument, localName = "object") {
      super(ownerDocument, localName);
    }
  };

  // node_modules/.pnpm/linkedom@0.14.7/node_modules/linkedom/esm/html/head-element.js
  init_env();
  var HTMLHeadElement = class extends HTMLElement {
    constructor(ownerDocument, localName = "head") {
      super(ownerDocument, localName);
    }
  };

  // node_modules/.pnpm/linkedom@0.14.7/node_modules/linkedom/esm/html/body-element.js
  init_env();
  var HTMLBodyElement = class extends HTMLElement {
    constructor(ownerDocument, localName = "body") {
      super(ownerDocument, localName);
    }
  };

  // node_modules/.pnpm/linkedom@0.14.7/node_modules/linkedom/esm/html/style-element.js
  init_env();
  var import_cssom = __toESM(require_lib10(), 1);
  var tagName3 = "style";
  var HTMLStyleElement = class extends TextElement {
    constructor(ownerDocument, localName = tagName3) {
      super(ownerDocument, localName);
      this[SHEET] = null;
    }
    get sheet() {
      const sheet = this[SHEET];
      if (sheet !== null) {
        return sheet;
      }
      return this[SHEET] = (0, import_cssom.parse)(this.textContent);
    }
    get innerHTML() {
      return super.innerHTML || "";
    }
    set innerHTML(value) {
      super.textContent = value;
      this[SHEET] = null;
    }
    get innerText() {
      return super.innerText || "";
    }
    set innerText(value) {
      super.textContent = value;
      this[SHEET] = null;
    }
    get textContent() {
      return super.textContent || "";
    }
    set textContent(value) {
      super.textContent = value;
      this[SHEET] = null;
    }
  };
  registerHTMLClass(tagName3, HTMLStyleElement);

  // node_modules/.pnpm/linkedom@0.14.7/node_modules/linkedom/esm/html/time-element.js
  init_env();
  var HTMLTimeElement = class extends HTMLElement {
    constructor(ownerDocument, localName = "time") {
      super(ownerDocument, localName);
    }
  };

  // node_modules/.pnpm/linkedom@0.14.7/node_modules/linkedom/esm/html/field-set-element.js
  init_env();
  var HTMLFieldSetElement = class extends HTMLElement {
    constructor(ownerDocument, localName = "fieldset") {
      super(ownerDocument, localName);
    }
  };

  // node_modules/.pnpm/linkedom@0.14.7/node_modules/linkedom/esm/html/embed-element.js
  init_env();
  var HTMLEmbedElement = class extends HTMLElement {
    constructor(ownerDocument, localName = "embed") {
      super(ownerDocument, localName);
    }
  };

  // node_modules/.pnpm/linkedom@0.14.7/node_modules/linkedom/esm/html/hr-element.js
  init_env();
  var HTMLHRElement = class extends HTMLElement {
    constructor(ownerDocument, localName = "hr") {
      super(ownerDocument, localName);
    }
  };

  // node_modules/.pnpm/linkedom@0.14.7/node_modules/linkedom/esm/html/progress-element.js
  init_env();
  var HTMLProgressElement = class extends HTMLElement {
    constructor(ownerDocument, localName = "progress") {
      super(ownerDocument, localName);
    }
  };

  // node_modules/.pnpm/linkedom@0.14.7/node_modules/linkedom/esm/html/paragraph-element.js
  init_env();
  var HTMLParagraphElement = class extends HTMLElement {
    constructor(ownerDocument, localName = "p") {
      super(ownerDocument, localName);
    }
  };

  // node_modules/.pnpm/linkedom@0.14.7/node_modules/linkedom/esm/html/table-element.js
  init_env();
  var HTMLTableElement = class extends HTMLElement {
    constructor(ownerDocument, localName = "table") {
      super(ownerDocument, localName);
    }
  };

  // node_modules/.pnpm/linkedom@0.14.7/node_modules/linkedom/esm/html/frame-set-element.js
  init_env();
  var HTMLFrameSetElement = class extends HTMLElement {
    constructor(ownerDocument, localName = "frameset") {
      super(ownerDocument, localName);
    }
  };

  // node_modules/.pnpm/linkedom@0.14.7/node_modules/linkedom/esm/html/li-element.js
  init_env();
  var HTMLLIElement = class extends HTMLElement {
    constructor(ownerDocument, localName = "li") {
      super(ownerDocument, localName);
    }
  };

  // node_modules/.pnpm/linkedom@0.14.7/node_modules/linkedom/esm/html/base-element.js
  init_env();
  var HTMLBaseElement = class extends HTMLElement {
    constructor(ownerDocument, localName = "base") {
      super(ownerDocument, localName);
    }
  };

  // node_modules/.pnpm/linkedom@0.14.7/node_modules/linkedom/esm/html/data-list-element.js
  init_env();
  var HTMLDataListElement = class extends HTMLElement {
    constructor(ownerDocument, localName = "datalist") {
      super(ownerDocument, localName);
    }
  };

  // node_modules/.pnpm/linkedom@0.14.7/node_modules/linkedom/esm/html/input-element.js
  init_env();
  var tagName4 = "input";
  var HTMLInputElement = class extends HTMLElement {
    constructor(ownerDocument, localName = tagName4) {
      super(ownerDocument, localName);
    }
    get autofocus() {
      return booleanAttribute.get(this, "autofocus") || -1;
    }
    set autofocus(value) {
      booleanAttribute.set(this, "autofocus", value);
    }
    get disabled() {
      return booleanAttribute.get(this, "disabled");
    }
    set disabled(value) {
      booleanAttribute.set(this, "disabled", value);
    }
    get name() {
      return this.getAttribute("name");
    }
    set name(value) {
      this.setAttribute("name", value);
    }
    get placeholder() {
      return this.getAttribute("placeholder");
    }
    set placeholder(value) {
      this.setAttribute("placeholder", value);
    }
    get type() {
      return this.getAttribute("type");
    }
    set type(value) {
      this.setAttribute("type", value);
    }
  };
  registerHTMLClass(tagName4, HTMLInputElement);

  // node_modules/.pnpm/linkedom@0.14.7/node_modules/linkedom/esm/html/param-element.js
  init_env();
  var HTMLParamElement = class extends HTMLElement {
    constructor(ownerDocument, localName = "param") {
      super(ownerDocument, localName);
    }
  };

  // node_modules/.pnpm/linkedom@0.14.7/node_modules/linkedom/esm/html/media-element.js
  init_env();
  var HTMLMediaElement = class extends HTMLElement {
    constructor(ownerDocument, localName = "media") {
      super(ownerDocument, localName);
    }
  };

  // node_modules/.pnpm/linkedom@0.14.7/node_modules/linkedom/esm/html/audio-element.js
  init_env();
  var HTMLAudioElement = class extends HTMLElement {
    constructor(ownerDocument, localName = "audio") {
      super(ownerDocument, localName);
    }
  };

  // node_modules/.pnpm/linkedom@0.14.7/node_modules/linkedom/esm/html/heading-element.js
  init_env();
  var tagName5 = "h1";
  var HTMLHeadingElement = class extends HTMLElement {
    constructor(ownerDocument, localName = tagName5) {
      super(ownerDocument, localName);
    }
  };
  registerHTMLClass([tagName5, "h2", "h3", "h4", "h5", "h6"], HTMLHeadingElement);

  // node_modules/.pnpm/linkedom@0.14.7/node_modules/linkedom/esm/html/directory-element.js
  init_env();
  var HTMLDirectoryElement = class extends HTMLElement {
    constructor(ownerDocument, localName = "dir") {
      super(ownerDocument, localName);
    }
  };

  // node_modules/.pnpm/linkedom@0.14.7/node_modules/linkedom/esm/html/quote-element.js
  init_env();
  var HTMLQuoteElement = class extends HTMLElement {
    constructor(ownerDocument, localName = "quote") {
      super(ownerDocument, localName);
    }
  };

  // node_modules/.pnpm/linkedom@0.14.7/node_modules/linkedom/esm/html/canvas-element.js
  init_env();
  var import_canvas = __toESM(require_canvas(), 1);
  var { createCanvas } = import_canvas.default;
  var tagName6 = "canvas";
  var HTMLCanvasElement = class extends HTMLElement {
    constructor(ownerDocument, localName = tagName6) {
      super(ownerDocument, localName);
      this[IMAGE] = createCanvas(300, 150);
    }
    get width() {
      return this[IMAGE].width;
    }
    set width(value) {
      numericAttribute.set(this, "width", value);
      this[IMAGE].width = value;
    }
    get height() {
      return this[IMAGE].height;
    }
    set height(value) {
      numericAttribute.set(this, "height", value);
      this[IMAGE].height = value;
    }
    getContext(type) {
      return this[IMAGE].getContext(type);
    }
    toDataURL(...args) {
      return this[IMAGE].toDataURL(...args);
    }
  };
  registerHTMLClass(tagName6, HTMLCanvasElement);

  // node_modules/.pnpm/linkedom@0.14.7/node_modules/linkedom/esm/html/legend-element.js
  init_env();
  var HTMLLegendElement = class extends HTMLElement {
    constructor(ownerDocument, localName = "legend") {
      super(ownerDocument, localName);
    }
  };

  // node_modules/.pnpm/linkedom@0.14.7/node_modules/linkedom/esm/html/option-element.js
  init_env();
  var HTMLOptionElement = class extends HTMLElement {
    constructor(ownerDocument, localName = "option") {
      super(ownerDocument, localName);
    }
  };

  // node_modules/.pnpm/linkedom@0.14.7/node_modules/linkedom/esm/html/span-element.js
  init_env();
  var HTMLSpanElement = class extends HTMLElement {
    constructor(ownerDocument, localName = "span") {
      super(ownerDocument, localName);
    }
  };

  // node_modules/.pnpm/linkedom@0.14.7/node_modules/linkedom/esm/html/meter-element.js
  init_env();
  var HTMLMeterElement = class extends HTMLElement {
    constructor(ownerDocument, localName = "meter") {
      super(ownerDocument, localName);
    }
  };

  // node_modules/.pnpm/linkedom@0.14.7/node_modules/linkedom/esm/html/video-element.js
  init_env();
  var HTMLVideoElement = class extends HTMLElement {
    constructor(ownerDocument, localName = "video") {
      super(ownerDocument, localName);
    }
  };

  // node_modules/.pnpm/linkedom@0.14.7/node_modules/linkedom/esm/html/table-cell-element.js
  init_env();
  var HTMLTableCellElement = class extends HTMLElement {
    constructor(ownerDocument, localName = "td") {
      super(ownerDocument, localName);
    }
  };

  // node_modules/.pnpm/linkedom@0.14.7/node_modules/linkedom/esm/html/title-element.js
  init_env();
  var tagName7 = "title";
  var HTMLTitleElement = class extends TextElement {
    constructor(ownerDocument, localName = tagName7) {
      super(ownerDocument, localName);
    }
  };
  registerHTMLClass(tagName7, HTMLTitleElement);

  // node_modules/.pnpm/linkedom@0.14.7/node_modules/linkedom/esm/html/output-element.js
  init_env();
  var HTMLOutputElement = class extends HTMLElement {
    constructor(ownerDocument, localName = "output") {
      super(ownerDocument, localName);
    }
  };

  // node_modules/.pnpm/linkedom@0.14.7/node_modules/linkedom/esm/html/table-row-element.js
  init_env();
  var HTMLTableRowElement = class extends HTMLElement {
    constructor(ownerDocument, localName = "tr") {
      super(ownerDocument, localName);
    }
  };

  // node_modules/.pnpm/linkedom@0.14.7/node_modules/linkedom/esm/html/data-element.js
  init_env();
  var HTMLDataElement = class extends HTMLElement {
    constructor(ownerDocument, localName = "data") {
      super(ownerDocument, localName);
    }
  };

  // node_modules/.pnpm/linkedom@0.14.7/node_modules/linkedom/esm/html/menu-element.js
  init_env();
  var HTMLMenuElement = class extends HTMLElement {
    constructor(ownerDocument, localName = "menu") {
      super(ownerDocument, localName);
    }
  };

  // node_modules/.pnpm/linkedom@0.14.7/node_modules/linkedom/esm/html/select-element.js
  init_env();
  var tagName8 = "select";
  var HTMLSelectElement = class extends HTMLElement {
    constructor(ownerDocument, localName = tagName8) {
      super(ownerDocument, localName);
    }
    get options() {
      let children = new NodeList();
      let { firstElementChild } = this;
      while (firstElementChild) {
        if (firstElementChild.tagName === "OPTGROUP")
          children.push(...firstElementChild.children);
        else
          children.push(firstElementChild);
        firstElementChild = firstElementChild.nextElementSibling;
      }
      return children;
    }
    get disabled() {
      return booleanAttribute.get(this, "disabled");
    }
    set disabled(value) {
      booleanAttribute.set(this, "disabled", value);
    }
    get name() {
      return this.getAttribute("name");
    }
    set name(value) {
      this.setAttribute("name", value);
    }
  };
  registerHTMLClass(tagName8, HTMLSelectElement);

  // node_modules/.pnpm/linkedom@0.14.7/node_modules/linkedom/esm/html/br-element.js
  init_env();
  var HTMLBRElement = class extends HTMLElement {
    constructor(ownerDocument, localName = "br") {
      super(ownerDocument, localName);
    }
  };

  // node_modules/.pnpm/linkedom@0.14.7/node_modules/linkedom/esm/html/button-element.js
  init_env();
  var tagName9 = "button";
  var HTMLButtonElement = class extends HTMLElement {
    constructor(ownerDocument, localName = tagName9) {
      super(ownerDocument, localName);
    }
    get disabled() {
      return booleanAttribute.get(this, "disabled");
    }
    set disabled(value) {
      booleanAttribute.set(this, "disabled", value);
    }
    get name() {
      return this.getAttribute("name");
    }
    set name(value) {
      this.setAttribute("name", value);
    }
    get type() {
      return this.getAttribute("type");
    }
    set type(value) {
      this.setAttribute("type", value);
    }
  };
  registerHTMLClass(tagName9, HTMLButtonElement);

  // node_modules/.pnpm/linkedom@0.14.7/node_modules/linkedom/esm/html/map-element.js
  init_env();
  var HTMLMapElement = class extends HTMLElement {
    constructor(ownerDocument, localName = "map") {
      super(ownerDocument, localName);
    }
  };

  // node_modules/.pnpm/linkedom@0.14.7/node_modules/linkedom/esm/html/opt-group-element.js
  init_env();
  var HTMLOptGroupElement = class extends HTMLElement {
    constructor(ownerDocument, localName = "optgroup") {
      super(ownerDocument, localName);
    }
  };

  // node_modules/.pnpm/linkedom@0.14.7/node_modules/linkedom/esm/html/d-list-element.js
  init_env();
  var HTMLDListElement = class extends HTMLElement {
    constructor(ownerDocument, localName = "dl") {
      super(ownerDocument, localName);
    }
  };

  // node_modules/.pnpm/linkedom@0.14.7/node_modules/linkedom/esm/html/text-area-element.js
  init_env();
  var tagName10 = "textarea";
  var HTMLTextAreaElement = class extends TextElement {
    constructor(ownerDocument, localName = tagName10) {
      super(ownerDocument, localName);
    }
    get disabled() {
      return booleanAttribute.get(this, "disabled");
    }
    set disabled(value) {
      booleanAttribute.set(this, "disabled", value);
    }
    get name() {
      return this.getAttribute("name");
    }
    set name(value) {
      this.setAttribute("name", value);
    }
    get placeholder() {
      return this.getAttribute("placeholder");
    }
    set placeholder(value) {
      this.setAttribute("placeholder", value);
    }
    get type() {
      return this.getAttribute("type");
    }
    set type(value) {
      this.setAttribute("type", value);
    }
    get value() {
      return this.textContent;
    }
    set value(content) {
      this.textContent = content;
    }
  };
  registerHTMLClass(tagName10, HTMLTextAreaElement);

  // node_modules/.pnpm/linkedom@0.14.7/node_modules/linkedom/esm/html/font-element.js
  init_env();
  var HTMLFontElement = class extends HTMLElement {
    constructor(ownerDocument, localName = "font") {
      super(ownerDocument, localName);
    }
  };

  // node_modules/.pnpm/linkedom@0.14.7/node_modules/linkedom/esm/html/div-element.js
  init_env();
  var HTMLDivElement = class extends HTMLElement {
    constructor(ownerDocument, localName = "div") {
      super(ownerDocument, localName);
    }
  };

  // node_modules/.pnpm/linkedom@0.14.7/node_modules/linkedom/esm/html/link-element.js
  init_env();
  var tagName11 = "link";
  var HTMLLinkElement = class extends HTMLElement {
    constructor(ownerDocument, localName = tagName11) {
      super(ownerDocument, localName);
    }
    get disabled() {
      return booleanAttribute.get(this, "disabled");
    }
    set disabled(value) {
      booleanAttribute.set(this, "disabled", value);
    }
    get href() {
      return stringAttribute.get(this, "href");
    }
    set href(value) {
      stringAttribute.set(this, "href", value);
    }
    get hreflang() {
      return stringAttribute.get(this, "hreflang");
    }
    set hreflang(value) {
      stringAttribute.set(this, "hreflang", value);
    }
    get media() {
      return stringAttribute.get(this, "media");
    }
    set media(value) {
      stringAttribute.set(this, "media", value);
    }
    get rel() {
      return stringAttribute.get(this, "rel");
    }
    set rel(value) {
      stringAttribute.set(this, "rel", value);
    }
    get type() {
      return stringAttribute.get(this, "type");
    }
    set type(value) {
      stringAttribute.set(this, "type", value);
    }
  };
  registerHTMLClass(tagName11, HTMLLinkElement);

  // node_modules/.pnpm/linkedom@0.14.7/node_modules/linkedom/esm/html/slot-element.js
  init_env();
  var HTMLSlotElement = class extends HTMLElement {
    constructor(ownerDocument, localName = "slot") {
      super(ownerDocument, localName);
    }
  };

  // node_modules/.pnpm/linkedom@0.14.7/node_modules/linkedom/esm/html/form-element.js
  init_env();
  var HTMLFormElement = class extends HTMLElement {
    constructor(ownerDocument, localName = "form") {
      super(ownerDocument, localName);
    }
  };

  // node_modules/.pnpm/linkedom@0.14.7/node_modules/linkedom/esm/html/image-element.js
  init_env();
  var tagName12 = "img";
  var HTMLImageElement = class extends HTMLElement {
    constructor(ownerDocument, localName = tagName12) {
      super(ownerDocument, localName);
    }
    get alt() {
      return stringAttribute.get(this, "alt");
    }
    set alt(value) {
      stringAttribute.set(this, "alt", value);
    }
    get sizes() {
      return stringAttribute.get(this, "sizes");
    }
    set sizes(value) {
      stringAttribute.set(this, "sizes", value);
    }
    get src() {
      return stringAttribute.get(this, "src");
    }
    set src(value) {
      stringAttribute.set(this, "src", value);
    }
    get srcset() {
      return stringAttribute.get(this, "srcset");
    }
    set srcset(value) {
      stringAttribute.set(this, "srcset", value);
    }
    get title() {
      return stringAttribute.get(this, "title");
    }
    set title(value) {
      stringAttribute.set(this, "title", value);
    }
    get width() {
      return numericAttribute.get(this, "width");
    }
    set width(value) {
      numericAttribute.set(this, "width", value);
    }
    get height() {
      return numericAttribute.get(this, "height");
    }
    set height(value) {
      numericAttribute.set(this, "height", value);
    }
  };
  registerHTMLClass(tagName12, HTMLImageElement);

  // node_modules/.pnpm/linkedom@0.14.7/node_modules/linkedom/esm/html/pre-element.js
  init_env();
  var HTMLPreElement = class extends HTMLElement {
    constructor(ownerDocument, localName = "pre") {
      super(ownerDocument, localName);
    }
  };

  // node_modules/.pnpm/linkedom@0.14.7/node_modules/linkedom/esm/html/u-list-element.js
  init_env();
  var HTMLUListElement = class extends HTMLElement {
    constructor(ownerDocument, localName = "ul") {
      super(ownerDocument, localName);
    }
  };

  // node_modules/.pnpm/linkedom@0.14.7/node_modules/linkedom/esm/html/meta-element.js
  init_env();
  var HTMLMetaElement = class extends HTMLElement {
    constructor(ownerDocument, localName = "meta") {
      super(ownerDocument, localName);
    }
  };

  // node_modules/.pnpm/linkedom@0.14.7/node_modules/linkedom/esm/html/picture-element.js
  init_env();
  var HTMLPictureElement = class extends HTMLElement {
    constructor(ownerDocument, localName = "picture") {
      super(ownerDocument, localName);
    }
  };

  // node_modules/.pnpm/linkedom@0.14.7/node_modules/linkedom/esm/html/area-element.js
  init_env();
  var HTMLAreaElement = class extends HTMLElement {
    constructor(ownerDocument, localName = "area") {
      super(ownerDocument, localName);
    }
  };

  // node_modules/.pnpm/linkedom@0.14.7/node_modules/linkedom/esm/html/o-list-element.js
  init_env();
  var HTMLOListElement = class extends HTMLElement {
    constructor(ownerDocument, localName = "ol") {
      super(ownerDocument, localName);
    }
  };

  // node_modules/.pnpm/linkedom@0.14.7/node_modules/linkedom/esm/html/table-caption-element.js
  init_env();
  var HTMLTableCaptionElement = class extends HTMLElement {
    constructor(ownerDocument, localName = "caption") {
      super(ownerDocument, localName);
    }
  };

  // node_modules/.pnpm/linkedom@0.14.7/node_modules/linkedom/esm/html/anchor-element.js
  init_env();
  var tagName13 = "a";
  var HTMLAnchorElement = class extends HTMLElement {
    constructor(ownerDocument, localName = tagName13) {
      super(ownerDocument, localName);
    }
    get href() {
      return encodeURI(stringAttribute.get(this, "href"));
    }
    set href(value) {
      stringAttribute.set(this, "href", decodeURI(value));
    }
    get download() {
      return encodeURI(stringAttribute.get(this, "download"));
    }
    set download(value) {
      stringAttribute.set(this, "download", decodeURI(value));
    }
    get target() {
      return stringAttribute.get(this, "target");
    }
    set target(value) {
      stringAttribute.set(this, "target", value);
    }
    get type() {
      return stringAttribute.get(this, "type");
    }
    set type(value) {
      stringAttribute.set(this, "type", value);
    }
  };
  registerHTMLClass(tagName13, HTMLAnchorElement);

  // node_modules/.pnpm/linkedom@0.14.7/node_modules/linkedom/esm/html/label-element.js
  init_env();
  var HTMLLabelElement = class extends HTMLElement {
    constructor(ownerDocument, localName = "label") {
      super(ownerDocument, localName);
    }
  };

  // node_modules/.pnpm/linkedom@0.14.7/node_modules/linkedom/esm/html/unknown-element.js
  init_env();
  var HTMLUnknownElement = class extends HTMLElement {
    constructor(ownerDocument, localName = "unknown") {
      super(ownerDocument, localName);
    }
  };

  // node_modules/.pnpm/linkedom@0.14.7/node_modules/linkedom/esm/html/mod-element.js
  init_env();
  var HTMLModElement = class extends HTMLElement {
    constructor(ownerDocument, localName = "mod") {
      super(ownerDocument, localName);
    }
  };

  // node_modules/.pnpm/linkedom@0.14.7/node_modules/linkedom/esm/html/details-element.js
  init_env();
  var HTMLDetailsElement = class extends HTMLElement {
    constructor(ownerDocument, localName = "details") {
      super(ownerDocument, localName);
    }
  };

  // node_modules/.pnpm/linkedom@0.14.7/node_modules/linkedom/esm/html/source-element.js
  init_env();
  var tagName14 = "source";
  var HTMLSourceElement = class extends HTMLElement {
    constructor(ownerDocument, localName = tagName14) {
      super(ownerDocument, localName);
    }
    get src() {
      return stringAttribute.get(this, "src");
    }
    set src(value) {
      stringAttribute.set(this, "src", value);
    }
    get srcset() {
      return stringAttribute.get(this, "srcset");
    }
    set srcset(value) {
      stringAttribute.set(this, "srcset", value);
    }
    get sizes() {
      return stringAttribute.get(this, "sizes");
    }
    set sizes(value) {
      stringAttribute.set(this, "sizes", value);
    }
    get type() {
      return stringAttribute.get(this, "type");
    }
    set type(value) {
      stringAttribute.set(this, "type", value);
    }
  };
  registerHTMLClass(tagName14, HTMLSourceElement);

  // node_modules/.pnpm/linkedom@0.14.7/node_modules/linkedom/esm/html/track-element.js
  init_env();
  var HTMLTrackElement = class extends HTMLElement {
    constructor(ownerDocument, localName = "track") {
      super(ownerDocument, localName);
    }
  };

  // node_modules/.pnpm/linkedom@0.14.7/node_modules/linkedom/esm/html/marquee-element.js
  init_env();
  var HTMLMarqueeElement = class extends HTMLElement {
    constructor(ownerDocument, localName = "marquee") {
      super(ownerDocument, localName);
    }
  };

  // node_modules/.pnpm/linkedom@0.14.7/node_modules/linkedom/esm/shared/html-classes.js
  var HTMLClasses = {
    HTMLElement,
    HTMLTemplateElement,
    HTMLHtmlElement,
    HTMLScriptElement,
    HTMLFrameElement,
    HTMLIFrameElement,
    HTMLObjectElement,
    HTMLHeadElement,
    HTMLBodyElement,
    HTMLStyleElement,
    HTMLTimeElement,
    HTMLFieldSetElement,
    HTMLEmbedElement,
    HTMLHRElement,
    HTMLProgressElement,
    HTMLParagraphElement,
    HTMLTableElement,
    HTMLFrameSetElement,
    HTMLLIElement,
    HTMLBaseElement,
    HTMLDataListElement,
    HTMLInputElement,
    HTMLParamElement,
    HTMLMediaElement,
    HTMLAudioElement,
    HTMLHeadingElement,
    HTMLDirectoryElement,
    HTMLQuoteElement,
    HTMLCanvasElement,
    HTMLLegendElement,
    HTMLOptionElement,
    HTMLSpanElement,
    HTMLMeterElement,
    HTMLVideoElement,
    HTMLTableCellElement,
    HTMLTitleElement,
    HTMLOutputElement,
    HTMLTableRowElement,
    HTMLDataElement,
    HTMLMenuElement,
    HTMLSelectElement,
    HTMLBRElement,
    HTMLButtonElement,
    HTMLMapElement,
    HTMLOptGroupElement,
    HTMLDListElement,
    HTMLTextAreaElement,
    HTMLFontElement,
    HTMLDivElement,
    HTMLLinkElement,
    HTMLSlotElement,
    HTMLFormElement,
    HTMLImageElement,
    HTMLPreElement,
    HTMLUListElement,
    HTMLMetaElement,
    HTMLPictureElement,
    HTMLAreaElement,
    HTMLOListElement,
    HTMLTableCaptionElement,
    HTMLAnchorElement,
    HTMLLabelElement,
    HTMLUnknownElement,
    HTMLModElement,
    HTMLDetailsElement,
    HTMLSourceElement,
    HTMLTrackElement,
    HTMLMarqueeElement
  };

  // node_modules/.pnpm/linkedom@0.14.7/node_modules/linkedom/esm/shared/mime.js
  init_env();
  var voidElements = { test: () => true };
  var Mime = {
    "text/html": {
      docType: "<!DOCTYPE html>",
      ignoreCase: true,
      voidElements: /^(?:area|base|br|col|embed|hr|img|input|keygen|link|menuitem|meta|param|source|track|wbr)$/i
    },
    "image/svg+xml": {
      docType: '<?xml version="1.0" encoding="utf-8"?>',
      ignoreCase: false,
      voidElements
    },
    "text/xml": {
      docType: '<?xml version="1.0" encoding="utf-8"?>',
      ignoreCase: false,
      voidElements
    },
    "application/xml": {
      docType: '<?xml version="1.0" encoding="utf-8"?>',
      ignoreCase: false,
      voidElements
    },
    "application/xhtml+xml": {
      docType: '<?xml version="1.0" encoding="utf-8"?>',
      ignoreCase: false,
      voidElements
    }
  };

  // node_modules/.pnpm/linkedom@0.14.7/node_modules/linkedom/esm/interface/custom-event.js
  init_env();
  var GlobalCustomEvent = typeof CustomEvent === "function" ? CustomEvent : class CustomEvent2 extends GlobalEvent {
    constructor(type, eventInitDict = {}) {
      super(type, eventInitDict);
      this.detail = eventInitDict.detail;
    }
  };

  // node_modules/.pnpm/linkedom@0.14.7/node_modules/linkedom/esm/interface/input-event.js
  init_env();
  var InputEvent = class extends GlobalEvent {
    constructor(type, inputEventInit = {}) {
      super(type, inputEventInit);
      this.inputType = inputEventInit.inputType;
      this.data = inputEventInit.data;
      this.dataTransfer = inputEventInit.dataTransfer;
      this.isComposing = inputEventInit.isComposing || false;
      this.ranges = inputEventInit.ranges;
    }
  };

  // node_modules/.pnpm/linkedom@0.14.7/node_modules/linkedom/esm/interface/image.js
  init_env();
  var ImageClass = (ownerDocument) => class Image extends HTMLImageElement {
    constructor(width, height) {
      super(ownerDocument);
      switch (arguments.length) {
        case 1:
          this.height = width;
          this.width = width;
          break;
        case 2:
          this.height = height;
          this.width = width;
          break;
      }
    }
  };

  // node_modules/.pnpm/linkedom@0.14.7/node_modules/linkedom/esm/interface/range.js
  init_env();
  var deleteContents = ({ [START]: start, [END]: end }, fragment = null) => {
    setAdjacent(start[PREV], end[NEXT]);
    do {
      const after2 = getEnd(start);
      const next = after2 === end ? after2 : after2[NEXT];
      if (fragment)
        fragment.insertBefore(start, fragment[END]);
      else
        start.remove();
      start = next;
    } while (start !== end);
  };
  var Range = class {
    constructor() {
      this[START] = null;
      this[END] = null;
      this.commonAncestorContainer = null;
    }
    insertNode(newNode) {
      this[END].parentNode.insertBefore(newNode, this[START]);
    }
    selectNode(node) {
      this[START] = node;
      this[END] = getEnd(node);
    }
    surroundContents(parentNode) {
      parentNode.replaceChildren(this.extractContents());
    }
    setStartBefore(node) {
      this[START] = node;
    }
    setStartAfter(node) {
      this[START] = node.nextSibling;
    }
    setEndBefore(node) {
      this[END] = getEnd(node.previousSibling);
    }
    setEndAfter(node) {
      this[END] = getEnd(node);
    }
    cloneContents() {
      let { [START]: start, [END]: end } = this;
      const fragment = start.ownerDocument.createDocumentFragment();
      while (start !== end) {
        fragment.insertBefore(start.cloneNode(true), fragment[END]);
        start = getEnd(start);
        if (start !== end)
          start = start[NEXT];
      }
      return fragment;
    }
    deleteContents() {
      deleteContents(this);
    }
    extractContents() {
      const fragment = this[START].ownerDocument.createDocumentFragment();
      deleteContents(this, fragment);
      return fragment;
    }
    createContextualFragment(html2) {
      const template = this.commonAncestorContainer.createElement("template");
      template.innerHTML = html2;
      this.selectNode(template.content);
      return template.content;
    }
    cloneRange() {
      const range = new Range();
      range[START] = this[START];
      range[END] = this[END];
      return range;
    }
  };

  // node_modules/.pnpm/linkedom@0.14.7/node_modules/linkedom/esm/interface/tree-walker.js
  init_env();
  var isOK = ({ nodeType }, mask) => {
    switch (nodeType) {
      case ELEMENT_NODE:
        return mask & SHOW_ELEMENT;
      case TEXT_NODE:
        return mask & SHOW_TEXT;
      case COMMENT_NODE:
        return mask & SHOW_COMMENT;
    }
    return 0;
  };
  var TreeWalker = class {
    constructor(root, whatToShow = SHOW_ALL) {
      this.root = root;
      this.currentNode = root;
      this.whatToShow = whatToShow;
      let { [NEXT]: next, [END]: end } = root;
      if (root.nodeType === DOCUMENT_NODE) {
        const { documentElement } = root;
        next = documentElement;
        end = documentElement[END];
      }
      const nodes = [];
      while (next !== end) {
        if (isOK(next, whatToShow))
          nodes.push(next);
        next = next[NEXT];
      }
      this[PRIVATE] = { i: 0, nodes };
    }
    nextNode() {
      const $ = this[PRIVATE];
      this.currentNode = $.i < $.nodes.length ? $.nodes[$.i++] : null;
      return this.currentNode;
    }
  };

  // node_modules/.pnpm/linkedom@0.14.7/node_modules/linkedom/esm/interface/document.js
  var query = (method, ownerDocument, selectors) => {
    let { [NEXT]: next, [END]: end } = ownerDocument;
    return method.call({ ownerDocument, [NEXT]: next, [END]: end }, selectors);
  };
  var globalExports = assign2({}, Facades, HTMLClasses, {
    CustomEvent: GlobalCustomEvent,
    Event: GlobalEvent,
    EventTarget: DOMEventTarget,
    InputEvent,
    NamedNodeMap,
    NodeList
  });
  var window = /* @__PURE__ */ new WeakMap();
  var Document = class extends NonElementParentNode {
    constructor(type) {
      super(null, "#document", DOCUMENT_NODE);
      this[CUSTOM_ELEMENTS] = { active: false, registry: null };
      this[MUTATION_OBSERVER] = { active: false, class: null };
      this[MIME] = Mime[type];
      this[DOCTYPE] = null;
      this[DOM_PARSER] = null;
      this[GLOBALS] = null;
      this[IMAGE] = null;
      this[UPGRADE] = null;
    }
    get defaultView() {
      if (!window.has(this))
        window.set(this, new Proxy(globalThis, {
          set: (target2, name, value) => {
            switch (name) {
              case "addEventListener":
              case "removeEventListener":
              case "dispatchEvent":
                this[EVENT_TARGET][name] = value;
                break;
              default:
                target2[name] = value;
                break;
            }
            return true;
          },
          get: (globalThis2, name) => {
            switch (name) {
              case "addEventListener":
              case "removeEventListener":
              case "dispatchEvent":
                if (!this[EVENT_TARGET]) {
                  const et = this[EVENT_TARGET] = new DOMEventTarget();
                  et.dispatchEvent = et.dispatchEvent.bind(et);
                  et.addEventListener = et.addEventListener.bind(et);
                  et.removeEventListener = et.removeEventListener.bind(et);
                }
                return this[EVENT_TARGET][name];
              case "document":
                return this;
              case "navigator":
                return {
                  userAgent: "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.150 Safari/537.36"
                };
              case "window":
                return window.get(this);
              case "customElements":
                if (!this[CUSTOM_ELEMENTS].registry)
                  this[CUSTOM_ELEMENTS] = new CustomElementRegistry(this);
                return this[CUSTOM_ELEMENTS];
              case "performance":
                return import_perf_hooks.performance;
              case "DOMParser":
                return this[DOM_PARSER];
              case "Image":
                if (!this[IMAGE])
                  this[IMAGE] = ImageClass(this);
                return this[IMAGE];
              case "MutationObserver":
                if (!this[MUTATION_OBSERVER].class)
                  this[MUTATION_OBSERVER] = new MutationObserverClass(this);
                return this[MUTATION_OBSERVER].class;
            }
            return this[GLOBALS] && this[GLOBALS][name] || globalExports[name] || globalThis2[name];
          }
        }));
      return window.get(this);
    }
    get doctype() {
      const docType = this[DOCTYPE];
      if (docType)
        return docType;
      const { firstChild } = this;
      if (firstChild && firstChild.nodeType === DOCUMENT_TYPE_NODE)
        return this[DOCTYPE] = firstChild;
      return null;
    }
    set doctype(value) {
      if (/^([a-z:]+)(\s+system|\s+public(\s+"([^"]+)")?)?(\s+"([^"]+)")?/i.test(value)) {
        const { $1: name, $4: publicId, $6: systemId } = RegExp;
        this[DOCTYPE] = new DocumentType(this, name, publicId, systemId);
        knownSiblings(this, this[DOCTYPE], this[NEXT]);
      }
    }
    get documentElement() {
      return this.firstElementChild;
    }
    get isConnected() {
      return true;
    }
    _getParent() {
      return this[EVENT_TARGET];
    }
    createAttribute(name) {
      return new Attr(this, name);
    }
    createComment(textContent) {
      return new Comment2(this, textContent);
    }
    createDocumentFragment() {
      return new DocumentFragment(this);
    }
    createDocumentType(name, publicId, systemId) {
      return new DocumentType(this, name, publicId, systemId);
    }
    createElement(localName) {
      return new Element2(this, localName);
    }
    createRange() {
      const range = new Range();
      range.commonAncestorContainer = this;
      return range;
    }
    createTextNode(textContent) {
      return new Text(this, textContent);
    }
    createTreeWalker(root, whatToShow = -1) {
      return new TreeWalker(root, whatToShow);
    }
    createNodeIterator(root, whatToShow = -1) {
      return this.createTreeWalker(root, whatToShow);
    }
    createEvent(name) {
      const event = create(name === "Event" ? new GlobalEvent("") : new GlobalCustomEvent(""));
      event.initEvent = event.initCustomEvent = (type, canBubble = false, cancelable = false, detail) => {
        defineProperties(event, {
          type: { value: type },
          canBubble: { value: canBubble },
          cancelable: { value: cancelable },
          detail: { value: detail }
        });
      };
      return event;
    }
    cloneNode(deep = false) {
      const {
        constructor,
        [CUSTOM_ELEMENTS]: customElements2,
        [DOCTYPE]: doctype
      } = this;
      const document2 = new constructor();
      document2[CUSTOM_ELEMENTS] = customElements2;
      if (deep) {
        const end = document2[END];
        const { childNodes } = this;
        for (let { length } = childNodes, i = 0; i < length; i++)
          document2.insertBefore(childNodes[i].cloneNode(true), end);
        if (doctype)
          document2[DOCTYPE] = childNodes[0];
      }
      return document2;
    }
    importNode(externalNode) {
      const deep = 1 < arguments.length && !!arguments[1];
      const node = externalNode.cloneNode(deep);
      const { [CUSTOM_ELEMENTS]: customElements2 } = this;
      const { active } = customElements2;
      const upgrade = (element) => {
        const { ownerDocument, nodeType } = element;
        element.ownerDocument = this;
        if (active && ownerDocument !== this && nodeType === ELEMENT_NODE)
          customElements2.upgrade(element);
      };
      upgrade(node);
      if (deep) {
        switch (node.nodeType) {
          case ELEMENT_NODE:
          case DOCUMENT_FRAGMENT_NODE: {
            let { [NEXT]: next, [END]: end } = node;
            while (next !== end) {
              if (next.nodeType === ELEMENT_NODE)
                upgrade(next);
              next = next[NEXT];
            }
            break;
          }
        }
      }
      return node;
    }
    toString() {
      return this.childNodes.join("");
    }
    querySelector(selectors) {
      return query(super.querySelector, this, selectors);
    }
    querySelectorAll(selectors) {
      return query(super.querySelectorAll, this, selectors);
    }
    getElementsByTagNameNS(_, name) {
      return this.getElementsByTagName(name);
    }
    createAttributeNS(_, name) {
      return this.createAttribute(name);
    }
    createElementNS(nsp, localName, options) {
      return nsp === SVG_NAMESPACE ? new SVGElement(this, localName, null) : this.createElement(localName, options);
    }
  };
  setPrototypeOf(globalExports.Document = function Document2() {
    illegalConstructor();
  }, Document).prototype = Document.prototype;

  // node_modules/.pnpm/linkedom@0.14.7/node_modules/linkedom/esm/html/document.js
  var createHTMLElement = (ownerDocument, builtin, localName, options) => {
    if (!builtin && htmlClasses.has(localName)) {
      const Class = htmlClasses.get(localName);
      return new Class(ownerDocument, localName);
    }
    const { [CUSTOM_ELEMENTS]: { active, registry } } = ownerDocument;
    if (active) {
      const ce = builtin ? options.is : localName;
      if (registry.has(ce)) {
        const { Class } = registry.get(ce);
        const element = new Class(ownerDocument, localName);
        customElements.set(element, { connected: false });
        return element;
      }
    }
    return new HTMLElement(ownerDocument, localName);
  };
  var HTMLDocument = class extends Document {
    constructor() {
      super("text/html");
    }
    get all() {
      const nodeList = new NodeList();
      let { [NEXT]: next, [END]: end } = this;
      while (next !== end) {
        switch (next.nodeType) {
          case ELEMENT_NODE:
            nodeList.push(next);
            break;
        }
        next = next[NEXT];
      }
      return nodeList;
    }
    get head() {
      const { documentElement } = this;
      let { firstElementChild } = documentElement;
      if (!firstElementChild || firstElementChild.tagName !== "HEAD") {
        firstElementChild = this.createElement("head");
        documentElement.prepend(firstElementChild);
      }
      return firstElementChild;
    }
    get body() {
      const { head } = this;
      let { nextElementSibling: nextElementSibling2 } = head;
      if (!nextElementSibling2 || nextElementSibling2.tagName !== "BODY") {
        nextElementSibling2 = this.createElement("body");
        head.after(nextElementSibling2);
      }
      return nextElementSibling2;
    }
    get title() {
      const { head } = this;
      let title = head.getElementsByTagName("title").shift();
      return title ? title.textContent : "";
    }
    set title(textContent) {
      const { head } = this;
      let title = head.getElementsByTagName("title").shift();
      if (title)
        title.textContent = textContent;
      else {
        head.insertBefore(this.createElement("title"), head.firstChild).textContent = textContent;
      }
    }
    createElement(localName, options) {
      const builtin = !!(options && options.is);
      const element = createHTMLElement(this, builtin, localName, options);
      if (builtin)
        element.setAttribute("is", options.is);
      return element;
    }
  };

  // node_modules/.pnpm/linkedom@0.14.7/node_modules/linkedom/esm/svg/document.js
  init_env();
  var SVGDocument = class extends Document {
    constructor() {
      super("image/svg+xml");
    }
    toString() {
      return this[MIME].docType + super.toString();
    }
  };

  // node_modules/.pnpm/linkedom@0.14.7/node_modules/linkedom/esm/xml/document.js
  init_env();
  var XMLDocument = class extends Document {
    constructor() {
      super("text/xml");
    }
    toString() {
      return this[MIME].docType + super.toString();
    }
  };

  // node_modules/.pnpm/linkedom@0.14.7/node_modules/linkedom/esm/dom/parser.js
  var DOMParser = class {
    parseFromString(markupLanguage, mimeType, globals = null) {
      let isHTML = false, document2;
      if (mimeType === "text/html") {
        isHTML = true;
        document2 = new HTMLDocument();
      } else if (mimeType === "image/svg+xml")
        document2 = new SVGDocument();
      else
        document2 = new XMLDocument();
      document2[DOM_PARSER] = DOMParser;
      if (globals)
        document2[GLOBALS] = globals;
      return markupLanguage ? parseFromString(document2, isHTML, markupLanguage) : document2;
    }
  };

  // node_modules/.pnpm/linkedom@0.14.7/node_modules/linkedom/esm/shared/parse-json.js
  init_env();
  var { parse: parse3 } = JSON;

  // node_modules/.pnpm/linkedom@0.14.7/node_modules/linkedom/esm/interface/node-filter.js
  init_env();

  // node_modules/.pnpm/linkedom@0.14.7/node_modules/linkedom/esm/index.js
  function Document3() {
    illegalConstructor();
  }
  setPrototypeOf(Document3, Document).prototype = Document.prototype;

  // src/routes/api/util.ts
  var SHOW_TEXT2 = 4;
  function* treeWalkerToIter(walker) {
    let node;
    while (node = walker.nextNode())
      yield node;
  }
  async function blockquotify(text) {
    const { protocol, host } = self.location;
    const doc = new DOMParser().parseFromString(text, "text/html");
    let match2;
    for (const p of doc.querySelectorAll("p")) {
      for (const a of p.querySelectorAll('a[href^="http://news.ycombinator.com"], a[href^="https://news.ycombinator.com"]')) {
        const href = a.getAttribute("href").replace(/https?:\/\/news.ycombinator.com/g, `${protocol}//${host}`);
        a.setAttribute("href", href);
      }
      if (match2 = /^([|>])/.exec(p.textContent.trim())) {
        const bq = doc.createElement("blockquote");
        bq.innerHTML = p.innerHTML;
        for (const nd of treeWalkerToIter(doc.createTreeWalker(bq, SHOW_TEXT2))) {
          if (/^([|>])/.test(nd.textContent.trim())) {
            nd.textContent = nd.textContent.trim().substring(1);
            break;
          }
        }
        const span = doc.createElement("span");
        span.textContent = match2[1];
        span.classList.add("sr-only");
        bq.prepend(span);
        p.outerHTML = bq.outerHTML;
      }
      if (match2 = /^([-*])[^-*]/.exec(p.textContent.trim())) {
        const li = doc.createElement("li");
        li.innerHTML = p.innerHTML;
        for (const x4 of treeWalkerToIter(doc.createTreeWalker(li, SHOW_TEXT2))) {
          if (/^([-*])[^-*]/.test(x4.textContent.trim())) {
            x4.textContent = x4.textContent.trim().substring(1);
            break;
          }
        }
        const span = doc.createElement("span");
        span.textContent = match2[1];
        span.classList.add("sr-only");
        li.prepend(span);
        p.outerHTML = li.outerHTML;
      }
      if (match2 = /^([-*]{3,})$/.exec(p.textContent.trim())) {
        p.outerHTML = `<hr/><span class="sr-only">${match2[1]}</span>`;
      }
    }
    return doc.toString();
  }

  // src/routes/api/make-api.ts
  var CONCURRENCY = 128;
  var PAGE = 30;
  var x2 = {
    ["news" /* TOP */]: `/v0/topstories`,
    ["newest" /* NEW */]: "/v0/newstories",
    ["best" /* BEST */]: "/v0/beststories",
    ["show" /* SHOW */]: "/v0/showstories",
    ["shownew" /* SHOW_NEW */]: "",
    ["ask" /* ASK */]: "/v0/askstories",
    ["jobs" /* JOB */]: "/v0/jobstories",
    ["submitted" /* USER */]: "",
    ["classic" /* CLASSIC */]: "",
    ["from" /* FROM */]: ""
  };
  async function* stories(api2, { p }, type = "news" /* TOP */) {
    const page = p || 1;
    const href = x2[type];
    if (!href)
      throw Error("Unsupported by HN REST API");
    const ps = (await api2(href)).slice(PAGE * (page - 1), PAGE * page).map((id) => api2(`/v0/item/${id}`));
    for await (const { kids, text, url, ...p2 } of ps) {
      yield {
        ...p2,
        time: new Date(p2.time * 1e3),
        text: text != null ? await blockquotify(text) : null,
        url: text != null ? `item?id=${p2.id}` : url
      };
    }
    yield page !== 1 ? `${type}?p=${page}` : type;
  }
  async function commentTask(api2, id, queue, dict) {
    const x4 = await api2(`/v0/item/${id}`);
    dict.get(x4.id)?.resolve(x4);
    const kids = x4.kids ?? [];
    for (const kid of kids) {
      dict.set(kid, resolvablePromise());
      queue.add(() => commentTask(api2, kid, queue, dict));
    }
  }
  async function* crawlCommentTree(kids, dict, level = 0) {
    for (const kid of kids) {
      const item = await dict.get(kid);
      if (item) {
        const { kids: kids2, text, ...rest } = item;
        yield {
          ...rest,
          level,
          quality: "c00",
          text: text && await blockquotify("<p>" + text),
          time: new Date(item.time * 1e3),
          kids: crawlCommentTree(kids2 || [], dict, level + 1)
        };
      }
    }
  }
  var truncateText = (text) => {
    if (text) {
      const words = text.split(" ");
      const trunc = words.splice(0, 11).join(" ");
      return words.length > 11 ? trunc + " ..." : trunc;
    }
    return "";
  };
  var stripHTML = (text) => text ? text.replace(/(<([^>]+)>)/gi, "") : "";
  async function comments(api2, id, p) {
    const post = await api2(`/v0/item/${id}`);
    if (post.type === "comment") {
      let curr = post;
      while (curr.parent) {
        curr = await api2(`/v0/item/${curr.parent}`);
      }
      post.story = curr.id;
      post.storyTitle = truncateText(curr.title);
    }
    const queue = new PQueue({ concurrency: CONCURRENCY });
    const kids = post.kids ?? [];
    const dict = new Map(kids.map((id2) => [id2, resolvablePromise()]));
    for (const kid of kids) {
      queue.add(() => commentTask(api2, kid, queue, dict));
    }
    const text = post.text != null ? await blockquotify("<p>" + post.text) : null;
    return {
      ...post,
      time: new Date(post.time * 1e3),
      title: post.title || truncateText(stripHTML(text)),
      text,
      quality: "c00",
      url: post.text != null ? `item?id=${post.id}` : post.url,
      kids: crawlCommentTree(kids, dict)
    };
  }
  async function user(api2, id) {
    const { about, ...user4 } = await api2(`/v0/user/${id}`);
    return {
      ...user4,
      ...about ? { about: await blockquotify("<p>" + about) } : {}
    };
  }
  async function* threads(api2, id, next) {
    throw Error("Unsupported by HN REST API");
  }

  // src/routes/api/rest-api.ts
  var API = "https://hacker-news.firebaseio.com";
  var api = async (path) => {
    const url = new URL(path.endsWith(".json") ? path : `${path}.json`, API);
    return fetch(url.href).then((x4) => x4.json());
  };
  function stories2(params, type = "news" /* TOP */) {
    return stories(api, params, type);
  }
  function comments2(id, p) {
    return comments(api, id, p);
  }
  function user2(id) {
    return user(api, id);
  }
  function threads2(id, next) {
    return threads(api, id, next);
  }

  // node_modules/.pnpm/@worker-tools+json-fetch@2.1.0-pre.4/node_modules/@worker-tools/json-fetch/esm/index.js
  init_env();

  // node_modules/.pnpm/@worker-tools+json-fetch@2.1.0-pre.4/node_modules/@worker-tools/json-fetch/esm/search-params-url.js
  init_env();

  // node_modules/.pnpm/@worker-tools+json-fetch@2.1.0-pre.4/node_modules/@worker-tools/json-fetch/esm/index.js
  function isBodyInit(b) {
    return b == null || typeof b === "string" || typeof Blob !== "undefined" && b instanceof Blob || typeof ArrayBuffer !== "undefined" && (b instanceof ArrayBuffer || ArrayBuffer.isView(b)) || typeof FormData !== "undefined" && b instanceof FormData || typeof URLSearchParams !== "undefined" && b instanceof URLSearchParams || typeof ReadableStream !== "undefined" && b instanceof ReadableStream;
  }
  var JSONRequest = class extends Request {
    constructor(input, init2, replacer, space) {
      const { headers: _headers, body: _body, ..._init } = init2 || {};
      let isBI;
      const body = (isBI = isBodyInit(_body)) ? _body : JSON.stringify(_body, replacer, space);
      const headers = new Headers(_headers);
      if (!headers.has("Content-Type") && !isBI)
        headers.set("Content-Type", JSONRequest.contentType);
      if (!headers.has("Accept"))
        headers.set("Accept", JSONRequest.accept);
      super(input instanceof URL ? input.href : input, { headers, body, ..._init });
    }
  };
  Object.defineProperty(JSONRequest, "contentType", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: "application/json;charset=UTF-8"
  });
  Object.defineProperty(JSONRequest, "accept", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: "application/json, text/plain, */*"
  });
  var JSONResponse = class extends Response {
    constructor(body, init2, replacer, space) {
      const { headers: _headers, ..._init } = init2 || {};
      let isBI;
      const _body = (isBI = isBodyInit(body)) ? body : JSON.stringify(body, replacer, space);
      const headers = new Headers(_headers);
      if (!headers.has("Content-Type") && !isBI)
        headers.set("Content-Type", JSONResponse.contentType);
      super(_body, { headers, ..._init });
    }
  };
  Object.defineProperty(JSONResponse, "contentType", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: "application/json;charset=UTF-8"
  });

  // src/routes/item.ts
  init_env();

  // node_modules/.pnpm/github.com+qwtel+blockies@e4dfe44e09b7b24f0647392b73409354680114f6/node_modules/@download/blockies/src/blockies.mjs
  init_env();
  var randseed = new Array(4);
  function seedrand(seed) {
    randseed.fill(0);
    for (let i = 0; i < seed.length; i++) {
      randseed[i % 4] = (randseed[i % 4] << 5) - randseed[i % 4] + seed.charCodeAt(i);
    }
  }
  function rand() {
    const t = randseed[0] ^ randseed[0] << 11;
    randseed[0] = randseed[1];
    randseed[1] = randseed[2];
    randseed[2] = randseed[3];
    randseed[3] = randseed[3] ^ randseed[3] >> 19 ^ t ^ t >> 8;
    return (randseed[3] >>> 0) / (1 << 31 >>> 0);
  }
  function createColor2() {
    const h = Math.floor(rand() * 360);
    const s = rand() * 60 + 40 + "%";
    const l = (rand() + rand() + rand() + rand()) * 25 + "%";
    return "hsl(" + h + "," + s + "," + l + ")";
  }
  function createImageData(size) {
    const width = size;
    const height = size;
    const dataWidth = Math.ceil(width / 2);
    const mirrorWidth = width - dataWidth;
    const data = [];
    for (let y = 0; y < height; y++) {
      let row = [];
      for (let x4 = 0; x4 < dataWidth; x4++) {
        row[x4] = Math.floor(rand() * 2.3);
      }
      const r2 = row.slice(0, mirrorWidth);
      r2.reverse();
      row = row.concat(r2);
      for (let i = 0; i < row.length; i++) {
        data.push(row[i]);
      }
    }
    return data;
  }
  function buildOpts(opts) {
    const newOpts = {};
    newOpts.seed = opts.seed || Math.floor(Math.random() * Math.pow(10, 16)).toString(16);
    seedrand(newOpts.seed);
    newOpts.size = opts.size || 8;
    newOpts.scale = opts.scale || 4;
    newOpts.color = opts.color || createColor2();
    newOpts.bgcolor = opts.bgcolor || createColor2();
    newOpts.spotcolor = opts.spotcolor || createColor2();
    return newOpts;
  }
  function renderIconSVG(opts) {
    opts = buildOpts(opts);
    const imageData = createImageData(opts.size);
    const width = Math.sqrt(imageData.length);
    const size = opts.size * opts.scale;
    let svg = '<svg version="1.1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 ' + size + " " + size + '">';
    svg += '<rect x="0" y="0" width="' + size + '" height="' + size + '" fill="' + opts.bgcolor + '"/>';
    for (let i = 0; i < imageData.length; i++) {
      if (imageData[i]) {
        const row = Math.floor(i / width);
        const col = i % width;
        const fill = imageData[i] == 1 ? opts.color : opts.spotcolor;
        svg += '<rect x="' + col * opts.scale + '" y="' + row * opts.scale + '" width="' + opts.scale + '" height="' + opts.scale + '" fill="' + fill + '"/>';
      }
    }
    return svg + "</svg>";
  }

  // src/routes/threads.ts
  init_env();
  var moreLinkEl = (moreLink) => html`
  <tr class="morespace" style="height:10px"></tr>
  <tr>
    <td>
      <table border="0">
        <tr>
          <td><img src="s.gif" height="1" width="0"></td>
          <td><img src="s.gif" height="1" width="14"></td>
          <td class="title"><a href="${moreLink}" class="morelink" rel="next">More</a></td>
        </tr>
      </table>
    </td>
  </tr>`;
  async function threads3({ searchParams, type: contentType }) {
    const id = searchParams.get("id");
    if (!id)
      return notFound2("No such item.");
    const title = `${id}'s comments`;
    const next = Number(searchParams.get("next"));
    const threadsPage = threads2(id, next);
    if (contentType === "application/json") {
      return new JSONResponse(await jsonStringifyStream(threadsPage));
    }
    return new HTMLResponse(pageLayout({ title, op: "threads", id })(async () => {
      return html`
      <tr>
        <td> </td>
      </tr>
      ${async function* () {
        try {
          const { items, moreLink } = await threadsPage;
          for await (const item of items) {
            yield commentEl(item, { showReply: true, showParent: item.level === 0 });
          }
          yield moreLinkEl(await moreLink);
        } catch (err) {
          console.warn(err);
          yield html`<tr><td>${err instanceof Error ? err.message : err}</td></tr>`;
        }
      }}
      `;
    }));
  }
  router.get("/threads", mw, (_req, x4) => threads3(x4));

  // src/routes/item.ts
  var commentTr = (comm, { showToggle = true, showReply = true, showParent = false } = {}) => {
    const { id, level, by, text, time, quality, deleted, parent, story, storyTitle } = comm;
    const timeAgo = time && formatDistanceToNowStrict(time, { addSuffix: true });
    return html`<tr>
    <td class="ind" indent="${level ?? 0}"><img src="s.gif" height="1" width="${(level ?? 0) * 40}"></td>
    <td valign="top" class="votelinks">
      <center>${deleted ? html`<img src="s.gif" height="1" width="14">` : html`<a id="up_${id}" onclick="popitup(this,event)" href="https://news.ycombinator.com/item?id=${id}#${id}"><div class="votearrow" title="upvote"></div></a>`}</center>
    </td>
    <td class="default">
      <div style="margin-top:2px; margin-bottom:-10px;">
        <span class="comhead">
          <a href="user?id=${by}" class="hnuser">${identicon(by)} ${by}</a> 
          <span class="age" title="${time?.toUTCString()}"><a href="item?id=${id}">${timeAgo}</a></span>
          <span id="unv_${id}"></span>
          <span class="navs">
            <span class="par">${showParent ? html` | <a href="item?id=${parent}">parent</a>` : ""}</span> 
          </span>
          ${showToggle ? html`<a class="togg clicky" id="${id}" n="${(comm.descendants ?? 0) + 1}" href="javascript:void(0)">[–]</a>` : ""}
          <span class="onstory">${showParent && story && storyTitle ? html` | on: <a href="item?id=${story}">${storyTitle}</a>` : ""}</span>
        </span>
      </div><br/>
      <div class="comment">
        <span class="commtext ${quality}">
          ${deleted ? "[flagged]" : text ? unsafeHTML(text) : " "}
          <div class="reply">
            <p>
              ${showReply && !deleted ? html`<font size="1">
                ${""}
                ${""}
                <u><a onclick="popitup(this,event,850,300)" href="https://news.ycombinator.com/item?id=${id}#${id}">reply</a></u>
              </font>` : ""}
            </p>
          </div>
        </span>
      </div>
    </td>
  </tr>`;
  };
  var commentEl = (comment, commOpts = {}) => {
    return html`<tr class="athing comtr" id="${comment.id}">
    <td>
      <table border="0">
        <tbody>
          ${commentTr(comment, commOpts)}
        </tbody>
      </table>
    </td>
  </tr>`;
  };
  async function* commentTree(kids, parent) {
    for await (const item of kids) {
      yield commentEl(item, { showReply: !parent.dead });
      if (item.kids)
        yield* commentTree(item.kids, parent);
    }
  }
  var pollOptEl = (opt) => {
    return html`<tr class="athing" id="${opt.id}"><td></td>
    <td valign="top" class="votelinks"><center><a id="up_${opt.id}" href="https://news.ycombinator.com/item?id=${opt.id}#${opt.id}" onclick="popitup(this,event)">
      <div class="votearrow" title="upvote"></div></a></center></td><td class="comment"><div style="margin-top:1px;margin-bottom:0px">
    <font style="color:var(--text-strong)">${opt.text}</font>
    </div></td></tr><tr><td colspan="2"></td><td class="default"><span class="comhead">
    <span class="score" id="score_${opt.id}">${opt.score} points</span><span id="unv_${opt.id}"></span></span></td></tr>
    <tr style="height:7px"></tr>`;
  };
  async function* pollOptList(parts) {
    yield html`<tr style="height:10px"></tr>
    <tr>
      <td colspan="2"></td>
      <td><table border="0">${async function* () {
      for await (const item of parts) {
        yield pollOptEl(item);
      }
    }()}</table></td>
    </tr>`;
  }
  var PLACEHOLDER = "Worker News";
  var replyTr = ({ id, type }) => {
    return html`<tr style="height:10px"></tr>
    <tr>
      <td colspan="2"></td>
      <td>
        <form method="post" action="comment"><input type="hidden" name="parent" value="${id}"><input
            type="hidden" name="goto" value="item?id=${id}"><input type="hidden" name="hmac"
            value="${"TODO"}"><textarea name="text" rows="8"
            cols="80" disabled placeholder="Not implemented"></textarea>
          <br/><br/><input type="submit" value="${type === "comment" ? "reply" : "add comment"}" disabled>
          <font size="1"><u>
            <a onclick="popitup(this,event,850,275)" href="https://news.ycombinator.com/item?id=${id}#${id}">${type === "comment" ? "reply" : "add comment"} on HN</a>
          </u></font>
        </form>
      </td>
    </tr>`;
  };
  async function buffer(iter) {
    const chunks = [];
    for await (const x4 of iter)
      chunks.push(x4);
    return chunks;
  }
  async function jsonStringifyStream(_obj) {
    const obj = await _obj;
    for (const [key2, value] of Object.entries(obj)) {
      if (value != null && typeof value === "object" && Symbol.asyncIterator in value) {
        obj[key2] = await buffer(value);
      } else {
        obj[key2] = await value;
      }
    }
    return obj;
  }
  var _a7;
  async function getItem(args) {
    const { searchParams } = args;
    const id = Number(searchParams.get("id"));
    if (Number.isNaN(id))
      return notFound2("No such item.");
    const p = Number(searchParams.get("p"));
    const postResponse = comments2(id, p);
    const pageRenderer = pageLayout({ title: PLACEHOLDER, op: "item" });
    if (args.type === "application/json") {
      return new JSONResponse(await jsonStringifyStream(await postResponse));
    }
    return new HTMLResponse(pageRenderer(async () => {
      try {
        const post = await postResponse;
        const { title, text, kids, parts } = post;
        return html`
        ${title ? html(_a7 || (_a7 = __template(["<script>document.title = document.title.replace('", "', decodeURIComponent(document.getElementById('pagespace').title))<\/script>"])), PLACEHOLDER) : ""}
        <tr>
          <td>
            <table class="fatitem" border="0">
              <tbody>
                ${post.type === "comment" ? [commentTr(post, { showParent: true, showToggle: false })] : [
          aThing(post),
          subtext(post, void 0, void 0, { showPast: true }),
          text ? html`<tr style="height:2px"></tr><tr><td colspan="2"></td><td>${unsafeHTML(text)}</td></tr>` : "",
          parts ? pollOptList(parts) : ""
        ]}${!post.dead ? replyTr(post) : ""}
              </tbody>
            </table>
            <table border="0" class="comment-tree">
              <tbody>
                ${kids && commentTree(kids, post)}
                ${async () => {
          const moreLink = await post.moreLink;
          return moreLink ? moreLinkEl(moreLink) : html`<br/><br/>`;
        }}
              </tbody>
            </table>
          </td>
        </tr>`;
      } catch (err) {
        return html`<tr id="pagespace" title="Error" style="height:10px"></tr>
        <tr><td>${err instanceof Error ? err.message : err}</td></tr>`;
      }
    }));
  }
  router.get("/identicon/dang.svg", (req) => fetch("https://news.ycombinator.com/y18.gif", req));
  router.get("/identicon/:by.svg", pipe(basics(), contentTypes(["image/svg+xml"]), caching({
    cacheControl: "public",
    maxAge: 31536e3
  })), async (req, { params, type, waitUntil, handled }) => {
    const cache = await self.caches?.open("identicon");
    const res = await cache?.match(req);
    if (!res) {
      const svg = renderIconSVG({ seed: params.by ?? "", size: 6, scale: 2 });
      const res2 = new Response(svg, { headers: { "content-type": type } });
      waitUntil((async () => {
        await handled;
        res2.headers.set("cache-control", "public, max-age=31536000");
        return cache?.put(req, res2);
      })());
      return res2.clone();
    }
    return new Response(res.body, res);
  });
  router.get("/item", mw, (_req, ctx) => getItem(ctx));

  // src/routes/news.ts
  var JUNK_NEWS = [];
  var SUB_SITES = ["medium.com", "substack.com", "mozilla.org", "mit.edu", "hardvard.edu", "google.com", "apple.com", "notion.site", "js.org"];
  var GIT_SITES = ["twitter.com", "github.com", "gitlab.com", "vercel.app"];
  var tryURL = (href) => {
    try {
      const url = new URL(href, self.location.origin);
      const res = parseDomain(url.hostname);
      if (res.type === "LISTED") {
        const { domain, topLevelDomains: tld, subDomains } = res;
        const allowedSubDomains = SUB_SITES.some((_) => url.hostname.endsWith(_)) && subDomains.length ? subDomains.slice(subDomains.length - 1).concat("").join(".") : "";
        const allowedPathname = GIT_SITES.includes(url.hostname) ? url.pathname.split(/\/+/).slice(0, 2).join("/").toLowerCase() : "";
        const sitebit = `${allowedSubDomains}${domain}.${tld.join(".")}${allowedPathname}`;
        return Object.assign(url, { sitebit });
      }
      return null;
    } catch {
      return null;
    }
  };
  var rankEl = (index) => html`
  <span class="rank">${index != null && !Number.isNaN(index) ? `${index + 1}.` : ""}</span>`;
  var favicon = (url) => {
    const img = url?.hostname && url.hostname !== self.location.hostname ? `https://icons.duckduckgo.com/ip3/${url.hostname}.ico` : `darky18.png`;
    return html`<img class="favicon" src="${img}" alt="${url?.hostname ?? "favicon"}" width="11" height="11"/>`;
  };
  var aThing = async ({ type, id, url: href, title, dead, deleted }, index, op) => {
    try {
      const url = tryURL(href);
      const upVoted = false;
      return html`
      <tr class="athing" id="${id}">
        <td align="right" valign="top" class="title">${rankEl(index)}</td>
        <td valign="top" class="votelinks"><center>${type === "job" ? html`<img src="s.gif" height="1" width="14">` : upVoted ? "" : html`<a id="up_${id}" onclick="popitup(this,event)" href="https://news.ycombinator.com/item?id=${id}#${id}"><div class="votearrow" title="upvote"></div></a>`}</center></td>
        <td class="title">${deleted ? "[flagged]" : html`<a href="${href}"
            class="titlelink">${favicon(url)} ${title}</a>${url?.host === self.location.host ? "" : url ? html`<span
            class="sitebit comhead"> (<a href="from?site=${url.sitebit}"><span
                class="sitestr">${url.sitebit}</span></a>)</span>` : ""}</td>`}</tr>`;
    } catch (err) {
      throw html`<tr><td>Something went wrong</td><td>${err instanceof Error ? err.message : err}</td></tr>`;
    }
  };
  var subtext = (post, index, op, { showPast = false } = {}) => {
    const { type, id, title, time, score, by, descendants, dead } = post;
    const timeAgo = time && formatDistanceToNowStrict(time, { addSuffix: true });
    return html`
    <tr>
      <td colspan="2"></td>
      <td class="subtext">
        ${!dead && type !== "job" ? html`<span class="score" id="score_${id}">${score} points</span> by` : ""}
        ${type !== "job" ? html`<a href="user?id=${by}" class="hnuser">${showPast ? identicon(by, 9) : ""} ${by}</a>` : ""}
        <span class="age" title="${time?.toUTCString()}"><a href="item?id=${id}">${timeAgo}</a></span>
        <span id="unv_${id}"></span>
        ${showPast ? html`| <a href="https://hn.algolia.com/?query=${encodeURIComponent(title)}&amp;type=story&amp;dateRange=all&amp;sort=byDate&amp;storyText=false&amp;prefix&amp;page=0" class="hnpast">past</a>` : ""}
        <!-- | <a href="hide?id=${id}&amp;auth=${"TODO"}&amp;goto=item%3Fid%3D${id}">hide</a> -->
        <!-- | <a href="hide?id=${id}&amp;auth=${"TODO"}&amp;goto=${op}" onclick="return hidestory(event, this, ${id})">hide</a>  -->
        ${!dead && type !== "job" ? html`| <a href="item?id=${id}">${descendants === 0 ? "discuss" : unsafeHTML(`${descendants}&nbsp;comments`)}</a></td>` : ""}
    </tr>
  `;
  };
  var rowEl = (post, i, type) => {
    if (JUNK_NEWS.some((f) => tryURL(post.url)?.hostname?.includes(f)))
      return "";
    const index = ["jobs" /* JOB */, "from" /* FROM */].includes(type) ? NaN : i;
    return html`
    ${aThing(post, index, type)}
    ${subtext(post, index, type)}
    <tr class="spacer" style="height:5px"></tr>`;
  };
  var x3 = {
    ["news" /* TOP */]: "",
    ["jobs" /* JOB */]: "jobs",
    ["ask" /* ASK */]: "Ask",
    ["best" /* BEST */]: "Top Links",
    ["newest" /* NEW */]: "New Links",
    ["show" /* SHOW */]: "Show",
    ["shownew" /* SHOW_NEW */]: "New Show",
    ["submitted" /* USER */]: `$user's submissions`,
    ["classic" /* CLASSIC */]: "",
    ["from" /* FROM */]: "Submissions from $site"
  };
  var messageEl = (message, marginBottom = 12) => html`
  <tr style="height:6px"></tr>
  <tr><td colspan="2"></td><td>${message}</td></tr>
  <tr style="height:${marginBottom}px"></tr>`;
  var mkStories = (type) => async ({ searchParams, type: contentType }) => {
    const p = Number(searchParams.get("p") || "1");
    if (p > Math.ceil(500 / 30))
      return notFound2("Not supported by Worker News");
    const next = Number(searchParams.get("next"));
    const n = Number(searchParams.get("n"));
    const id = "submitted" /* USER */ ? searchParams.get("id") : "";
    const site = "from" /* FROM */ ? searchParams.get("site") : "";
    const title = x3[type].replace("$user", searchParams.get("id")).replace("$site", searchParams.get("site"));
    const storiesPage = stories2({ p, n, next, id, site }, type);
    if (contentType === "application/json") {
      return new JSONResponse(await jsonStringifyStream(storiesPage));
    }
    return new HTMLResponse(pageLayout({ op: type, title, id: searchParams.get("id") })(html`
    <tr>
      <td>
        <table border="0" cellpadding="0" cellspacing="0" class="itemlist">
          <tbody>
            ${type === "show" /* SHOW */ ? messageEl(html`
              Please read the <a href="showhn.html"><u>rules</u></a>. You can also
              browse the <a href="shownew"><u>newest</u></a> Show HNs.`) : ""}
            ${type === "jobs" /* JOB */ ? messageEl(html`
              These are jobs at YC startups. See more at
              <a href="https://www.ycombinator.com/jobs"><u>ycombinator.com/jobs</u></a>.`, 14) : ""}
            ${async function* () {
      try {
        let i = next && n ? n - 1 : (p - 1) * 30;
        const { items, moreLink } = await storiesPage;
        for await (const post of items) {
          yield rowEl(post, i++, type);
        }
        yield html`<tr class="morespace" style="height:10px"></tr>
                  <tr>
                    <td colspan="2"></td>
                    <td class="title"><a href="${moreLink}" class="morelink" rel="next">More</a></td>
                  </tr>`;
      } catch (err) {
        yield html`<tr><td colspan="2"></td><td>${err instanceof Error ? err.message : err}</td></tr>`;
      }
    }}
          </tbody>
        </table>
      </td>
    </tr>`));
  };
  var news = mkStories("news" /* TOP */);
  var newest = mkStories("newest" /* NEW */);
  var best = mkStories("best" /* BEST */);
  var show = mkStories("show" /* SHOW */);
  var showNew = mkStories("shownew" /* SHOW_NEW */);
  var ask = mkStories("ask" /* ASK */);
  var jobs = mkStories("jobs" /* JOB */);
  var submitted = mkStories("submitted" /* USER */);
  var classic = mkStories("classic" /* CLASSIC */);
  var from = mkStories("from" /* FROM */);
  router.get("/news", mw, (_req, ctx) => news(ctx));
  router.get("/newest", mw, (_req, x4) => newest(x4));
  router.get("/best", mw, (_req, x4) => best(x4));
  router.get("/show", mw, (_req, x4) => show(x4));
  router.get("/shownew", mw, (_req, x4) => showNew(x4));
  router.get("/ask", mw, (_req, x4) => ask(x4));
  router.get("/jobs", mw, (_req, x4) => jobs(x4));
  router.get("/submitted", mw, (_req, x4) => submitted(x4));
  router.get("/classic", mw, (_req, x4) => classic(x4));
  router.get("/from", mw, (_req, x4) => from(x4));

  // src/routes/user.ts
  init_env();
  var dtf = new Intl.DateTimeFormat("en-US", {
    year: "numeric",
    month: "long",
    day: "numeric"
  });
  var numDTF = new Intl.DateTimeFormat("en-US", {
    year: "numeric",
    month: "numeric",
    day: "numeric"
  });
  var user3 = async ({ searchParams, type }) => {
    const un = searchParams.get("id");
    if (!un)
      return notFound2("No such user.");
    const userPromise = user2(un);
    const title = `Profile: ${un}`;
    if (type === "application/json") {
      return new JSONResponse(await jsonStringifyStream(userPromise));
    }
    return new HTMLResponse(pageLayout({ op: "user", title })(html`
    <tr>
      <td>
        <table border="0"><tbody>
          ${async () => {
      try {
        const uo = await userPromise;
        const dt = uo?.created && new Date(uo.created * 1e3);
        const [{ value: month }, , { value: day }, , { value: year }] = numDTF.formatToParts(dt);
        return html`
                <tr class="athing"><td valign="top">user:</td><td timestamp="${uo.created}"><a href="user?id=${un}" class="hnuser">${identicon(un, 13)} ${un}</a></td></tr>
                <tr><td valign="top">created:</td><td><a href="front?day=${year}-${month}-${day}&amp;birth=${un}">${dtf.format(dt)}</a></td></tr>
                <tr><td valign="top">karma:</td><td>${uo.karma}</td></tr>
                <tr><td valign="top">about:</td><td style="overflow:hidden;">${unsafeHTML(uo.about ?? "")}</td></tr>
                <tr><td></td><td><a href="submitted?id=${un}"><u>submissions</u></a></td></tr>
                <tr><td></td><td><a href="threads?id=${un}"><u>comments</u></a></td></tr>
                <!-- <tr><td></td><td><a href="favorites?id=${un}"><u>favorites</u></a></td></tr> -->
              `;
      } catch (err) {
        return html`<tr><td colspan="2"></td><td>${err instanceof Error ? err.message : err}</td></tr>`;
      }
    }}
        </tbody></table>
        <br/><br/>
      </td>
    </tr>`));
  };
  router.get("/user", mw, (_req, x4) => user3(x4));

  // src/routes/index.ts
  router.get("/yc500.gif", (req) => fetch("https://news.ycombinator.com/yc500.gif", req));
  router.get("/newsfaq.html", (req) => fetch("https://news.ycombinator.com/newsfaq.html", req));
  router.get("/newsguidelines.html", (req) => fetch("https://news.ycombinator.com/newsguidelines.html", req));
  router.get("/showhn.html", (req) => fetch("https://news.ycombinator.com/showhn.html", req));
  router.get("/security.html", (req) => fetch("https://news.ycombinator.com/security.html", req));
  router.get("/yc.css", (req) => fetch("https://news.ycombinator.com/yc.css", req));
  router.get("/", mw, (req, x4) => news(x4));
  router.get("*", caching({
    cacheControl: "public",
    maxAge: 60 * 60 * 24 * 30 * 12
  }), handler);
  router.external("https://icons.duckduckgo.com/*", (req) => fetch(req));

  // src/entry/sw.ts
  self.addEventListener("fetch", router);
  self.addEventListener("install", () => {
    self.skipWaiting();
    console.log("skipWaiting");
  });
  self.addEventListener("activate", (event) => {
    event.waitUntil(self.clients.claim());
    console.log("claim");
  });
})();
/*!
 * escape-html
 * Copyright(c) 2012-2013 TJ Holowaychuk
 * Copyright(c) 2015 Andreas Lubbe
 * Copyright(c) 2015 Tiancheng "Timothy" Gu
 * Copyright (c) 2020 Henry Zhuang
 * MIT Licensed
 */
/**
 * String.prototype.replaceAll() polyfill
 * https://gomakethings.com/how-to-replace-a-section-of-a-string-with-another-one-with-vanilla-js/
 * @author Chris Ferdinandi
 * @license MIT
 */
